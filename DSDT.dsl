/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20221020 (64-bit version)
 * Copyright (c) 2000 - 2022 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of DSDT, Thu Apr 20 00:56:16 2023
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x0001DEA2 (122530)
 *     Revision         0x01 **** 32-bit table (V1), no 64-bit math support
 *     Checksum         0x88
 *     OEM ID           "LENOVO"
 *     OEM Table ID     "CB-01   "
 *     OEM Revision     0x00000001 (1)
 *     Compiler ID      "ACPI"
 *     Compiler Version 0x00040000 (262144)
 */
DefinitionBlock ("", "DSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.CNFG, IntObj)
    External (_SB_.EATL, UnknownObj)
    External (_SB_.GZFD.CPP2, UnknownObj)
    External (_SB_.GZFD.CPP4, UnknownObj)
    External (_SB_.GZFD.HTPL, MethodObj)    // 0 Arguments
    External (_SB_.LSKD, UnknownObj)
    External (_SB_.M009, MethodObj)    // 1 Arguments
    External (_SB_.M010, MethodObj)    // 2 Arguments
    External (_SB_.MCSK, IntObj)
    External (_SB_.NPCF, DeviceObj)
    External (_SB_.PCI0.DSSV, FieldUnitObj)
    External (_SB_.PCI0.GFX0.VGA_.LCD_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN7, UnknownObj)
    External (_SB_.PCI0.GPP0.CMDR, UnknownObj)
    External (_SB_.PCI0.GPP0.D0ST, UnknownObj)
    External (_SB_.PCI0.GPP0.GSTA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.LNKD, FieldUnitObj)
    External (_SB_.PCI0.GPP0.PEGP, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.CUMA, IntObj)
    External (_SB_.PCI0.GPP0.PEGP.EDP0, DeviceObj)
    External (_SB_.PCI0.GPP0.PEGP.SSSV, FieldUnitObj)
    External (_SB_.PCI0.GPP0.PG00._ON_, UnknownObj)
    External (_SB_.PCI0.GPP0.PG00.M239, IntObj)
    External (_SB_.PCI0.GPP0.SGPC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.LCD_, DeviceObj)
    External (_SB_.PCI0.LPC0.CNFG, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.DCMB, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.M010, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPC0.EC0_.REJF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.EC0_.WEJF, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPC0.INSM, UnknownObj)
    External (_SB_.PCI0.LPC0.TPOS, UnknownObj)
    External (_SB_.PCI0.VGA_.LCD_, DeviceObj)
    External (_SB_.S4FG, UnknownObj)
    External (_SB_.TPM2.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.YKBT, IntObj)
    External (AFN4, MethodObj)    // 1 Arguments
    External (AFN7, MethodObj)    // 1 Arguments
    External (DSMF, FieldUnitObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M046, IntObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M23A, FieldUnitObj)
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M31C, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M408, MutexObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)
    External (M449, FieldUnitObj)
    External (M453, FieldUnitObj)
    External (M454, FieldUnitObj)
    External (M455, FieldUnitObj)
    External (M456, FieldUnitObj)
    External (M457, FieldUnitObj)
    External (M460, MethodObj)    // 7 Arguments
    External (M4C0, FieldUnitObj)
    External (M4F0, FieldUnitObj)
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x5C), 
        Offset (0x5E), 
        GS23,   1, 
            ,   5, 
        GV23,   1, 
        GE23,   1, 
        Offset (0xA0), 
        Offset (0xA2), 
        GS40,   1, 
            ,   5, 
        GV40,   1, 
        GE40,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Method (TPST, 1, Serialized)
    {
        M000 (Arg0)
    }

    OperationRegion (GNVS, SystemMemory, 0x9AEEDA98, 0x0000018F)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8, 
        CNSB,   8, 
        RDHW,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        GV0E,   8, 
        WLSH,   8, 
        TSSS,   8, 
        AOZP,   8, 
        TZFG,   8, 
        BPS0,   8, 
        NAPC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        WLAN,   8, 
        BLTH,   8, 
        GPSS,   8, 
        NFCS,   8, 
        SBTY,   8, 
        BDID,   16, 
        MWTT,   8, 
        ACPM,   8, 
        KBCS,   8, 
        ACEC,   8, 
        DPTC,   8, 
        ECTL,   8, 
        MM64,   8, 
        HMB1,   64, 
        HMB2,   64, 
        HMM1,   64, 
        HMM2,   64, 
        HML1,   64, 
        HML2,   64, 
        WOVS,   8, 
        TCNT,   8, 
        TOPM,   32, 
        WX1M,   8
    }

    OperationRegion (OGNS, SystemMemory, 0x9AEEDD18, 0x00000011)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        M2WL,   8, 
        THPN,   8, 
        PBAR,   8, 
        THPD,   8, 
        DTEN,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8, 
        RV2I,   8, 
        ISDS,   8, 
        PSEL,   8, 
        TPPL,   16, 
        TRCF,   16
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50){})
        Name (STG2, Buffer (0x50){})
        STG1 = Arg0
        STG2 = Arg1
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = Zero
        While ((Local0 < SizeOf (Arg0)))
        {
            If ((DerefOf (STG1 [Local0]) != DerefOf (STG2 [Local0]
                )))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                M460 ("PLA-ASL-\\OSTP \\_OSI exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001.1", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001 SP1", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001 SP2", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2001 SP3", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2006", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2006 SP1", Zero, Zero, Zero, Zero, Zero)
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2009", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2012", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2013", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Windows 2015", Zero, Zero, Zero, Zero, Zero)
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    M460 ("PLA-ASL-\\OSTP Call _OSI(%S) = TRUE\n", "Linux", Zero, Zero, Zero, Zero, Zero)
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            Else
            {
                M460 ("PLA-ASL-\\OSTP \\_OSI does NOT exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                If (CondRefOf (\_OS, Local0))
                {
                    M460 ("PLA-ASL-\\OSTP \\_OS exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    If (SEQL (_OS, "Microsoft Windows"))
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS == (%S)\n", "Microsoft Windows", Zero, Zero, Zero, Zero, Zero)
                        OSTB = One
                        TPOS = One
                    }
                    ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS == (%S)\n", "Microsoft WindowsME: Millennium Edition", Zero, Zero, Zero, Zero, Zero)
                        OSTB = 0x02
                        TPOS = 0x02
                    }
                    ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS == (%S)\n", "Microsoft Windows NT", Zero, Zero, Zero, Zero, Zero)
                        OSTB = 0x04
                        TPOS = 0x04
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\OSTP Call SEQL \\_OS != (%S)\n", "Microsoft Windows", Zero, Zero, Zero, Zero, Zero)
                        OSTB = Zero
                        TPOS = Zero
                    }
                }
                Else
                {
                    M460 ("PLA-ASL-\\OSTP \\_OS does NOT exist\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    OSTB = Zero
                    TPOS = Zero
                }
            }
        }

        M460 ("PLA-ASL-\\OSTP TPOS = 0x%X, Return OSTB = 0x%X\n", TPOS, OSTB, Zero, Zero, Zero, Zero)
        Return (OSTB) /* \OSTB */
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000){})
    OperationRegion (MDBG, SystemMemory, 0x9AE60018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        SHOW (Arg0)
        MDGC (0x20)
        MDG0 = MBUF /* \MBUF */
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Name (BUFS, Buffer (Local0){})
        BUFS = Arg0
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (MBGH, 1, Serialized)
    {
        ToHexString (Arg0, Local1)
        Local0 = SizeOf (Local1)
        Name (BUFS, Buffer (Local0){})
        BUFS = Local1
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Local1) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (One)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((CNSB == Zero))
    {
        If ((DAS3 == One))
        {
            Name (_S3, Package (0x04)  // _S3_: S3 System State
            {
                0x03, 
                0x03, 
                Zero, 
                Zero
            })
        }
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (XL08, 0, NotSerialized)
        {
            TPST (0x3908)
            M460 ("PLA-ASL-\\_GPE._L08\n", Zero, Zero, Zero, Zero, Zero, Zero)
            If ((TBEN == Zero))
            {
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            }

            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        M460 ("PLA-ASL-\\_PIC Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        If (PICM)
        {
            \_SB.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        M250 (Zero, Zero, Zero, 0x13F01308, One)
        SPTS (Arg0)
        M460 ("PLA-ASL-\\_PTS Start Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        If ((Arg0 == One))
        {
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0x53)
            SLPS = One
            Local1 = 0x40
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0x54)
            SLPS = One
            RSTU = One
            Local1 = 0x80
        }

        If ((Arg0 == 0x04))
        {
            If (((DSMF == 0x03) || (DSMF == 0x04)))
            {
                Local0 = Zero
                \_SB.PCI0.GPP0.PEGP.CUMA = Zero
                Notify (\_SB.PCI0.GPP0.PEGP, Zero) // Bus Check
                Local0 = \_SB.PCI0.GPP0.PEGP.CUMA /* External reference */
                \_SB.PCI0.LPC0.EC0.WEJF (0x04, Local0)
            }
        }

        If ((Arg0 == 0x05))
        {
            \_SB.S80H (0x55)
            If ((WKPM == One))
            {
                PWDE = One
            }

            BCMD = 0x90
            M460 ("PLA-ASL-\\_PTS call \\_SB.BSMI(0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.BSMI (Zero)
            M460 ("PLA-ASL-\\_PTS call \\_SB.GSMI(0x3)\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.GSMI (0x03)
            Local1 = 0xC0
        }

        If (CondRefOf (\_SB.TPM2.PTS))
        {
            M460 ("PLA-ASL-\\_PTS call \\_SB.TPM2.PTS\n", Zero, Zero, Zero, Zero, Zero, Zero)
            \_SB.TPM2.PTS (Arg0)
        }

        M460 ("PLA-ASL-\\_PTS call \\_SB.APTS\n", Zero, Zero, Zero, Zero, Zero, Zero)
        \_SB.APTS (Arg0)
        M460 ("PLA-ASL-\\_PTS call MPTS\n", Zero, Zero, Zero, Zero, Zero, Zero)
        MPTS (Arg0)
        M460 ("PLA-ASL-\\_PTS End\n", Zero, Zero, Zero, Zero, Zero, Zero)
    }

    Name (FNQ0, Package (0x12)
    {
        Package (0x08)
        {
            0x05, 
            0x07, 
            0x06, 
            One, 
            0x08, 
            0x03, 
            0x0C, 
            0x0B
        }, 

        Package (0x08)
        {
            0x00014C08, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0x00015F90, 
            0x00015F90, 
            0xC8, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xC350, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x0001FBD0, 
            0xD6D8
        }, 

        Package (0x08)
        {
            0x4E20, 
            0x88B8, 
            0x9C40, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x2710, 
            0x2710, 
            0x2710, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x61A8, 
            0x61A8, 
            0x61A8, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x88B8, 
            0x9C40, 
            0x9C40, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xA028, 
            0xC738, 
            0xC738, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xD2F0, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x88B8, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0x9C40, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xC350, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xD6D8, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xEA60, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }
    })
    Name (FNQ1, Package (0x12)
    {
        Package (0x08)
        {
            0x05, 
            0x07, 
            0x06, 
            One, 
            0x08, 
            0x03, 
            0x0C, 
            0x0B
        }, 

        Package (0x08)
        {
            0x00013880, 
            0x000156F8, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00011170
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0x000156F8, 
            0x00015F90, 
            0xC8, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xC350, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x0001FBD0, 
            0xD6D8
        }, 

        Package (0x08)
        {
            0x4E20, 
            0x88B8, 
            0x9C40, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x2710, 
            0x2710, 
            0x2710, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x61A8, 
            0x61A8, 
            0x61A8, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x88B8, 
            0x9C40, 
            0x9C40, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xA028, 
            0xC738, 
            0xC738, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xD2F0, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x7530, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0x9C40, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xC350, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xD6D8, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xEA60, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }
    })
    Name (FNQ4, Package (0x12)
    {
        Package (0x08)
        {
            0x05, 
            0x07, 
            0x06, 
            One, 
            0x08, 
            0x03, 
            0x0C, 
            0x0B
        }, 

        Package (0x08)
        {
            0x00013880, 
            0x000156F8, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xC350, 
            0x000156F8, 
            0x00015F90, 
            0xC8, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xC350, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x0001FBD0, 
            0xD6D8
        }, 

        Package (0x08)
        {
            0x4E20, 
            0x88B8, 
            0x9C40, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x2710, 
            0x2710, 
            0x2710, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x61A8, 
            0x61A8, 
            0x61A8, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x88B8, 
            0x9C40, 
            0x9C40, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xA028, 
            0xC738, 
            0xC738, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xD2F0, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x7530, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0x9C40, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xC350, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xD6D8, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xEA60, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }
    })
    Name (FNQ2, Package (0x12)
    {
        Package (0x08)
        {
            0x05, 
            0x07, 
            0x06, 
            One, 
            0x08, 
            0x03, 
            0x0C, 
            0x0B
        }, 

        Package (0x08)
        {
            0x00013880, 
            0x000156F8, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0x000156F8, 
            0x00015F90, 
            0xC8, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xC350, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x88B8, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x0001FBD0, 
            0xD6D8
        }, 

        Package (0x08)
        {
            0x4E20, 
            0x88B8, 
            0x9C40, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x2710, 
            0x2710, 
            0x2710, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x61A8, 
            0x61A8, 
            0x61A8, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x88B8, 
            0x9C40, 
            0x9C40, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xA028, 
            0xC738, 
            0xC738, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xD2F0, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x7530, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0x9C40, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xC350, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xD6D8, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xEA60, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }
    })
    Name (FNQ3, Package (0x12)
    {
        Package (0x08)
        {
            0x05, 
            0x07, 
            0x06, 
            One, 
            0x08, 
            0x03, 
            0x0C, 
            0x0B
        }, 

        Package (0x08)
        {
            0x00014C08, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00011170
        }, 

        Package (0x08)
        {
            0xD6D8, 
            0x00015F90, 
            0x00015F90, 
            0xC8, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xC350, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xFDE8, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x61A8, 
            0xA028, 
            0xC738, 
            0x32, 
            0x05, 
            0x5A, 
            0x0001FBD0, 
            0xD6D8
        }, 

        Package (0x08)
        {
            0x4E20, 
            0x88B8, 
            0x9C40, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x2710, 
            0x2710, 
            0x2710, 
            0x32, 
            0x05, 
            0x5A, 
            0x00015F90, 
            0x9C40
        }, 

        Package (0x08)
        {
            0x61A8, 
            0x61A8, 
            0x61A8, 
            0x32, 
            0x05, 
            0x5A, 
            0x00019A28, 
            0xC350
        }, 

        Package (0x08)
        {
            0x88B8, 
            0x9C40, 
            0x9C40, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xA028, 
            0xC738, 
            0xC738, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0xAFC8, 
            0xD2F0, 
            0xD2F0, 
            0x0113, 
            0x0A, 
            0x64, 
            0x000222E0, 
            0xFDE8
        }, 

        Package (0x08)
        {
            0x88B8, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0x9C40, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xC350, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xD6D8, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }, 

        Package (0x08)
        {
            0xEA60, 
            0x00015F90, 
            0x00015F90, 
            0x01F4, 
            0x1E, 
            0x64, 
            0x000222E0, 
            0x00013880
        }
    })
    Name (FNQ6, Package (0x08)
    {
        Package (0x0D)
        {
            0x2E, 
            0x07, 
            0x06, 
            0x08, 
            0x20, 
            0x22, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x2C, 
            0x03
        }, 

        Package (0x0D)
        {
            0xFDE8, 
            0x000156F8, 
            0x000156F8, 
            0x1E, 
            0x199A, 
            0x2D00, 
            0x21, 
            0x2666, 
            0xFE8A, 
            0xFEEC, 
            0x03C4, 
            0x4FAD, 
            0x64
        }, 

        Package (0x0D)
        {
            0xAFC8, 
            0x000156F8, 
            0x000156F8, 
            0x1E, 
            0x199A, 
            0x2800, 
            0x21, 
            0x2666, 
            0xFE88, 
            0x040E, 
            0x0339, 
            0x000FBE25, 
            0x64
        }, 

        Package (0x0D)
        {
            0xAFC8, 
            0xD2F0, 
            0xFDE8, 
            0x0A, 
            0x199A, 
            0x2D00, 
            0x21, 
            0x2666, 
            0xFF45, 
            0x0306, 
            0x029A, 
            0x000FD500, 
            0x64
        }, 

        Package (0x0D)
        {
            0x88B8, 
            0xD2F0, 
            0xFDE8, 
            0x0A, 
            0x199A, 
            0x2800, 
            0x21, 
            0x2666, 
            0xFE61, 
            0x01D2, 
            0x037C, 
            0x3E, 
            0x64
        }, 

        Package (0x0D)
        {
            0x61A8, 
            0xAFC8, 
            0xBB80, 
            0x05, 
            0x199A, 
            0x2800, 
            0x21, 
            0x2666, 
            0xFE61, 
            0x01D2, 
            0x037C, 
            0x3E, 
            0x60
        }, 

        Package (0x0D)
        {
            0x61A8, 
            0x927C, 
            0xBB80, 
            0x05, 
            0x199A, 
            0x1F00, 
            0x21, 
            0x2666, 
            0xB9, 
            0x05CF, 
            0x77, 
            0x000F88BB, 
            0x60
        }, 

        Package (0x0D)
        {
            0x4E20, 
            0x88B8, 
            0x9C40, 
            0x05, 
            0x199A, 
            0x1F00, 
            0x21, 
            0x2666, 
            0xB9, 
            0x05CF, 
            0x77, 
            0x000F88BB, 
            0x60
        }
    })
    Method (FTSW, 0, NotSerialized)
    {
        If ((MCSK == One))
        {
            If (((GTYP == 0x05) || (GTYP == 0x06)))
            {
                Local0 = FNQ2 /* \FNQ2 */
            }
            ElseIf ((GTYP == One))
            {
                Local0 = FNQ4 /* \FNQ4 */
            }
            Else
            {
                Local0 = FNQ1 /* \FNQ1 */
            }
        }
        ElseIf ((MCSK == 0x02))
        {
            If (((GTYP == 0x02) || (GTYP == 0x07)))
            {
                Local0 = FNQ3 /* \FNQ3 */
            }
            Else
            {
                Local0 = FNQ0 /* \FNQ0 */
            }
        }
        Else
        {
            Local0 = FNQ0 /* \FNQ0 */
        }

        Return (Local0)
    }

    Method (FNQR, 1, NotSerialized)
    {
        Local6 = FTSW ()
        Local0 = SizeOf (Local6 [Zero])
        Local1 = ((Local1 = (Local0 * 0x05)) + 0x02)
        Name (BUFF, Buffer (Local1){})
        BUFF [Zero] = Local1
        BUFF [One] = Zero
        Local2 = One
        Local3 = Zero
        Local4 = Zero
        While ((Local3 < Local0))
        {
            BUFF [Local2 += One] = DerefOf (DerefOf (Local6 [
                Zero]) [Local3])
            Local4 = DerefOf (DerefOf (Local6 [Arg0]) [Local3])
            BUFF [Local2 += One] = (Local4 & 0xFF)
            BUFF [Local2 += One] = ((Local4 & 0xFF00) >> 
                0x08)
            BUFF [Local2 += One] = ((Local4 & 0x00FF0000) >> 
                0x10)
            BUFF [Local2 += One] = ((Local4 & 0xFF000000) >> 
                0x18)
            Local3 += One
        }

        \_SB.ALIB (0x0C, BUFF)
    }

    Method (FNQS, 1, Serialized)
    {
        Sleep (0x03E8)
        If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
        {
            Local0 = ToInteger (\_SB.PCI0.LPC0.EC0.DCMB)
            Release (\_SB.PCI0.LPC0.EC0.LFCM)
        }

        If (((Local0 > Zero) && (Local0 < 0x07)))
        {
            Local0 += 0x07
            FNQR (Local0)
        }
        Else
        {
            Local0 = Arg0
            Local1 = ((One == Local0) || (0x02 == Local0))
            Local2 = ((0x03 == Local0) || (0x04 == Local0))
            Local3 = (Local1 || Local2)
            If (((0x02 == \_SB.PCI0.LPC0.EC0.ACTY ()) || (0x03 == \_SB.PCI0.LPC0.EC0.ACTY ())))
            {
                If (Local3)
                {
                    Local0 = 0x05
                }

                If ((0x06 == Local0))
                {
                    Local0 = 0x07
                }
            }

            FNQR (Local0)
        }

        If (((COCC == One) && (CPTY == 0x09)))
        {
            Name (XX22, Buffer (0x07){})
            CreateWordField (XX22, Zero, SSZ2)
            CreateByteField (XX22, 0x02, SMN2)
            CreateDWordField (XX22, 0x03, SMD2)
            SSZ2 = 0x07
            SMN2 = 0x0C
            SMD2 = 0x00025D78
            \_SB.ALIB (0x0C, XX22)
            SMN2 = 0x0B
            SMD2 = 0x000186A0
            \_SB.ALIB (0x0C, XX22)
        }
    }

    Scope (\)
    {
        Name (S4FG, Zero)
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        M460 ("PLA-ASL-\\_WAK Start Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
        M460 ("PLA-ASL-\\_WAK call SWAK\n", Zero, Zero, Zero, Zero, Zero, Zero)
        SWAK (Arg0)
        M460 ("PLA-ASL-\\_WAK call \\_SB.AWAK\n", Zero, Zero, Zero, Zero, Zero, Zero)
        \_SB.AWAK (Arg0)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GPIC != Zero))
            {
                M460 ("PLA-ASL-\\_WAK call \\_SB.DSPI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                \_SB.DSPI ()
                If (NAPC)
                {
                    M460 ("PLA-ASL-\\_WAK call \\_SB.PCI0.NAPE\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    \_SB.PCI0.NAPE ()
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0xE3)
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            \_SB.S80H (0xE4)
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        \_SB.ADP0.ACDC = 0xFF
        If ((Arg0 == 0x04))
        {
            If (((DSMF == 0x03) || (DSMF == 0x04)))
            {
                Local0 = \_SB.PCI0.LPC0.EC0.REJF (One)
                If (((\_SB.PCI0.LPC0.EC0.REJF (0x04) != Zero) && ((Local0 == One) || (
                    Local0 == 0x02))))
                {
                    \_SB.PCI0.GPP0.PEGP.CUMA = Zero
                    Notify (\_SB.PCI0.GPP0.PEGP, Zero) // Bus Check
                }

                \_SB.PCI0.LPC0.EC0.WEJF (0x04, Zero)
            }
        }

        If ((Arg0 != 0x03))
        {
            If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
            {
                If ((\_SB.PCI0.LPC0.EC0.SPMO == 0x02))
                {
                    If ((\_SB.PCI0.LPC0.EC0.ADPT == Zero))
                    {
                        FNQS (0x07)
                    }
                    Else
                    {
                        FNQS (0x06)
                    }

                    LTGP = Zero
                    DTGP = Zero
                    If ((\_SB.PCI0.LPC0.EC0.ACTY () == One))
                    {
                        EATL = One
                    }
                    Else
                    {
                        EATL = Zero
                    }
                }
                ElseIf ((\_SB.PCI0.LPC0.EC0.SPMO == One))
                {
                    FNQS (One)
                    LTGP = One
                    DTGP = One
                    EATL = Zero
                }
                Else
                {
                    If ((\_SB.PCI0.LPC0.EC0.ADPT == Zero))
                    {
                        FNQS (0x05)
                    }
                    Else
                    {
                        FNQS (0x03)
                    }

                    LTGP = Zero
                    DTGP = Zero
                    EATL = Zero
                }

                Release (\_SB.PCI0.LPC0.EC0.LFCM)
            }

            Notify (\_SB.NPCF, 0xC0) // Hardware-Specific
            Notify (\_SB.PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
        }

        If ((TPOS == 0x40))
        {
            Local0 = One
        }

        If ((TPOS == 0x80))
        {
            Local0 = 0x02
        }

        If ((TPOS == 0x50))
        {
            Local0 = 0x03
        }

        If ((TPOS == 0x60))
        {
            Local0 = 0x04
        }

        If ((TPOS == 0x61))
        {
            Local0 = 0x05
        }

        If ((TPOS == 0x70))
        {
            Local0 = 0x06
        }

        If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
        {
            \_SB.PCI0.LPC0.EC0.OSTY = Local0
            Release (\_SB.PCI0.LPC0.EC0.LFCM)
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            S4FG = One
        }

        MWAK (Arg0)
        M460 ("PLA-ASL-\\_WAK End\n", Zero, Zero, Zero, Zero, Zero, Zero)
        M250 (Zero, Zero, Zero, 0x13F01308, Zero)
        Return (Zero)
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (_ADR, Zero)  // _ADR: Address
            Name (NBRI, Zero)
            Name (NBAR, Zero)
            Name (NCMD, Zero)
            Name (PXDC, Zero)
            Name (PXLC, Zero)
            Name (PXD2, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                M460 ("PLA-ASL-\\_SB.PCI0._INI Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                If ((GPIC != Zero))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._INI call \\_SB.DSPI\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    DSPI ()
                    If (NAPC)
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0._INI call \\_SB.PCI0.NAPE\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        NAPE ()
                    }
                }

                M460 ("PLA-ASL-\\_SB.PCI0._INI call \\OSTP\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OSTP ()
                M460 ("PLA-ASL-\\_SB.PCI0._INI End\n", Zero, Zero, Zero, Zero, Zero, Zero)
            }

            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg0, Zero, UID0)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg2 == One))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    Local2 = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
                }
                Else
                {
                    Local3 = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Start  CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((TBEN == One))
                    {
                        If ((TBNH != Zero))
                        {
                            CTRL &= 0xFFFFFFF5
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFF4
                        }
                    }

                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0xFFFFFFFE
                    }

                    CTRL &= 0xFFFFFFF5
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x04)){}
                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                }
                Else
                {
                    CDW1 |= 0x04
                }

                If ((Arg2 == One))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X\n", UID0, CDW1, Zero, Zero, Zero, Zero)
                }
                ElseIf ((Arg2 == 0x02))
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X\n", UID0, CDW1, CDW2, Zero, Zero, Zero)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.PCI0._OSC UUID 0x%X Return CDW1 = 0x%X CDW2 = 0x%X CDW3 = 0x%X\n", UID0, CDW1, CDW2, CDW3, Zero, Zero)
                }

                Return (Arg3)
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02B00000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFED814FF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0003C500,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED81900,         // Range Minimum
                    0xFED81FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000700,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC0000,         // Range Minimum
                    0xFEDC0FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC6000,         // Range Minimum
                    0xFEDC6FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.PCI0._CRS Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = TOM ()
                If ((TOPM != Zero))
                {
                    BTX1 = TOPM /* \TOPM */
                }

                BTMX = (PCBA - One)
                BTLN = (PCBA - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                BTN1 = (PCBL + One)
                BTL1 = (BTX1 - BTN1) /* \_SB_.PCI0._CRS.BTN1 */
                BTL1 += One
                If ((MM64 == One))
                {
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                    M1MN = HMB1 /* \HMB1 */
                    M1MX = HMM1 /* \HMM1 */
                    M1LN = HML1 /* \HML1 */
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MAX, M2MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._LEN, M2LN)  // _LEN: Length
                    M2MN = HMB2 /* \HMB2 */
                    M2MX = HMM2 /* \HMM2 */
                    M2LN = HML2 /* \HML2 */
                }

                M460 ("PLA-ASL-\\_SB.PCI0._CRS End\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (BAR3, 0xFDE00000)
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    M460 ("PLA-ASL-\\_SB.PCI0.MEMR._CRS Start\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML02)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._BAS, MB03)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._LEN, ML03)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        If (NAPC)
                        {
                            ML01 += 0x1000
                        }

                        ML02 = 0x1000
                    }

                    If ((BAR3 != 0xFFF00000))
                    {
                        MB03 = BAR3 /* \_SB_.PCI0.MEMR.BAR3 */
                        ML03 = 0x00100000
                    }

                    M460 ("PLA-ASL-\\_SB.PCI0.MEMR._CRS End\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                Local0 = (PCBA + 0xB8)
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Local1 = NAPX /* \_SB_.PCI0.NAPE.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPE.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                Release (NAPM)
            }

            Method (PXCR, 3, Serialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.PXCR\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = Zero
                Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
                While ((Local1 != Zero))
                {
                    Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
                    If (((Local2 == Zero) || (Local2 == 0xFF)))
                    {
                        Break
                    }

                    If ((Local2 == 0x10))
                    {
                        Local0 = Local1
                        Break
                    }

                    Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
                }

                Return (Local0)
            }

            Method (SPCF, 1, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.SPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local0 = M019 (Zero, (Arg0 >> 0x10), (Arg0 & 0xFF), 
                    0x18)
                NBRI = ((Local0 & 0xFF00) >> 0x08)
                NCMD = M019 (NBRI, Zero, Zero, 0x04)
                NBAR = M019 (NBRI, Zero, Zero, 0x10)
                Local1 = PXCR (NBRI, Zero, Zero)
                PXDC = M019 (NBRI, Zero, Zero, (Local1 + 0x08))
                PXLC = M019 (NBRI, Zero, Zero, (Local1 + 0x10))
                PXD2 = M019 (NBRI, Zero, Zero, (Local1 + 0x28))
            }

            Method (RPCF, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.GPPX.RPCF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Local1 = PXCR (NBRI, Zero, Zero)
                M020 (NBRI, Zero, Zero, (Local1 + 0x08), PXDC)
                M020 (NBRI, Zero, Zero, (Local1 + 0x10), (PXLC & 0xFFFFFEFC))
                M020 (NBRI, Zero, Zero, (Local1 + 0x28), PXD2)
                M020 (NBRI, Zero, Zero, 0x10, NBAR)
                M020 (NBRI, Zero, Zero, 0x04, 0x06)
            }

            Method (UPWD, 0, NotSerialized)
            {
                M460 ("PLA-ASL-_SB.PCI0.UPWD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
                Field (PSMI, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8, 
                    SMID,   8
                }

                SMIC = 0xE3
            }

            Name (PRB0, Package (0x11)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (ARB0, Package (0x11)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (NRB0, Package (0x11)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x18
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x19
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x1A
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x1B
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x1C
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x1D
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x1E
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x1F
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x28
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x28
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    If (NAPC)
                    {
                        Return (NRB0) /* \_SB_.PCI0.NRB0 */
                    }
                    Else
                    {
                        Return (ARB0) /* \_SB_.PCI0.ARB0 */
                    }
                }
                Else
                {
                    Return (PRB0) /* \_SB_.PCI0.PRB0 */
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP0.RHRW Return GPRW (0x8, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP0.RHRW Return GPRW (0x8, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR00, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR00, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR00, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR00) /* \_SB_.PCI0.GPP0.NR00 */
                        }
                        Else
                        {
                            Return (AR00) /* \_SB_.PCI0.GPP0.AR00 */
                        }
                    }
                    Else
                    {
                        Return (PR00) /* \_SB_.PCI0.GPP0.PR00 */
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP1.RHRW Return GPRW (0x8, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP1.RHRW Return GPRW (0x8, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR01) /* \_SB_.PCI0.GPP1.NR01 */
                        }
                        Else
                        {
                            Return (AR01) /* \_SB_.PCI0.GPP1.AR01 */
                        }
                    }
                    Else
                    {
                        Return (PR01) /* \_SB_.PCI0.GPP1.PR01 */
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WX1M == Zero))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP2.RHRW Return GPRW (0xD, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x0D, 0x04))
                    }
                    ElseIf ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP2.RHRW Return GPRW (0x8, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP2.RHRW Return GPRW (0x8, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x23
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR02) /* \_SB_.PCI0.GPP2.NR02 */
                        }
                        Else
                        {
                            Return (AR02) /* \_SB_.PCI0.GPP2.AR02 */
                        }
                    }
                    Else
                    {
                        Return (PR02) /* \_SB_.PCI0.GPP2.PR02 */
                    }
                }

                Device (WWAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Name (PR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR03) /* \_SB_.PCI0.GPP3.NR03 */
                        }
                        Else
                        {
                            Return (AR03) /* \_SB_.PCI0.GPP3.AR03 */
                        }
                    }
                    Else
                    {
                        Return (PR03) /* \_SB_.PCI0.GPP3.PR03 */
                    }
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x29
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR04) /* \_SB_.PCI0.GPP4.NR04 */
                        }
                        Else
                        {
                            Return (AR04) /* \_SB_.PCI0.GPP4.AR04 */
                        }
                    }
                    Else
                    {
                        Return (PR04) /* \_SB_.PCI0.GPP4.PR04 */
                    }
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP5.RHRW Return GPRW (0xF, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x0F, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP5.RHRW Return GPRW (0xF, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x0F, Zero))
                    }
                }

                Name (PR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR05, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR05) /* \_SB_.PCI0.GPP5.NR05 */
                        }
                        Else
                        {
                            Return (AR05) /* \_SB_.PCI0.GPP5.AR05 */
                        }
                    }
                    Else
                    {
                        Return (PR05) /* \_SB_.PCI0.GPP5.PR05 */
                    }
                }

                Device (RTL8)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (RUSB)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP6.RHRW Return GPRW (0xE, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x0E, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP6.RHRW Return GPRW (0xE, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x0E, Zero))
                    }
                }

                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (WL00)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (WLPC, PCI_Config, Zero, 0x90)
                    Field (WLPC, ByteAcc, NoLock, Preserve)
                    {
                        WVID,   16, 
                        WDID,   16, 
                        Offset (0x44), 
                        ICAP,   32, 
                        ICTR,   16, 
                        Offset (0x84), 
                        MCAP,   32, 
                        MCTR,   16
                    }

                    Method (MTDS, 0, Serialized)
                    {
                        Name (MTD6, Package (0x1F)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            One, 
                            Zero, 
                            0x02, 
                            One, 
                            0x1E, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0x02, 
                            0x1E, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF
                        })
                        Name (MTD5, Package (0x1F)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            One, 
                            Zero, 
                            0x02, 
                            One, 
                            0x1E, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0x02, 
                            0x1E, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0x17, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF, 
                            0xFF
                        })
                        If ((WDID == 0x0616))
                        {
                            Return (MTD6) /* \_SB_.PCI0.GPP6.WL00.MTDS.MTD6 */
                        }
                        Else
                        {
                            Return (MTD5) /* \_SB_.PCI0.GPP6.WL00.MTDS.MTD5 */
                        }
                    }

                    Method (MTCL, 0, Serialized)
                    {
                        Name (MTCL, Package (0x0C)
                        {
                            0x4D, 
                            0x54, 
                            0x43, 
                            0x4C, 
                            One, 
                            One, 
                            0x80, 
                            0x08, 
                            One, 
                            0x08, 
                            Zero, 
                            Zero
                        })
                        Return (MTCL) /* \_SB_.PCI0.GPP6.WL00.MTCL.MTCL */
                    }

                    Method (MTGS, 0, Serialized)
                    {
                        Name (MTGS, Package (0x15)
                        {
                            0x4D, 
                            0x54, 
                            0x47, 
                            0x53, 
                            One, 
                            0x03, 
                            One, 
                            0x18, 
                            0x06, 
                            0x22, 
                            0x04, 
                            0x02, 
                            0x28, 
                            0x08, 
                            0x26, 
                            0x07, 
                            0x03, 
                            0x2A, 
                            0x0B, 
                            0x28, 
                            0x08
                        })
                        Return (MTGS) /* \_SB_.PCI0.GPP6.WL00.MTGS.MTGS */
                    }

                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If ((WVID == 0x14C3))
                            {
                                If ((MCAP & 0x10000000))
                                {
                                    Local0 = MCTR /* \_SB_.PCI0.GPP6.WL00.MCTR */
                                    Local0 |= 0x8000
                                    MCTR = Local0
                                }
                            }
                            ElseIf ((ICAP & 0x10000000))
                            {
                                Local0 = ICTR /* \_SB_.PCI0.GPP6.WL00.ICTR */
                                Local0 |= 0x8000
                                ICTR = Local0
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP7.RHRW Return GPRW (0x2, 0x4)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x02, 0x04))
                    }
                    Else
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GPP7.RHRW Return GPRW (0x2, 0x0)\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (GPRW (0x02, Zero))
                    }
                }

                Name (PR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR07) /* \_SB_.PCI0.GPP7.NR07 */
                        }
                        Else
                        {
                            Return (AR07) /* \_SB_.PCI0.GPP7.AR07 */
                        }
                    }
                    Else
                    {
                        Return (PR07) /* \_SB_.PCI0.GPP7.PR07 */
                    }
                }

                Device (DEV0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Name (PR08, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR08, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR08, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x2C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x2D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR08) /* \_SB_.PCI0.GPP8.NR08 */
                        }
                        Else
                        {
                            Return (AR08) /* \_SB_.PCI0.GPP8.AR08 */
                        }
                    }
                    Else
                    {
                        Return (PR08) /* \_SB_.PCI0.GPP8.PR08 */
                    }
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Name (PR09, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR09, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR09, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x2A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x2B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x28
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x29
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR09) /* \_SB_.PCI0.GPP9.NR09 */
                        }
                        Else
                        {
                            Return (AR09) /* \_SB_.PCI0.GPP9.AR09 */
                        }
                    }
                    Else
                    {
                        Return (PR09) /* \_SB_.PCI0.GPP9.PR09 */
                    }
                }
            }

            Device (GP10)
            {
                Name (_ADR, 0x00020006)  // _ADR: Address
                Name (PR10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR10, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x25
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR10) /* \_SB_.PCI0.GP10.NR10 */
                        }
                        Else
                        {
                            Return (AR10) /* \_SB_.PCI0.GP10.AR10 */
                        }
                    }
                    Else
                    {
                        Return (PR10) /* \_SB_.PCI0.GP10.PR10 */
                    }
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Name (PR11, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR11, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR11, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR11) /* \_SB_.PCI0.GP11.NR11 */
                        }
                        Else
                        {
                            Return (AR11) /* \_SB_.PCI0.GP11.AR11 */
                        }
                    }
                    Else
                    {
                        Return (PR11) /* \_SB_.PCI0.GP11.PR11 */
                    }
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Name (PR12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR12, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR12) /* \_SB_.PCI0.GP12.NR12 */
                        }
                        Else
                        {
                            Return (AR12) /* \_SB_.PCI0.GP12.AR12 */
                        }
                    }
                    Else
                    {
                        Return (PR12) /* \_SB_.PCI0.GP12.PR12 */
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Name (PR13, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR13, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR13, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x23
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x21
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR13) /* \_SB_.PCI0.GP17.NR13 */
                        }
                        Else
                        {
                            Return (AR13) /* \_SB_.PCI0.GP17.AR13 */
                        }
                    }
                    Else
                    {
                        Return (PR13) /* \_SB_.PCI0.GP17.PR13 */
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA._DOD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (Package (0x07)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240, 
                            0x00031000, 
                            0x00032000
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCL\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.GP17.VGA.LCD._BCM Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                            BRTL = Arg0
                        }

                        Method (VDDC, 2, NotSerialized)
                        {
                            Local0 = Arg1
                            CreateField (Local0, Zero, 0x40, EDS1)
                            Local1 = EDS1 /* \_SB_.PCI0.GP17.VGA_.LCD_.VDDC.EDS1 */
                            If ((Local1 != Buffer (0x08)
                                        {
                                             0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00   // ........
                                        }))
                            {
                                Return (Zero)
                            }

                            CreateByteField (Local0, 0x7E, EBLK)
                            Local1 = EBLK /* \_SB_.PCI0.GP17.VGA_.LCD_.VDDC.EBLK */
                            Local1++
                            Local2 = (Local1 * 0x80)
                            Local3 = (Local2 * 0x08)
                            If ((SizeOf (Local0) < Local2))
                            {
                                Return (Zero)
                            }

                            If ((Arg0 == Local1))
                            {
                                CreateField (Local0, Zero, Local3, EBUF)
                                Return (EBUF) /* \_SB_.PCI0.GP17.VGA_.LCD_.VDDC.EBUF */
                            }

                            Return (Zero)
                        }

                        Method (_DDC, 1, NotSerialized)  // _DDC: Display Data Current
                        {
                            Return (VDDC (Arg0, BDDN))
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT1._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT1_PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT2._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT2._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLD1 */
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT3._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.PLD1 */
                            }

                            Device (CAM0)
                            {
                                Method (_ADR, 0, Serialized)  // _ADR: Address
                                {
                                    Return (^^_ADR) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3._ADR */
                                }

                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x1,
                                        PLD_Panel              = "FRONT",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "CENTER",
                                        PLD_Shape              = "UNKNOWN",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x0,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x8C,
                                        PLD_HorizontalOffset   = 0x12C)

                                })
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT4._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT4._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.PLD1 */
                            }
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT5._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT5._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.PLD1 */
                            }
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT6._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC0.RHUB.PRT6._PLD\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.PLD1 */
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x1C, 0x80, 0x02, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PLD1 */
                            }

                            Device (HS01)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x1,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (HS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x2,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (HS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (UPC, Package (0x04)
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (UPCN, Package (0x04)
                                {
                                    0xFF, 
                                    0x0A, 
                                    Zero, 
                                    Zero
                                })
                                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                {
                                    If ((MCSK == 0x04))
                                    {
                                        Return (UPCN) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.HS03.UPCN */
                                    }
                                    Else
                                    {
                                        Return (UPC) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.HS03.UPC_ */
                                    }
                                }

                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x3,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                M460 ("PLA-ASL-\\_SB.PCI0.GP17.XHC1.RHUB._UPC\n", Zero, Zero, Zero, Zero, Zero, Zero)
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT3.PLD1 */
                            }

                            OperationRegion (BTGP, SystemMemory, 0xFE0B09B8, One)
                            Field (BTGP, AnyAcc, NoLock, Preserve)
                            {
                                    ,   4, 
                                BTPP,   1
                            }

                            PowerResource (BTPR, 0x00, 0x0000)
                            {
                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    If ((BTPP == One))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                Method (_ON, 0, Serialized)  // _ON_: Power On
                                {
                                }

                                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                                {
                                }

                                Method (_RST, 0, Serialized)  // _RST: Device Reset
                                {
                                    BTPP = Zero
                                    Sleep (0x012C)
                                    BTPP = One
                                    Sleep (0x012C)
                                }
                            }

                            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                            {
                                BTPR
                            })
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x01, 0x1C, 0x80, 0x02, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT4.PLD1 */
                            }
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.PLD1 */
                            }

                            Device (SS01)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x1,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (SS02)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x2,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }

                            Device (SS03)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (UPC, Package (0x04)
                                {
                                    0xFF, 
                                    0x03, 
                                    Zero, 
                                    Zero
                                })
                                Name (UPCN, Package (0x04)
                                {
                                    0xFF, 
                                    0x0A, 
                                    Zero, 
                                    Zero
                                })
                                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                {
                                    If ((MCSK == 0x04))
                                    {
                                        Return (UPCN) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.SS03.UPCN */
                                    }
                                    Else
                                    {
                                        Return (UPC) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.SS03.UPC_ */
                                    }
                                }

                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x1,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "TOP",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "LEFT",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x3,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x1,
                                        PLD_EjectRequired      = 0x1,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0,
                                        PLD_VerticalOffset     = 0x0,
                                        PLD_HorizontalOffset   = 0x0)

                                })
                            }
                        }
                    }
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Name (PR14, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR14, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR14, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR14) /* \_SB_.PCI0.GP18.NR14 */
                        }
                        Else
                        {
                            Return (AR14) /* \_SB_.PCI0.GP18.AR14 */
                        }
                    }
                    Else
                    {
                        Return (PR14) /* \_SB_.PCI0.GP18.PR14 */
                    }
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                             // .
                                })
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Name (PR15, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR15, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR15, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x19
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR15) /* \_SB_.PCI0.GP19.NR15 */
                        }
                        Else
                        {
                            Return (AR15) /* \_SB_.PCI0.GP19.AR15 */
                        }
                    }
                    Else
                    {
                        Return (PR15) /* \_SB_.PCI0.GP19.PR15 */
                    }
                }

                Device (XHC2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT2.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC2.RHUB.PRT2.PLD1 */
                            }
                        }
                    }
                }

                Device (NHI0)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (XHC3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x90, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP19.XHC3.RHUB.PRT1.UPC1 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP19.XHC3.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC2, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Name (PLD2, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x90, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC2) /* \_SB_.PCI0.GP19.XHC3.RHUB.PRT2.UPC2 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD2) /* \_SB_.PCI0.GP19.XHC3.RHUB.PRT2.PLD2 */
                            }
                        }
                    }
                }

                Device (NHI1)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (XHC4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC3, Package (0x04)
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (PLD3, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x90, 0x80, 0x05, 0x01, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC3) /* \_SB_.PCI0.GP19.XHC4.RHUB.PRT1.UPC3 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD3) /* \_SB_.PCI0.GP19.XHC4.RHUB.PRT1.PLD3 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC4, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Name (PLD4, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x69, 0x90, 0x80, 0x05, 0x01, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC4) /* \_SB_.PCI0.GP19.XHC4.RHUB.PRT2.UPC4 */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD4) /* \_SB_.PCI0.GP19.XHC4.RHUB.PRT2.PLD4 */
                            }
                        }
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((HPEN == One))
                    {
                        If ((OSTB >= 0x40))
                        {
                            M460 ("PLA-ASL-\\_SB.PCI0.HPET._STA = 0xF\n", Zero, Zero, Zero, Zero, Zero, Zero)
                            Return (0x0F)
                        }

                        HPEN = Zero
                        M460 ("PLA-ASL-\\_SB.PCI0.HPET._STA = 0x1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                        Return (One)
                    }

                    M460 ("PLA-ASL-\\_SB.PCI0.HPET._STA 1 = 0x1\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    M460 ("PLA-ASL-\\_SB.PCI0.HPET._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y07)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y07._BAS, HPEB)  // _BAS: Base Address
                    Local0 = 0xFED00000
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("FUJ7401"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveLow, Shared, )
                            {1}
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y08)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (Ones - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Name (FNQ0, Package (0x12)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00014C08, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x00015F90, 
                        0x00015F90, 
                        0xC8, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x0001FBD0, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x2710, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0x9C40, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xA028, 
                        0xC738, 
                        0xC738, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xD2F0, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x9C40, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }
                })
                Name (FNQ1, Package (0x12)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x000156F8, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x000156F8, 
                        0x00015F90, 
                        0xC8, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x0001FBD0, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x2710, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0x9C40, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xA028, 
                        0xC738, 
                        0xC738, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xD2F0, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x9C40, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }
                })
                Name (FNQ4, Package (0x12)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x000156F8, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x000156F8, 
                        0x00015F90, 
                        0xC8, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x0001FBD0, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x2710, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0x9C40, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xA028, 
                        0xC738, 
                        0xC738, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xD2F0, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x9C40, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }
                })
                Name (FNQ2, Package (0x12)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00013880, 
                        0x000156F8, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0x000156F8, 
                        0x00015F90, 
                        0xC8, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x0001FBD0, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x2710, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0x9C40, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xA028, 
                        0xC738, 
                        0xC738, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xD2F0, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x7530, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x9C40, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }
                })
                Name (FNQ3, Package (0x12)
                {
                    Package (0x08)
                    {
                        0x05, 
                        0x07, 
                        0x06, 
                        One, 
                        0x08, 
                        0x03, 
                        0x0C, 
                        0x0B
                    }, 

                    Package (0x08)
                    {
                        0x00014C08, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00011170
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00015F90, 
                        0x00015F90, 
                        0xC8, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0xA028, 
                        0xC738, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x0001FBD0, 
                        0xD6D8
                    }, 

                    Package (0x08)
                    {
                        0x4E20, 
                        0x88B8, 
                        0x9C40, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x2710, 
                        0x2710, 
                        0x2710, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00015F90, 
                        0x9C40
                    }, 

                    Package (0x08)
                    {
                        0x61A8, 
                        0x61A8, 
                        0x61A8, 
                        0x32, 
                        0x05, 
                        0x5A, 
                        0x00019A28, 
                        0xC350
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x9C40, 
                        0x9C40, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xA028, 
                        0xC738, 
                        0xC738, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xD2F0, 
                        0x0113, 
                        0x0A, 
                        0x64, 
                        0x000222E0, 
                        0xFDE8
                    }, 

                    Package (0x08)
                    {
                        0x88B8, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0x9C40, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xC350, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xD6D8, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }, 

                    Package (0x08)
                    {
                        0xEA60, 
                        0x00015F90, 
                        0x00015F90, 
                        0x01F4, 
                        0x1E, 
                        0x64, 
                        0x000222E0, 
                        0x00013880
                    }
                })
                Name (FNQ6, Package (0x08)
                {
                    Package (0x0D)
                    {
                        0x2E, 
                        0x07, 
                        0x06, 
                        0x08, 
                        0x20, 
                        0x22, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x2C, 
                        0x03
                    }, 

                    Package (0x0D)
                    {
                        0xFDE8, 
                        0x000156F8, 
                        0x000156F8, 
                        0x1E, 
                        0x199A, 
                        0x2D00, 
                        0x21, 
                        0x2666, 
                        0xFE8A, 
                        0xFEEC, 
                        0x03C4, 
                        0x4FAD, 
                        0x64
                    }, 

                    Package (0x0D)
                    {
                        0xAFC8, 
                        0x000156F8, 
                        0x000156F8, 
                        0x1E, 
                        0x199A, 
                        0x2800, 
                        0x21, 
                        0x2666, 
                        0xFE88, 
                        0x040E, 
                        0x0339, 
                        0x000FBE25, 
                        0x64
                    }, 

                    Package (0x0D)
                    {
                        0xAFC8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0A, 
                        0x199A, 
                        0x2D00, 
                        0x21, 
                        0x2666, 
                        0xFF45, 
                        0x0306, 
                        0x029A, 
                        0x000FD500, 
                        0x64
                    }, 

                    Package (0x0D)
                    {
                        0x88B8, 
                        0xD2F0, 
                        0xFDE8, 
                        0x0A, 
                        0x199A, 
                        0x2800, 
                        0x21, 
                        0x2666, 
                        0xFE61, 
                        0x01D2, 
                        0x037C, 
                        0x3E, 
                        0x64
                    }, 

                    Package (0x0D)
                    {
                        0x61A8, 
                        0xAFC8, 
                        0xBB80, 
                        0x05, 
                        0x199A, 
                        0x2800, 
                        0x21, 
                        0x2666, 
                        0xFE61, 
                        0x01D2, 
                        0x037C, 
                        0x3E, 
                        0x60
                    }, 

                    Package (0x0D)
                    {
                        0x61A8, 
                        0x927C, 
                        0xBB80, 
                        0x05, 
                        0x199A, 
                        0x1F00, 
                        0x21, 
                        0x2666, 
                        0xB9, 
                        0x05CF, 
                        0x77, 
                        0x000F88BB, 
                        0x60
                    }, 

                    Package (0x0D)
                    {
                        0x4E20, 
                        0x88B8, 
                        0x9C40, 
                        0x05, 
                        0x199A, 
                        0x1F00, 
                        0x21, 
                        0x2666, 
                        0xB9, 
                        0x05CF, 
                        0x77, 
                        0x000F88BB, 
                        0x60
                    }
                })
                Method (FTSW, 0, NotSerialized)
                {
                    If ((MCSK == One))
                    {
                        If (((GTYP == 0x05) || (GTYP == 0x06)))
                        {
                            Local0 = FNQ2 /* \_SB_.PCI0.LPC0.FNQ2 */
                        }
                        ElseIf ((GTYP == One))
                        {
                            Local0 = FNQ4 /* \_SB_.PCI0.LPC0.FNQ4 */
                        }
                        Else
                        {
                            Local0 = FNQ1 /* \_SB_.PCI0.LPC0.FNQ1 */
                        }
                    }
                    ElseIf ((MCSK == 0x02))
                    {
                        If (((GTYP == 0x02) || (GTYP == 0x07)))
                        {
                            Local0 = FNQ3 /* \_SB_.PCI0.LPC0.FNQ3 */
                        }
                        Else
                        {
                            Local0 = FNQ0 /* \_SB_.PCI0.LPC0.FNQ0 */
                        }
                    }
                    Else
                    {
                        Local0 = FNQ0 /* \_SB_.PCI0.LPC0.FNQ0 */
                    }

                    Return (Local0)
                }

                Method (FNQR, 1, NotSerialized)
                {
                    Local6 = FTSW ()
                    Local0 = SizeOf (Local6 [Zero])
                    Local1 = ((Local1 = (Local0 * 0x05)) + 0x02)
                    Name (BUFF, Buffer (Local1){})
                    BUFF [Zero] = Local1
                    BUFF [One] = Zero
                    Local2 = One
                    Local3 = Zero
                    Local4 = Zero
                    While ((Local3 < Local0))
                    {
                        BUFF [Local2 += One] = DerefOf (DerefOf (Local6 [
                            Zero]) [Local3])
                        Local4 = DerefOf (DerefOf (Local6 [Arg0]) [Local3])
                        BUFF [Local2 += One] = (Local4 & 0xFF)
                        BUFF [Local2 += One] = ((Local4 & 0xFF00) >> 
                            0x08)
                        BUFF [Local2 += One] = ((Local4 & 0x00FF0000) >> 
                            0x10)
                        BUFF [Local2 += One] = ((Local4 & 0xFF000000) >> 
                            0x18)
                        Local3 += One
                    }

                    ALIB (0x0C, BUFF)
                }

                Method (FNQS, 1, Serialized)
                {
                    Sleep (0x03E8)
                    If ((Acquire (^EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = ToInteger (^EC0.DCMB)
                        Release (^EC0.LFCM)
                    }

                    If (((Local0 > Zero) && (Local0 < 0x07)))
                    {
                        Local0 += 0x07
                        FNQR (Local0)
                    }
                    Else
                    {
                        Local0 = Arg0
                        Local1 = ((One == Local0) || (0x02 == Local0))
                        Local2 = ((0x03 == Local0) || (0x04 == Local0))
                        Local3 = (Local1 || Local2)
                        If (((0x02 == ^EC0.ACTY ()) || (0x03 == ^EC0.ACTY ())))
                        {
                            If (Local3)
                            {
                                Local0 = 0x05
                            }

                            If ((0x06 == Local0))
                            {
                                Local0 = 0x07
                            }
                        }

                        FNQR (Local0)
                    }

                    If (((COCC == One) && (CPTY == 0x09)))
                    {
                        Name (XX22, Buffer (0x07){})
                        CreateWordField (XX22, Zero, SSZ2)
                        CreateByteField (XX22, 0x02, SMN2)
                        CreateDWordField (XX22, 0x03, SMD2)
                        SSZ2 = 0x07
                        SMN2 = 0x0C
                        SMD2 = 0x00025D78
                        ALIB (0x0C, XX22)
                        SMN2 = 0x0B
                        SMD2 = 0x000186A0
                        ALIB (0x0C, XX22)
                    }
                }

                Scope (\)
                {
                    Name (ECON, One)
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (ECAV, Zero)
                    Mutex (LFCM, 0x00)
                    Name (_GPE, 0x09)  // _GPE: General Purpose Events
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0480,             // Range Minimum
                                0x0480,             // Range Maximum
                                0x00,               // Alignment
                                0x10,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPC0.EC0_._CRS.BFFR */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (ERA6, SystemMemory, 0xFE0B0600, 0xFF)
                    Field (ERA6, AnyAcc, Lock, Preserve)
                    {
                        Offset (0xFC), 
                        HT0L,   8, 
                        HT0H,   8
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        VCMD,   8
                    }

                    OperationRegion (COCD, SystemMemory, 0xFE0B0678, 0x10)
                    Field (COCD, ByteAcc, Lock, Preserve)
                    {
                        CGTH,   8, 
                        YLOG,   8, 
                        CST2,   8, 
                        RLS2,   8, 
                        COD3,   8, 
                        COD5,   8, 
                        GPAB,   8, 
                        TGPP,   8
                    }

                    OperationRegion (ICCD, SystemMemory, 0xFE0B060A, One)
                    Field (ICCD, ByteAcc, Lock, Preserve)
                    {
                        ICC2,   8
                    }

                    OperationRegion (CCCD, SystemMemory, 0xFE0B0CBA, One)
                    Field (CCCD, ByteAcc, Lock, Preserve)
                    {
                        COD1,   8
                    }

                    OperationRegion (ECB2, SystemMemory, 0xFF00D520, 0xFF)
                    Field (ECB2, AnyAcc, Lock, Preserve)
                    {
                        BAR1,   184, 
                        BAR2,   80
                    }

                    OperationRegion (F9FT, SystemMemory, 0xFE0B09F0, 0x20)
                    Field (F9FT, AnyAcc, Lock, Preserve)
                    {
                        F9F0,   8, 
                        F9F1,   8, 
                        F9F2,   8, 
                        F9F3,   8, 
                        F9F4,   8, 
                        F9F5,   8, 
                        F9F6,   8, 
                        F9F7,   8, 
                        F9F8,   8, 
                        F9F9,   8, 
                        F9FA,   8
                    }

                    OperationRegion (ADAP, SystemMemory, 0xFE0B022F, One)
                    Field (ADAP, ByteAcc, Lock, Preserve)
                    {
                        ADA1,   8
                    }

                    OperationRegion (ADP2, SystemMemory, 0xFE0B029A, One)
                    Field (ADP2, ByteAcc, Lock, Preserve)
                    {
                        ADA2,   8
                    }

                    OperationRegion (ERA5, SystemMemory, 0xFE0B0500, 0xFF)
                    Field (ERA5, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        HWAK,   16, 
                        Offset (0xF0), 
                        IGPS,   2, 
                        IGF4,   1, 
                        Offset (0xF1), 
                        Offset (0xF2)
                    }

                    OperationRegion (ERAX, SystemMemory, 0xFE0B0400, 0xFF)
                    Field (ERAX, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x01), 
                        VDAT,   8, 
                        VSTA,   8, 
                        Offset (0x06), 
                        FANS,   8, 
                        BUSG,   1, 
                        BLEG,   1, 
                        BATF,   1, 
                        BNSM,   1, 
                        BTST,   1, 
                        BBAD,   1, 
                        AUTO,   1, 
                        FCHG,   1, 
                        Offset (0x0A), 
                        EDCC,   1, 
                            ,   1, 
                        CDMB,   1, 
                        CCSB,   1, 
                        BTSM,   1, 
                        BTCM,   1, 
                            ,   1, 
                        Offset (0x0B), 
                        SGST,   1, 
                        HDMI,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x0C), 
                        ODPO,   1, 
                        EODD,   1, 
                        ODPK,   1, 
                        CMEX,   1, 
                        CMON,   1, 
                        SODD,   1, 
                        ODFB,   1, 
                        EODS,   1, 
                        RTMP,   8, 
                        SBTS,   8, 
                        MPTS,   8, 
                        PINF,   3, 
                        SUPR,   1, 
                        GTMP,   1, 
                        QUIT,   1, 
                        LS35,   1, 
                        Offset (0x11), 
                        RMBT,   1, 
                        RSBT,   1, 
                            ,   2, 
                        Offset (0x12), 
                        FUSL,   8, 
                        FUSH,   8, 
                        FWBT,   64, 
                        Offset (0x1D), 
                        CTMD,   1, 
                        CAC1,   1, 
                        FNST,   1, 
                        YLSF,   1, 
                            ,   1, 
                        APPF,   1, 
                        HPFF,   1, 
                        ACPS,   1, 
                        SSFM,   1, 
                        BLCF,   1, 
                        PABD,   1, 
                        ES3F,   1, 
                        ES5F,   1, 
                        TBOF,   1, 
                        GPOF,   1, 
                        RS8F,   1, 
                        LSKV,   8, 
                        SPMO,   4, 
                        MSMF,   1, 
                        GSFS,   1, 
                        MACF,   1, 
                        MCUD,   1, 
                        BTFW,   8, 
                        Offset (0x23), 
                        RGBS,   1, 
                        KBLT,   1, 
                            ,   5, 
                        LCON,   1, 
                        BACT,   16, 
                        KBGS,   32, 
                        FEPL,   8, 
                        FEPH,   8, 
                        KBSS,   32, 
                        Offset (0x31), 
                        GIRT,   8, 
                        PIRT,   8, 
                        KIRT,   8, 
                        IRTI,   8, 
                        Offset (0x36), 
                        DGPU,   8, 
                        GUST,   8, 
                        GDST,   8, 
                        FCST,   8, 
                        Offset (0x3E), 
                        APTS,   4, 
                            ,   3, 
                        IPRC,   1, 
                        PRRO,   1, 
                        PRWO,   1, 
                            ,   5, 
                        SPBL,   1, 
                        PCBV,   16, 
                        PCBS,   8, 
                        ECTP,   8, 
                            ,   3, 
                        ACPD,   1, 
                        SACS,   1, 
                        EACS,   1, 
                        STCS,   1, 
                        ETCS,   1, 
                        KBGC,   32, 
                        Offset (0x4A), 
                        ESMC,   1, 
                        Offset (0x4B), 
                        EMOD,   8, 
                        BFUD,   16, 
                        Offset (0x53), 
                        DCMB,   8, 
                            ,   3, 
                        PDMD,   1, 
                        Offset (0x55), 
                            ,   1, 
                        TPMD,   1, 
                        Offset (0x56), 
                        Offset (0x57), 
                            ,   5, 
                        BTSB,   2, 
                        Offset (0x58), 
                        BTHT,   4, 
                        BTTP,   4, 
                        BTLF,   4, 
                        Offset (0x5A), 
                        GPPW,   8, 
                        PATY,   8, 
                        BACA,   8, 
                        EXSI,   8, 
                        EXSB,   8, 
                        EXND,   8, 
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMDA,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        SAD0,   8, 
                        SAD1,   8, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        FBDC,   1, 
                        FBFG,   1, 
                        Offset (0x8A), 
                        KBLO,   1, 
                        UCHE,   1, 
                        KLCH,   1, 
                            ,   1, 
                        KLFS,   1, 
                        KLOR,   1, 
                        CIBM,   1, 
                        UCER,   1, 
                        TPDV,   3, 
                        Offset (0x8C), 
                        QCHO,   1, 
                        BKLT,   1, 
                        BSFU,   1, 
                            ,   1, 
                            ,   1, 
                        OKBS,   1, 
                            ,   1, 
                        QCBX,   1, 
                        FLBT,   1, 
                            ,   2, 
                        LESR,   1, 
                            ,   3, 
                        ESLP,   1, 
                        Offset (0x8F), 
                        BMN0,   72, 
                        BDN0,   64, 
                        IBTL,   1, 
                        IBCL,   1, 
                        ISS0,   1, 
                        IRTC,   1, 
                        ISUP,   1, 
                        ISC2,   1, 
                        IWAK,   1, 
                        Offset (0xA1), 
                        FPFC,   1, 
                        VOUT,   1, 
                        TPAD,   1, 
                        HKDB,   1, 
                        NUML,   1, 
                        CALK,   1, 
                        CCPW,   1, 
                        EECP,   1, 
                        Offset (0xA3), 
                        OSTY,   3, 
                        ACMO,   1, 
                        ADPI,   2, 
                            ,   1, 
                        ADPT,   1, 
                        PMEW,   1, 
                        MODW,   1, 
                        LANW,   1, 
                        RTCW,   1, 
                        WLAW,   1, 
                        USBW,   1, 
                        KEYW,   1, 
                        TPWK,   1, 
                        CHCR,   1, 
                        ADPP,   1, 
                        LERN,   1, 
                        ACMD,   1, 
                        BOVP,   1, 
                        LEAK,   1, 
                        AIRP,   1, 
                        ACOF,   1, 
                        Offset (0xA7), 
                        Offset (0xA8), 
                        Offset (0xA9), 
                        THRT,   8, 
                        Offset (0xAB), 
                        Offset (0xAC), 
                        Offset (0xAD), 
                        Offset (0xAE), 
                        TLVL,   4, 
                            ,   2, 
                        THSW,   1, 
                        TPIN,   1, 
                        Offset (0xB0), 
                        CPUT,   8, 
                        CPUS,   8, 
                        PCHS,   8, 
                        GPUS,   8, 
                        GPUT,   8, 
                        SSDS,   8, 
                        PCHT,   8, 
                        CHIS,   8, 
                            ,   1, 
                        LSTE,   1, 
                        PMEE,   1, 
                        PWBE,   1, 
                        RNGE,   1, 
                        BTWE,   1, 
                        Offset (0xB9), 
                        LCBV,   8, 
                        DGDF,   8, 
                        WLAN,   1, 
                        BLUE,   1, 
                        WEXT,   1, 
                        BEXT,   1, 
                        KILL,   1, 
                        WLOK,   1, 
                        EN3G,   1, 
                        EX3G,   1, 
                        Offset (0xBD), 
                        CTYP,   3, 
                        CORE,   3, 
                        GATY,   2, 
                        BA1P,   1, 
                        BA2P,   1, 
                            ,   2, 
                        B1CH,   1, 
                        B2CH,   1, 
                        Offset (0xBF), 
                        PBY1,   1, 
                        PBY2,   1, 
                            ,   2, 
                        SMB1,   1, 
                        SMB2,   1, 
                        Offset (0xC0), 
                        B1TY,   1, 
                        B1MD,   1, 
                        B1LW,   1, 
                            ,   1, 
                        B1MF,   3, 
                        Offset (0xC1), 
                        B1ST,   8, 
                        B1RC,   16, 
                        B1SN,   16, 
                        B1FV,   16, 
                        B1DV,   16, 
                        B1DC,   16, 
                        B1FC,   16, 
                        B1GS,   8, 
                        Offset (0xD0), 
                        B1CR,   16, 
                        B1AC,   16, 
                        B1PC,   8, 
                        B1VL,   8, 
                        B1TM,   8, 
                        B1AT,   8, 
                        B1CC,   16, 
                        B1TC,   8, 
                        B1CI,   8, 
                        B1CU,   8, 
                        B1CA,   8, 
                        B1SM,   16, 
                        B1VC,   8, 
                        B1FA,   8, 
                        B1VA,   8, 
                        B1C1,   16, 
                        B1C2,   16, 
                        B1C3,   16, 
                        B1C4,   16, 
                        Offset (0xEC), 
                        MAXE,   16, 
                        B1CT,   16, 
                        B1EX,   1, 
                        B1FL,   1, 
                        B1EP,   1, 
                        B1FI,   1, 
                            ,   2, 
                        B1RE,   1, 
                        Offset (0xF1), 
                        B1LL,   1, 
                        B1CE,   1, 
                        B1SE,   1, 
                        B1S5,   1, 
                        B1SR,   1, 
                        B1SC,   1, 
                        Offset (0xF2), 
                        B1TO,   1, 
                        B1BC,   1, 
                        B1CF,   1, 
                        B1CS,   1, 
                        B1SG,   1, 
                        B1SU,   1, 
                        B1OV,   1, 
                        B1OT,   1, 
                        B1TT,   1, 
                        B1SA,   1, 
                        B1SS,   1, 
                            ,   1, 
                        B1SF,   1, 
                        B1WN,   1, 
                        Offset (0xF4), 
                        B1DA,   16, 
                        Offset (0xF8), 
                        B1CN,   8, 
                        ITMD,   1, 
                        Offset (0xFA), 
                        Offset (0xFB), 
                        Offset (0xFE), 
                        FA2S,   8
                    }

                    OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                    Field (ECMS, ByteAcc, Lock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Method (RECM, 1, Serialized)
                    {
                        INDX = Arg0
                        Return (DATA) /* \_SB_.PCI0.LPC0.EC0_.DATA */
                    }

                    Method (WECM, 2, Serialized)
                    {
                        INDX = Arg0
                        DATA = Arg1
                    }

                    Method (REJF, 1, NotSerialized)
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((Arg0 == One))
                            {
                                Local0 = IGPS /* \_SB_.PCI0.LPC0.EC0_.IGPS */
                            }

                            If ((Arg0 == 0x02))
                            {
                                Local0 = HPFF /* \_SB_.PCI0.LPC0.EC0_.HPFF */
                            }

                            If ((Arg0 == 0x03))
                            {
                                Local0 = APPF /* \_SB_.PCI0.LPC0.EC0_.APPF */
                            }

                            If ((Arg0 == 0x04))
                            {
                                Local0 = IGF4 /* \_SB_.PCI0.LPC0.EC0_.IGF4 */
                            }

                            Return (Local0)
                            Release (LFCM)
                        }
                    }

                    Method (WEJF, 2, NotSerialized)
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((Arg0 == One))
                            {
                                IGPS = Arg1
                            }

                            If ((Arg0 == 0x02))
                            {
                                HPFF = Arg1
                            }

                            If ((Arg0 == 0x03))
                            {
                                APPF = Arg1
                            }

                            If ((Arg0 == 0x04))
                            {
                                IGF4 = Arg1
                            }

                            Release (LFCM)
                        }
                    }

                    Method (ACTY, 0, NotSerialized)
                    {
                        If ((One == ADPT))
                        {
                            If ((One == ACMO))
                            {
                                If ((One == ACPS))
                                {
                                    Return (0x04)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Else
                            {
                                Return (0x02)
                            }
                        }
                        Else
                        {
                            Return (0x03)
                        }
                    }

                    OperationRegion (CMDE, SystemIO, 0x62, 0x0B)
                    Field (CMDE, ByteAcc, Lock, Preserve)
                    {
                        EC62,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        Offset (0x04), 
                        EC66,   8, 
                        Offset (0x06), 
                        EC68,   8, 
                        Offset (0x08), 
                        Offset (0x09), 
                        Offset (0x0A), 
                        EC6C,   8
                    }

                    Method (WIBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & 0x02) == Zero))
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (WOBF, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & One) == One))
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (WOBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == One))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & One) == One))
                            {
                                If ((Arg0 == One))
                                {
                                    Local2 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Local2 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                                }
                                Else
                                {
                                    Return (0x02)
                                }
                            }
                            Else
                            {
                                Return (Zero)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (One)
                    }

                    Method (GECF, 2, Serialized)
                    {
                        Name (LBUD, Zero)
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        LBUD = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Return (LBUD) /* \_SB_.PCI0.LPC0.EC0_.GECF.LBUD */
                    }

                    Method (LCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((WOBF (0x02) != Zero))
                            {
                                Return (One)
                            }

                            LBUF [Local1] = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.LCMD.LBUF */
                    }

                    Method (NCMD, 2, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != Zero))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (SCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (One) != Zero))
                            {
                                Return (One)
                            }
                        }

                        If ((WOBF (One) != Zero))
                        {
                            Return (One)
                        }

                        Local0 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                        Local1 = Zero
                        While (Local0)
                        {
                            If ((WOBF (One) != Zero))
                            {
                                Return (One)
                            }

                            LBUF [Local1] = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.SCMD.LBUF */
                    }

                    Method (TCMD, 2, Serialized)
                    {
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (One) != Zero))
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (LRAM, 2, Serialized)
                    {
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC6C = 0x7E
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg0
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        EC68 = Arg1
                        If ((WIBE (0x02) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (0x02) != Zero))
                        {
                            Return (One)
                        }

                        Return (EC68) /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                    }

                    Method (SRAM, 2, Serialized)
                    {
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC66 = 0x7E
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC62 = Arg0
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        EC62 = Arg1
                        If ((WIBE (One) != Zero))
                        {
                            Return (One)
                        }

                        If ((WOBF (One) != Zero))
                        {
                            Return (One)
                        }

                        Return (EC62) /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (PBIF, Package (0x0D)
                        {
                            Zero, 
                            Ones, 
                            Ones, 
                            One, 
                            Ones, 
                            Zero, 
                            Zero, 
                            0x64, 
                            Zero, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO"
                        })
                        Name (XBIF, Package (0x15)
                        {
                            One, 
                            Zero, 
                            Ones, 
                            Ones, 
                            One, 
                            Ones, 
                            Zero, 
                            Zero, 
                            Zero, 
                            0x00017318, 
                            Ones, 
                            Ones, 
                            0x03E8, 
                            0x03E8, 
                            0x64, 
                            Zero, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO", 
                            One
                        })
                        Name (PBST, Package (0x04)
                        {
                            One, 
                            0x0A90, 
                            0x1000, 
                            0x2A30
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ECAV)
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = BA1P /* \_SB_.PCI0.LPC0.EC0_.BA1P */
                                    Release (LFCM)
                                }
                            }

                            If ((Local0 & One))
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    PBIF [One] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    PBIF [0x02] = Local0
                                    PBIF [0x04] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        PBIF [0x05] = ((B1FC * 0x0A) / 0x0A)
                                        PBIF [0x07] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    PBIF [0x09] = ""
                                    PBIF [0x0A] = ""
                                    PBIF [0x0B] = ""
                                    PBIF [0x0C] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    PBIF [0x09] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    PBIF [0x0A] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == One))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH1 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH2 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    PBIF [0x0C] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (PBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBIF */
                        }

                        Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    XBIF [0x02] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    XBIF [0x03] = Local0
                                    XBIF [0x05] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        XBIF [0x06] = ((B1FC * 0x0A) / 0x0A)
                                        XBIF [0x0E] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    XBIF [0x08] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                    XBIF [0x10] = ""
                                    XBIF [0x11] = ""
                                    XBIF [0x12] = ""
                                    XBIF [0x13] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    XBIF [0x10] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    XBIF [0x11] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == One))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH1 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH2 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    XBIF [0x13] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (XBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.XBIF */
                        }

                        Name (OBST, Zero)
                        Name (OBAC, Zero)
                        Name (OBPR, Zero)
                        Name (OBRC, Zero)
                        Name (OBPV, Zero)
                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            If ((ECAV == One))
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Sleep (0x10)
                                    Local0 = B1ST /* \_SB_.PCI0.LPC0.EC0_.B1ST */
                                    Local1 = DerefOf (PBST [Zero])
                                    Switch ((Local0 & 0x07))
                                    {
                                        Case (Zero)
                                        {
                                            OBST = (Local1 & 0xF8)
                                        }
                                        Case (One)
                                        {
                                            OBST = (One | (Local1 & 0xF8))
                                        }
                                        Case (0x02)
                                        {
                                            OBST = (0x02 | (Local1 & 0xF8))
                                        }
                                        Case (0x04)
                                        {
                                            OBST = (0x04 | (Local1 & 0xF8))
                                        }

                                    }

                                    Sleep (0x10)
                                    OBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                    If ((OBST & One))
                                    {
                                        If ((OBAC != Zero))
                                        {
                                            OBAC = (~OBAC & 0x7FFF)
                                        }
                                    }
                                    ElseIf ((FBFG != One))
                                    {
                                        If ((OBAC & 0x8000))
                                        {
                                            OBAC = Zero
                                        }
                                    }

                                    Sleep (0x10)
                                    OBRC = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                    Sleep (0x10)
                                    OBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                    OBRC *= 0x0A
                                    OBPR = ((OBAC * OBPV) / 0x03E8)
                                    PBST [Zero] = OBST /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBST */
                                    PBST [One] = OBPR /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPR */
                                    PBST [0x02] = OBRC /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBRC */
                                    PBST [0x03] = OBPV /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPV */
                                    Release (LFCM)
                                }
                            }

                            Return (PBST) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBST */
                        }

                        Method (AJTP, 3, NotSerialized)
                        {
                            Local0 = Arg1
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                Local1 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                Local2 = B1ST /* \_SB_.PCI0.LPC0.EC0_.B1ST */
                                If ((Local0 >= Local1))
                                {
                                    Local0 = (Local1 - One)
                                }

                                Release (LFCM)
                            }

                            Return (Local0)
                        }

                        Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
                        {
                            If (ECAV)
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    If (Arg0)
                                    {
                                        Local0 = Zero
                                        Local1 = Arg0
                                        Divide (Local1, 0x0A, Local0, Local1)
                                        Release (LFCM)
                                        Local1 = AJTP (Zero, Local1, Local0)
                                        HT0L = (Local1 & 0xFF)
                                        HT0H = ((Local1 >> 0x08) & 0xFF)
                                    }
                                }
                            }
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Device (VPC0)
                        {
                            Name (_HID, "VPC2004")  // _HID: Hardware ID
                            Name (_UID, Zero)  // _UID: Unique ID
                            Name (_VPC, 0x7C0DF50A)
                            Name (VPCD, Zero)
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_CFG, 0, NotSerialized)
                            {
                                Return (_VPC) /* \_SB_.PCI0.LPC0.EC0_.VPC0._VPC */
                            }

                            Method (VPCR, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            VPCD = VCMD /* \_SB_.PCI0.LPC0.EC0_.VCMD */
                                        }
                                        Else
                                        {
                                            VPCD = VDAT /* \_SB_.PCI0.LPC0.EC0_.VDAT */
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (VPCD) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VPCD */
                            }

                            Method (VPCW, 2, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            VCMD = Arg1
                                        }
                                        Else
                                        {
                                            VDAT = Arg1
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (SVCR, 1, Serialized)
                            {
                            }

                            Method (HALS, 0, NotSerialized)
                            {
                                Local0 = Zero
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 |= 0x08
                                        Local0 |= 0x40
                                        If ((One == UCHE))
                                        {
                                            Local0 |= 0x80
                                        }

                                        Local0 |= 0x0200
                                        If ((Zero == HKDB))
                                        {
                                            Local0 |= 0x0400
                                        }

                                        Local0 |= Zero
                                        If (ITMD)
                                        {
                                            Local0 |= 0x2000
                                        }

                                        Local0 |= 0x4000
                                        If ((One == CIBM))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (SALS, 1, Serialized)
                            {
                                Local0 = ToInteger (Arg0)
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Local0 == 0x0A))
                                        {
                                            UCHE = One
                                            SMBB = 0x32
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0B))
                                        {
                                            UCHE = Zero
                                            SMBB = 0x33
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0E))
                                        {
                                            HKDB = Zero
                                            SMBB = 0x30
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            M010 (0x8C, One)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x0F))
                                        {
                                            HKDB = One
                                            SMBB = 0x31
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            M010 (0x8C, Zero)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x12))
                                        {
                                            CIBM = Zero
                                            SMBB = 0x34
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Local0 == 0x13))
                                        {
                                            CIBM = One
                                            SMBB = 0x35
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (GBMD, 0, NotSerialized)
                            {
                                Local0 = 0x10000000
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((One == CDMB))
                                        {
                                            Local0 |= One
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((One == QCHO))
                                            {
                                                Local0 |= 0x04
                                            }
                                        }

                                        If ((One == BBAD))
                                        {
                                            Local0 |= 0x08
                                        }

                                        If ((One == BTSM))
                                        {
                                            Local0 |= 0x20
                                        }

                                        If ((One == BLEG))
                                        {
                                            Local0 |= 0x80
                                        }

                                        If ((One == BATF))
                                        {
                                            Local0 |= 0x0100
                                        }

                                        If ((Zero == BTSM))
                                        {
                                            Local0 |= 0x0200
                                        }

                                        If ((One == BUSG))
                                        {
                                            Local0 |= 0x0800
                                        }

                                        If ((Zero == ADPI))
                                        {
                                            Local0 &= 0xFFFE7FFF
                                        }

                                        If ((One == ADPI))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        If ((0x02 == ADPI))
                                        {
                                            Local0 |= 0x00010000
                                        }

                                        If ((One == QCBX))
                                        {
                                            Local0 |= 0x00020000
                                        }

                                        Local0 |= 0x00040000
                                        If ((One == ESMC))
                                        {
                                            Local0 |= 0x00400000
                                        }

                                        Local0 |= 0x00800000
                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Name (VBST, Zero)
                            Name (VBAC, Zero)
                            Name (VBPR, Zero)
                            Name (VBRC, Zero)
                            Name (VBPV, Zero)
                            Name (VBFC, Zero)
                            Name (VBCT, Zero)
                            Method (SMTF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            VBFC = Local0
                                            Local1 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local1 *= 0x0A
                                            VBRC = Local1
                                            If ((VBFC > VBRC))
                                            {
                                                VBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                VBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                Local0 -= Local1
                                                Local1 = (VBAC * VBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                VBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (VBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Name (QBST, Zero)
                            Name (QBAC, Zero)
                            Name (QBPR, Zero)
                            Name (QBRC, Zero)
                            Name (QBPV, Zero)
                            Name (QBFC, Zero)
                            Name (QBCT, Zero)
                            Method (SMTE, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            QBRC = Local0
                                            Local1 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local1 *= 0x0A
                                            QBFC = Local1
                                            If ((QBFC > QBRC))
                                            {
                                                QBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                If (((B1AC & 0x8000) == Zero))
                                                {
                                                    QBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                }
                                                Else
                                                {
                                                    QBAC = (0xFFFF - B1AC)
                                                }

                                                Local1 = (QBAC * QBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                QBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (QBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.QBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Method (SBMC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            CDMB = Zero
                                            EDCC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == One))
                                        {
                                            CDMB = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            BTSM = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            BTSM = Zero
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((Arg0 == 0x07))
                                            {
                                                QCHO = One
                                                BTSM = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((One == QCBX))
                                        {
                                            If ((Arg0 == 0x08))
                                            {
                                                QCHO = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            ESMC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            ESMC = Zero
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (MHCF, 1, NotSerialized)
                            {
                                P80H = 0x78
                                Local0 = Arg0
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 &= 0x20
                                        Local0 >>= 0x05
                                        RMBT = Local0
                                        Sleep (0x14)
                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (MHPF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Name (BFWB, Buffer (0x25){})
                                        CreateByteField (BFWB, Zero, FB0)
                                        CreateByteField (BFWB, One, FB1)
                                        CreateByteField (BFWB, 0x02, FB2)
                                        CreateByteField (BFWB, 0x03, FB3)
                                        CreateField (BFWB, 0x20, 0x0100, FB4)
                                        CreateByteField (BFWB, 0x24, FB5)
                                        If ((SizeOf (Arg0) <= 0x25))
                                        {
                                            If ((SMPR != Zero))
                                            {
                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                            }
                                            Else
                                            {
                                                BFWB = Arg0
                                                SMAD = FB2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB2_ */
                                                SMCM = FB3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB3_ */
                                                BCNT = FB5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB5_ */
                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) == Zero))
                                                {
                                                    SMDA = FB4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB4_ */
                                                }

                                                SMST = Zero
                                                SMPR = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                BTFW = 0x80
                                                Local1 = 0x03E8
                                                While (Local1)
                                                {
                                                    Sleep (One)
                                                    Local1--
                                                    If (((SMST && 0x80) || (SMPR == Zero)))
                                                    {
                                                        Break
                                                    }
                                                }

                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) != Zero))
                                                {
                                                    FB4 = SMDA /* \_SB_.PCI0.LPC0.EC0_.SMDA */
                                                }

                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                                If (((Local1 == Zero) || !(SMST && 0x80)))
                                                {
                                                    SMPR = Zero
                                                    FB1 = 0x92
                                                }
                                            }

                                            Release (LFCM)
                                            Return (BFWB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.BFWB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (MHIF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        P80H = 0x50
                                        If ((Arg0 == Zero))
                                        {
                                            Name (RETB, Buffer (0x0A){})
                                            Name (BUF1, Buffer (0x08){})
                                            BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            CreateByteField (BUF1, Zero, FW0)
                                            CreateByteField (BUF1, One, FW1)
                                            CreateByteField (BUF1, 0x02, FW2)
                                            CreateByteField (BUF1, 0x03, FW3)
                                            CreateByteField (BUF1, 0x04, FW4)
                                            CreateByteField (BUF1, 0x05, FW5)
                                            CreateByteField (BUF1, 0x06, FW6)
                                            CreateByteField (BUF1, 0x07, FW7)
                                            RETB [Zero] = FUSL /* \_SB_.PCI0.LPC0.EC0_.FUSL */
                                            RETB [One] = FUSH /* \_SB_.PCI0.LPC0.EC0_.FUSH */
                                            RETB [0x02] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW0_ */
                                            RETB [0x03] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW1_ */
                                            RETB [0x04] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW2_ */
                                            RETB [0x05] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW3_ */
                                            RETB [0x06] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW4_ */
                                            RETB [0x07] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW5_ */
                                            RETB [0x08] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW6_ */
                                            RETB [0x09] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW7_ */
                                            Release (LFCM)
                                            Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.RETB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (GSBI, 1, NotSerialized)
                            {
                                Name (BIFB, Buffer (0x53)
                                {
                                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0050 */  0xFF, 0xFF, 0xFF                                 // ...
                                })
                                CreateWordField (BIFB, Zero, DCAP)
                                CreateWordField (BIFB, 0x02, FCAP)
                                CreateWordField (BIFB, 0x04, RCAP)
                                CreateWordField (BIFB, 0x06, ATTE)
                                CreateWordField (BIFB, 0x08, ATTF)
                                CreateWordField (BIFB, 0x0A, BTVT)
                                CreateWordField (BIFB, 0x0C, BTCT)
                                CreateWordField (BIFB, 0x0E, BTMP)
                                CreateWordField (BIFB, 0x10, MDAT)
                                CreateWordField (BIFB, 0x12, FUDT)
                                CreateWordField (BIFB, 0x14, DVLT)
                                CreateField (BIFB, 0xB0, 0x50, DCHE)
                                CreateField (BIFB, 0x0100, 0x40, DNAM)
                                CreateField (BIFB, 0x0140, 0x60, MNAM)
                                CreateField (BIFB, 0x01A0, 0xB8, BRNB)
                                CreateQWordField (BIFB, 0x4B, BFW0)
                                If (((Arg0 == Zero) || (Arg0 == One)))
                                {
                                    If (ECAV)
                                    {
                                        If ((Acquire (LFCM, 0xA000) == Zero))
                                        {
                                            Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                            Local0 *= 0x0A
                                            DCAP = Local0
                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            FCAP = Local0
                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            RCAP = Local0
                                            ATTE = SMTE (Zero)
                                            ATTF = SMTF (Zero)
                                            BTVT = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                            BTCT = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                            Local0 = B1AT /* \_SB_.PCI0.LPC0.EC0_.B1AT */
                                            Local0 += 0x0111
                                            Local0 *= 0x0A
                                            BTMP = Local0
                                            MDAT = B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                            If ((BFUD != Zero))
                                            {
                                                FUDT = BFUD /* \_SB_.PCI0.LPC0.EC0_.BFUD */
                                            }

                                            DVLT = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                            Name (DCH0, Buffer (0x0A)
                                            {
                                                 0x00                                             // .
                                            })
                                            Name (DCH1, "LION")
                                            Name (DCH2, "LiP")
                                            If ((B1TY == One))
                                            {
                                                DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH1 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }
                                            Else
                                            {
                                                DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH2 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }

                                            Name (BDNT, Buffer (0x08)
                                            {
                                                 0x00                                             // .
                                            })
                                            BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                            DNAM = BDNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BDNT */
                                            Name (BMNT, Buffer (0x0C)
                                            {
                                                 0x00                                             // .
                                            })
                                            BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                            MNAM = BMNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BMNT */
                                            Name (BRN0, Buffer (0x17)
                                            {
                                                 0x00                                             // .
                                            })
                                            BRN0 = BAR1 /* \_SB_.PCI0.LPC0.EC0_.BAR1 */
                                            BRNB = BRN0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BRN0 */
                                            BFW0 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            Release (LFCM)
                                        }
                                    }

                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                Return (Zero)
                            }

                            Method (HODD, 0, NotSerialized)
                            {
                            }

                            Method (SODD, 1, Serialized)
                            {
                            }

                            Method (GBID, 0, Serialized)
                            {
                                Name (GBUF, Package (0x04)
                                {
                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        DerefOf (GBUF [Zero]) [Zero] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                        DerefOf (GBUF [One]) [Zero] = Zero
                                        Name (BUF1, Buffer (0x08){})
                                        BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                        CreateByteField (BUF1, Zero, FW0)
                                        CreateByteField (BUF1, One, FW1)
                                        CreateByteField (BUF1, 0x02, FW2)
                                        CreateByteField (BUF1, 0x03, FW3)
                                        CreateByteField (BUF1, 0x04, FW4)
                                        CreateByteField (BUF1, 0x05, FW5)
                                        CreateByteField (BUF1, 0x06, FW6)
                                        CreateByteField (BUF1, 0x07, FW7)
                                        DerefOf (GBUF [0x02]) [Zero] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW0_ */
                                        DerefOf (GBUF [0x02]) [One] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW1_ */
                                        DerefOf (GBUF [0x02]) [0x02] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW2_ */
                                        DerefOf (GBUF [0x02]) [0x03] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW3_ */
                                        DerefOf (GBUF [0x02]) [0x04] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW4_ */
                                        DerefOf (GBUF [0x02]) [0x05] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW5_ */
                                        DerefOf (GBUF [0x02]) [0x06] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW6_ */
                                        DerefOf (GBUF [0x02]) [0x07] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW7_ */
                                        DerefOf (GBUF [0x03]) [Zero] = Zero
                                        Release (LFCM)
                                    }
                                }

                                Return (GBUF) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.GBUF */
                            }

                            Name (APDT, Zero)
                            Method (APPC, 1, Serialized)
                            {
                                APDT = Arg0
                                Return (Zero)
                            }

                            Method (DBSL, 0, NotSerialized)
                            {
                                Return (Package (0x10)
                                {
                                    0xC9, 
                                    0xAE, 
                                    0x95, 
                                    0x7E, 
                                    0x69, 
                                    0x56, 
                                    0x45, 
                                    0x36, 
                                    0x29, 
                                    0x1E, 
                                    0x15, 
                                    0x0E, 
                                    0x09, 
                                    0x06, 
                                    0x05, 
                                    Zero
                                })
                            }

                            Method (SBSL, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        Local0 = Arg0
                                        If ((Local0 == One))
                                        {
                                            LCBV = 0x0E
                                        }

                                        If ((Local0 == 0x02))
                                        {
                                            LCBV = 0x07
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (KBLC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If ((Arg0 == One))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Release (LFCM)
                                            Return ((Local0 | One))
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Local0 &= 0xFFFFFFFE
                                            Local1 = (Arg0 & 0xFFF0)
                                            Local1 >>= 0x03
                                            If ((Local0 != Local1))
                                            {
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Local3 = KBGS /* \_SB_.PCI0.LPC0.EC0_.KBGS */
                                                Release (LFCM)
                                                Return ((Local3 | One))
                                            }
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local0 = KBGC /* \_SB_.PCI0.LPC0.EC0_.KBGC */
                                            Local0 &= 0xFFFFFFFE
                                            Local1 = (Arg0 & 0xFFF0)
                                            Local1 >>= 0x03
                                            If ((Local0 != Local1))
                                            {
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Local3 = (Arg0 & Ones)
                                                KBSS = Local3
                                                Sleep (0x012C)
                                                Local3 = KBGS /* \_SB_.PCI0.LPC0.EC0_.KBGS */
                                                Release (LFCM)
                                                Return ((Local3 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BSIF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            If ((Local0 == One))
                                            {
                                                Local1 |= 0x0B80
                                                Return ((Local1 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (BTMC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == Zero))
                                    {
                                        If (((Arg0 & 0x0F) == One))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            If ((Local0 == One))
                                            {
                                                If ((TPMD == Zero))
                                                {
                                                    Local1 = Zero
                                                }
                                                ElseIf ((TPMD == One))
                                                {
                                                    If ((PDMD == One))
                                                    {
                                                        Local1 = One
                                                    }
                                                    ElseIf ((PDMD == Zero))
                                                    {
                                                        Local1 = 0x02
                                                    }
                                                }

                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x02))
                                            {
                                                Local1 = BTLF /* \_SB_.PCI0.LPC0.EC0_.BTLF */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x03))
                                            {
                                                Local1 = BTTP /* \_SB_.PCI0.LPC0.EC0_.BTTP */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x04))
                                            {
                                                Local1 = BTLF /* \_SB_.PCI0.LPC0.EC0_.BTLF */
                                                Local1 <<= 0x04
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (Local1)
                                            }
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x02))
                                        {
                                            Local0 = One
                                            Local0 <<= One
                                            Release (LFCM)
                                            Return (Local0)
                                        }
                                        ElseIf (((Arg0 & 0x0F) == 0x03))
                                        {
                                            Local0 = Arg0
                                            Local0 >>= 0x04
                                            Local1 = Zero
                                            Local2 = Zero
                                            If ((Local0 == One))
                                            {
                                                If ((TPMD == One))
                                                {
                                                    Local1 = One
                                                    If ((BTSB == 0x03))
                                                    {
                                                        Local2 = 0x03
                                                    }
                                                }

                                                Local1 <<= One
                                                Local2 <<= 0x02
                                                Local1 |= Local2
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                            ElseIf ((Local0 == 0x02))
                                            {
                                                If ((BTSB == 0x03))
                                                {
                                                    Local1 = One
                                                }
                                                Else
                                                {
                                                    Local1 = Zero
                                                }

                                                Local1 <<= One
                                                Release (LFCM)
                                                Return ((Local1 | One))
                                            }
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (STHT, 1, Serialized)
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Scope (\)
                    {
                        OperationRegion (LFCN, SystemMemory, 0x92DD2298, 0x0377)
                        Field (LFCN, AnyAcc, Lock, Preserve)
                        {
                            PS2V,   8, 
                            KBID,   8, 
                            MCSZ,   8, 
                            OKRB,   8, 
                            EDID,   1024, 
                            TPTY,   8, 
                            TPTP,   16, 
                            TPNY,   8, 
                            TPNP,   16, 
                            UMAB,   8, 
                            ENQT,   8, 
                            DYTP,   32, 
                            FCAP,   16, 
                            VSTD,   1, 
                                ,   1, 
                            VFBC,   1, 
                            VMYH,   1, 
                            VSTP,   1, 
                            VAPM,   1, 
                            VAQM,   1, 
                            VIEP,   1, 
                            VIBS,   1, 
                            VCQL,   1, 
                            VAAA,   1, 
                            VMMC,   1, 
                                ,   1, 
                                ,   1, 
                                ,   1, 
                            Offset (0x94), 
                            MYHC,   8, 
                            MMCC,   8, 
                            SMYH,   8, 
                            SMMC,   8, 
                            CICF,   4, 
                            CICM,   4, 
                            MCSK,   8, 
                            CPTY,   8, 
                            GTYP,   8, 
                            PANT,   8, 
                            PMID,   16, 
                            PPID,   16, 
                            CMSP,   16, 
                            DGID,   32, 
                            SGID,   32, 
                            NPWD,   8, 
                            Offset (0xB7), 
                            GNCS,   8, 
                            GYCK,   1704, 
                            BDDN,   3072, 
                            PBID,   8, 
                            CAMS,   8, 
                            RGBD,   8, 
                            GSYN,   8, 
                            RDOC,   8, 
                            DSMF,   8, 
                            CNFG,   8, 
                            COCC,   8, 
                            GOCC,   8, 
                            NVVD,   32, 
                            NVSI,   8, 
                            PBOS,   32, 
                            MCBC,   8, 
                            CBCS,   8, 
                            CCOM,   16, 
                            YKBT,   8, 
                            SCOC,   8, 
                            LSEP,   8, 
                            RSVD,   648
                        }

                        OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
                        Field (SMIO, ByteAcc, NoLock, Preserve)
                        {
                            SMBA,   8, 
                            SMBB,   8
                        }
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            ECAV = Arg1
                        }

                        If (((Arg0 == 0x03) && (Arg1 == One)))
                        {
                            If ((TPOS == 0x40))
                            {
                                Local0 = One
                            }

                            If ((TPOS == 0x80))
                            {
                                Local0 = 0x02
                            }

                            If ((TPOS == 0x50))
                            {
                                Local0 = 0x03
                            }

                            If ((TPOS == 0x60))
                            {
                                Local0 = 0x04
                            }

                            If ((TPOS == 0x61))
                            {
                                Local0 = 0x05
                            }

                            If ((TPOS == 0x70))
                            {
                                Local0 = 0x06
                            }

                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                OSTY = Local0
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((SPMO == 0x02))
                                {
                                    If ((ADPT == Zero))
                                    {
                                        FNQS (0x07)
                                    }
                                    Else
                                    {
                                        FNQS (0x06)
                                    }

                                    LTGP = Zero
                                    DTGP = Zero
                                    If ((ACTY () == One))
                                    {
                                        EATL = One
                                    }
                                    Else
                                    {
                                        EATL = Zero
                                    }
                                }
                                ElseIf ((SPMO == One))
                                {
                                    FNQS (One)
                                    LTGP = One
                                    DTGP = One
                                    EATL = Zero
                                }
                                Else
                                {
                                    If ((ADPT == Zero))
                                    {
                                        FNQS (0x05)
                                    }
                                    Else
                                    {
                                        FNQS (0x03)
                                    }

                                    LTGP = Zero
                                    DTGP = Zero
                                    EATL = Zero
                                }

                                Release (LFCM)
                            }
                        }

                        Notify (NPCF, 0xC0) // Hardware-Specific
                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                    }

                    Method (CMFC, 0, Serialized)
                    {
                        Return (EDID) /* \EDID */
                    }

                    Method (LFCI, 2, Serialized)
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (One)
                            {
                                Return (OKRB) /* \OKRB */
                            }
                            Case (0x02)
                            {
                                Local0 = RECM (0x78)
                                P80H = Local0
                                Return (Local0)
                            }

                        }
                    }

                    Scope (\)
                    {
                        Name (LTGP, Zero)
                        Name (FMOD, Zero)
                        Name (DBFS, Zero)
                        Name (DTGP, Zero)
                        Name (LCK0, Zero)
                        Name (EATL, Zero)
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (IGDS)
                        {
                            P80H = 0x11
                            Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
                        }
                        Else
                        {
                            P80H = 0x11
                            Notify (^^^GPP0.PEGP.EDP0, 0x87) // Device-Specific
                        }

                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (IGDS)
                        {
                            P80H = 0x12
                            Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
                        }
                        Else
                        {
                            P80H = 0x12
                            Notify (^^^GPP0.PEGP.EDP0, 0x86) // Device-Specific
                        }

                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (LIDO, 0, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (LIDC, 0, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                LIDS = LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (LFCM)
                            }
                        }

                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x15
                        LIDO ()
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x16
                        LIDC ()
                    }

                    Scope (\)
                    {
                        Name (GPSF, Zero)
                        Name (DCPS, Zero)
                    }

                    Name (DGST, 0xD1)
                    Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x1E
                        If (((GATY == 0x02) || (MSMF == One)))
                        {
                            P80H = 0x91
                            If ((DGDF <= 0x04))
                            {
                                P80H = 0x92
                                Local0 = 0xD1
                                Local0 += DGDF /* \_SB_.PCI0.LPC0.EC0_.DGDF */
                                If ((Local0 == 0xD1))
                                {
                                    DCPS = Zero
                                    P80H = 0xD1
                                    If ((DGST != Local0))
                                    {
                                        DGST = Local0
                                        Notify (^^^GPP0.PEGP, Local0)
                                    }

                                    Sleep (0x0A)
                                    If ((GPSF == Zero))
                                    {
                                        GPSF = One
                                        Notify (NPCF, 0xC0) // Hardware-Specific
                                    }
                                }
                                Else
                                {
                                    DCPS = One
                                    P80H = 0xD2
                                    If ((DGST != Local0))
                                    {
                                        DGST = Local0
                                        Notify (^^^GPP0.PEGP, Local0)
                                    }

                                    Sleep (0x0A)
                                    If ((GPSF == One))
                                    {
                                        GPSF = Zero
                                        Notify (NPCF, 0xC0) // Hardware-Specific
                                    }
                                }
                            }
                        }
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x25
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (ACIN, 0, NotSerialized)
                    {
                        Sleep (0x012C)
                        If ((ACTY () == One))
                        {
                            LCK0 = Zero
                        }

                        Notify (GZFD, 0xE5) // Hardware-Specific
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((((SPMO == Zero) && (CAC1 == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = One
                                    CTMD = One
                                    If ((DBFS == One))
                                    {
                                        FNQS (0x02)
                                    }
                                    Else
                                    {
                                        FNQS (One)
                                    }

                                    LTGP = One
                                    DTGP = One
                                    CAC1 = Zero
                                    Sleep (0x05)
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }

                                If ((((SPMO == Zero) && (PABD == One)) && (ACTY () == One)))
                                {
                                    SSFM = One
                                    SPMO = One
                                    If ((DBFS == One))
                                    {
                                        FNQS (0x02)
                                    }
                                    Else
                                    {
                                        FNQS (One)
                                    }

                                    LTGP = One
                                    DTGP = One
                                    PABD = Zero
                                    Sleep (0x05)
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }
                                ElseIf (((SPMO == Zero) && (PABD == Zero)))
                                {
                                    If ((DBFS == One))
                                    {
                                        FNQS (0x04)
                                    }
                                    Else
                                    {
                                        FNQS (0x03)
                                    }
                                }
                                ElseIf ((SPMO == 0x02))
                                {
                                    FNQS (0x06)
                                    EATL = One
                                }

                                Release (LFCM)
                            }
                        }

                        PWRS = One
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                        {
                            ^^^^GZFD.HTPL ()
                        }

                        Notify (GZFD, 0xE7) // Hardware-Specific
                    }

                    Method (ACOU, 0, NotSerialized)
                    {
                        Sleep (0x012C)
                        Notify (GZFD, 0xE5) // Hardware-Specific
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If (((CTMD == One) && ((ACTY () == 0x02) || (ACTY () == 0x03))))
                                {
                                    SSFM = One
                                    SPMO = Zero
                                    CTMD = Zero
                                    FNQS (0x05)
                                    LTGP = Zero
                                    DTGP = Zero
                                    CAC1 = One
                                    Sleep (0x05)
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }

                                If (((SPMO == One) && ((ACTY () == 0x02) || (ACTY () == 0x03))))
                                {
                                    SSFM = One
                                    SPMO = Zero
                                    FNQS (0x05)
                                    LTGP = Zero
                                    DTGP = Zero
                                    PABD = One
                                    Sleep (0x05)
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }
                                ElseIf ((SPMO == Zero))
                                {
                                    FNQS (0x05)
                                }
                                ElseIf ((SPMO == 0x02))
                                {
                                    FNQS (0x07)
                                    EATL = Zero
                                }

                                Release (LFCM)
                            }
                        }

                        PWRS = Zero
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                        {
                            ^^^^GZFD.HTPL ()
                        }

                        Notify (GZFD, 0xE7) // Hardware-Specific
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x37
                        ACIN ()
                    }

                    Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x38
                        ACOU ()
                    }

                    Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Sleep (0x05)
                        If ((CNFG == One))
                        {
                            Notify (GZFD, 0xE9) // Hardware-Specific
                        }
                    }

                    Name (XX13, Buffer (0x07){})
                    CreateWordField (XX13, Zero, SSZ3)
                    CreateByteField (XX13, 0x02, SMN3)
                    CreateDWordField (XX13, 0x03, SMD3)
                    SSZ3 = 0x07
                    Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x30
                        Sleep (0x05)
                        DBFS = One
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((CTMD == One))
                            {
                                Local0 = ^^^^GZFD.CPP4 /* \_SB_.GZFD.CPP4 */
                                Local0 *= 0x03E8
                                SMN3 = 0x05
                                SMD3 = Local0
                                ALIB (0x0C, XX13)
                            }
                            ElseIf ((SPMO == One))
                            {
                                FNQS (0x02)
                            }
                            ElseIf ((SPMO == Zero))
                            {
                                If ((INSM == Zero))
                                {
                                    FNQS (0x04)
                                }
                            }

                            Release (LFCM)
                        }
                    }

                    Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x31
                        Sleep (0x05)
                        DBFS = Zero
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            If ((CTMD == One))
                            {
                                Local0 = ^^^^GZFD.CPP2 /* \_SB_.GZFD.CPP2 */
                                Local0 *= 0x03E8
                                SMN3 = 0x05
                                SMD3 = Local0
                                ALIB (0x0C, XX13)
                            }
                            ElseIf ((SPMO == One))
                            {
                                FNQS (One)
                            }
                            ElseIf ((SPMO == Zero))
                            {
                                If ((INSM == Zero))
                                {
                                    FNQS (0x03)
                                }
                            }

                            Release (LFCM)
                        }
                    }

                    Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x32
                        Notify (PWRB, 0x80) // Status Change
                    }

                    Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x3E
                    }

                    Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x3F
                    }

                    Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x44
                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q58, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x70
                        Sleep (0x05)
                    }

                    Method (_Q13, 0, Serialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x13
                        Sleep (0x05)
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If (((MCUD == Zero) && (MACF == Zero)))
                                {
                                    Notify (GZFD, 0xE3) // Hardware-Specific
                                }
                                ElseIf ((MCUD == One))
                                {
                                    MCUD = Zero
                                }

                                If ((MACF == Zero))
                                {
                                    FMOD = SPMO /* \_SB_.PCI0.LPC0.EC0_.SPMO */
                                }

                                Release (LFCM)
                            }

                            Sleep (0x01F4)
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((SPMO == 0x02))
                                {
                                    If ((ADPT == Zero))
                                    {
                                        FNQS (0x07)
                                    }
                                    Else
                                    {
                                        FNQS (0x06)
                                    }

                                    LTGP = Zero
                                    DTGP = Zero
                                    If ((ACTY () == One))
                                    {
                                        EATL = One
                                    }
                                    Else
                                    {
                                        EATL = Zero
                                    }
                                }
                                ElseIf ((SPMO == One))
                                {
                                    If ((DBFS == One))
                                    {
                                        FNQS (0x02)
                                    }
                                    Else
                                    {
                                        FNQS (One)
                                    }

                                    LTGP = One
                                    DTGP = One
                                    EATL = Zero
                                }
                                Else
                                {
                                    If ((ADPT == Zero))
                                    {
                                        FNQS (0x05)
                                    }
                                    ElseIf ((DBFS == One))
                                    {
                                        FNQS (0x04)
                                    }
                                    Else
                                    {
                                        FNQS (0x03)
                                    }

                                    LTGP = Zero
                                    DTGP = Zero
                                    EATL = Zero
                                }

                                Release (LFCM)
                            }
                        }

                        INSM = Zero
                        PABD = Zero
                        CAC1 = Zero
                        Notify (GZFD, 0xE7) // Hardware-Specific
                        Notify (^^^GPP0.PEGP, 0xC0) // Hardware-Specific
                        Sleep (0x05)
                        Notify (NPCF, 0xC0) // Hardware-Specific
                    }

                    Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x74
                        Sleep (0x05)
                        Local0 = Zero
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            Local0 = ToInteger (DCMB)
                            If (((Local0 >= Zero) && (Local0 < 0x07)))
                            {
                                Local0 += 0x07
                                FNQS (Local0)
                            }

                            Release (LFCM)
                        }
                    }

                    Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x86
                        Sleep (0x05)
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x87
                        Sleep (0x05)
                    }

                    Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x62
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = 0x03
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x63
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = One
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x66
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = 0x02
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x67
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (GZFD, 0xD0) // Hardware-Specific
                                Release (LFCM)
                            }
                        }
                    }

                    Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x68
                        Notify (GZFD, 0xD1) // Hardware-Specific
                    }

                    Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x69
                        Notify (GZFD, 0xE0) // Hardware-Specific
                    }

                    Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6A
                        Notify (GZFD, 0xE1) // Hardware-Specific
                    }

                    Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x6B
                        Notify (GZFD, 0xE2) // Hardware-Specific
                    }

                    Method (_QDE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDE
                        Notify (GZFD, 0xE6) // Hardware-Specific
                        Notify (GZFD, 0xE8) // Hardware-Specific
                    }

                    Method (_QDD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDD
                        If ((NUML == One))
                        {
                            M010 (0x69, One)
                        }
                        Else
                        {
                            M010 (0x69, Zero)
                        }

                        If ((CALK == One))
                        {
                            M010 (0x9B, One)
                        }
                        Else
                        {
                            M010 (0x9B, Zero)
                        }
                    }

                    Method (_QD1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD1
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD1) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD2
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD2) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD3
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD3) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD4
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD4) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_QD5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xD5
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                GUST = Zero
                                Notify (^^^GPP0.PEGP, 0xD5) // Hardware-Specific
                                Release (LFCM)
                            }
                        }

                        Sleep (0x0A)
                    }

                    Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SMBA = 0xCE
                    }

                    Scope (\)
                    {
                        Name (LSKD, Zero)
                    }

                    Method (_QDF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDF
                        If ((LSKV != Zero))
                        {
                            If ((LSKV < 0x27))
                            {
                                LSKD = LSKV /* \_SB_.PCI0.LPC0.EC0_.LSKV */
                            }

                            If ((LSKD == 0x04))
                            {
                                If ((HKDB == Zero))
                                {
                                    M010 (0x8C, One)
                                }
                                Else
                                {
                                    M010 (0x8C, Zero)
                                }
                            }

                            LSKV = Zero
                        }

                        Notify (WMIU, 0xD0) // Hardware-Specific
                        If (((LSKD == 0x13) || (LSKD == 0x14)))
                        {
                            Notify (GZFD, 0xE8) // Hardware-Specific
                        }
                    }
                }

                Scope (\_SB)
                {
                    Device (ADP0)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (XX00, Buffer (0x03){})
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (ACDC, 0xFF)
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local0 = One
                                    Local0 = ^^PCI0.LPC0.EC0.ADPT /* \_SB_.PCI0.LPC0.EC0_.ADPT */
                                    CreateWordField (XX00, Zero, SSZE)
                                    CreateByteField (XX00, 0x02, ACST)
                                    SSZE = 0x03
                                    If ((Local0 != ACDC))
                                    {
                                        If (Local0)
                                        {
                                            P80H = 0xECAC
                                            If (CondRefOf (AFN4))
                                            {
                                                AFN4 (One)
                                            }

                                            ACST = Zero
                                        }
                                        Else
                                        {
                                            P80H = 0xECDC
                                            If (CondRefOf (AFN4))
                                            {
                                                AFN4 (0x02)
                                            }

                                            ACST = One
                                        }

                                        ALIB (One, XX00)
                                        ACDC = Local0
                                    }

                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                    Return (Local0)
                                }
                            }
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (Package (0x01)
                            {
                                _SB
                            })
                        }
                    }

                    Device (LID0)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Name (_DEP, Package (0x01)  // _DEP: Dependencies
                        {
                            ^PCI0.LPC0.EC0
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Local0 = Zero
                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                            {
                                Local0 = ^^PCI0.LPC0.EC0.LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (^^PCI0.LPC0.EC0.LFCM)
                            }

                            Return (Local0)
                        }
                    }

                    Device (PWRB)
                    {
                        Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (WMI4)
                    {
                        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Mutex (MWMI, 0x00)
                        Name (_WDG, Buffer (0x28)
                        {
                            /* 0000 */  0x76, 0x37, 0xA0, 0xC3, 0xAC, 0x51, 0xAA, 0x49,  // v7...Q.I
                            /* 0008 */  0xAD, 0x0F, 0xF2, 0xF7, 0xD6, 0x2C, 0x3F, 0x3C,  // .....,?<
                            /* 0010 */  0x41, 0x44, 0x03, 0x05, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                            /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                            /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
                        })
                        Name (ITEM, Package (0x03)
                        {
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                "BAT0 BatMaker"
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                One, 
                                "BAT0 HwId "
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x02, 
                                "BAT0 MfgDate "
                            }
                        })
                        Method (WQAD, 1, NotSerialized)
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local0 = PSAG (Arg0)
                                    Local1 = DerefOf (ITEM [Local0])
                                    Local2 = DerefOf (Local1 [Zero])
                                    Local3 = DerefOf (Local1 [One])
                                    Local4 = DerefOf (Local1 [0x02])
                                    Local5 = BATD (Local2, Local3)
                                    Concatenate (Local4, ",", Local6)
                                    Concatenate (Local6, Local5, Local7)
                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                }
                            }

                            Return (Local7)
                        }

                        Method (PSAG, 1, NotSerialized)
                        {
                            Return (Arg0)
                        }

                        Method (BATD, 2, NotSerialized)
                        {
                            Name (STRB, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            Name (BUFR, Buffer (0x08){})
                            BUFR = ^^PCI0.LPC0.EC0.FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                            CreateWordField (BUFR, Zero, MID0)
                            CreateWordField (BUFR, 0x02, HID0)
                            CreateWordField (BUFR, 0x04, FIR0)
                            CreateWordField (BUFR, 0x06, DAT0)
                            If ((Arg0 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    STRB = ToHexString (MID0)
                                }

                                If ((Arg1 == One))
                                {
                                    STRB = ToHexString (HID0)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    Local0 = ^^PCI0.LPC0.EC0.B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                    Name (DATB, Buffer (0x09)
                                    {
                                        "00000000"
                                    })
                                    Local3 = 0x07
                                    Local1 = (Local0 & 0x1F)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x05
                                    Local1 = ((Local0 & 0x01E0) >> 0x05)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x03
                                    Local1 = (((Local0 & 0xFE00) >> 0x09) + 0x07BC)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    STRB = DATB /* \_SB_.WMI4.BATD.DATB */
                                }
                            }

                            Return (ToString (STRB, Ones))
                        }

                        Name (WQBD, Buffer (0x0275)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x65, 0x02, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00,  // e.......
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0x18, 0xD1, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                            /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                            /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                            /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                            /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                            /* 0048 */  0x31, 0xD0, 0x18, 0xA8, 0x50, 0x08, 0x89, 0x00,  // 1...P...
                            /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                            /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                            /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                            /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0x9A,  // ....Bh..
                            /* 0070 */  0x9F, 0x04, 0x81, 0x6A, 0x5B, 0x80, 0x45, 0x01,  // ...j[.E.
                            /* 0078 */  0xB2, 0x41, 0x08, 0xA0, 0xC7, 0xC1, 0x44, 0x0E,  // .A....D.
                            /* 0080 */  0x02, 0x25, 0x66, 0x10, 0x28, 0x9D, 0x73, 0x90,  // .%f.(.s.
                            /* 0088 */  0x4D, 0x60, 0xE1, 0x9F, 0x4C, 0x94, 0xF3, 0x88,  // M`..L...
                            /* 0090 */  0x92, 0xE0, 0xA8, 0x0E, 0x22, 0x42, 0xF0, 0x72,  // ...."B.r
                            /* 0098 */  0x05, 0x48, 0x9E, 0x80, 0x34, 0x4F, 0x4C, 0xD6,  // .H..4OL.
                            /* 00A0 */  0x07, 0xA1, 0x21, 0xB0, 0x11, 0xF0, 0x88, 0x12,  // ..!.....
                            /* 00A8 */  0x40, 0x58, 0xA0, 0x75, 0x2A, 0x14, 0x0C, 0xCA,  // @X.u*...
                            /* 00B0 */  0x03, 0x88, 0xE4, 0x8C, 0x15, 0x05, 0x6C, 0xAF,  // ......l.
                            /* 00B8 */  0x13, 0x91, 0xC9, 0x81, 0x52, 0x49, 0x70, 0xA8,  // ....RIp.
                            /* 00C0 */  0x61, 0x5A, 0xE2, 0xEC, 0x34, 0xB2, 0x13, 0x39,  // aZ..4..9
                            /* 00C8 */  0xB6, 0xA6, 0x87, 0x2C, 0x48, 0x26, 0x6D, 0x28,  // ...,H&m(
                            /* 00D0 */  0xA8, 0xB1, 0x7B, 0x5A, 0x27, 0xE5, 0x99, 0x46,  // ..{Z'..F
                            /* 00D8 */  0x3C, 0x28, 0xC3, 0x24, 0xF0, 0x28, 0x18, 0x1A,  // <(.$.(..
                            /* 00E0 */  0x27, 0x28, 0x0B, 0x42, 0x0E, 0x06, 0x8A, 0x02,  // '(.B....
                            /* 00E8 */  0x3C, 0x09, 0xCF, 0xB1, 0x78, 0x01, 0xC2, 0x67,  // <...x..g
                            /* 00F0 */  0x4C, 0xA6, 0x1D, 0x23, 0x81, 0xCF, 0x04, 0x1E,  // L..#....
                            /* 00F8 */  0xE6, 0x31, 0x63, 0x47, 0x14, 0x2E, 0xE0, 0xF9,  // .1cG....
                            /* 0100 */  0x1C, 0x43, 0xE4, 0xB8, 0x87, 0x1A, 0xE3, 0x28,  // .C.....(
                            /* 0108 */  0x22, 0x3F, 0x08, 0x60, 0x05, 0x1D, 0x04, 0x90,  // "?.`....
                            /* 0110 */  0x38, 0xFF, 0xFF, 0xE3, 0x89, 0x76, 0xDA, 0xC1,  // 8....v..
                            /* 0118 */  0x42, 0xC7, 0x39, 0xBF, 0xD0, 0x18, 0xD1, 0xE3,  // B.9.....
                            /* 0120 */  0x40, 0xC9, 0x80, 0x90, 0x47, 0x01, 0x56, 0x61,  // @...G.Va
                            /* 0128 */  0x35, 0x91, 0x04, 0xBE, 0x07, 0x74, 0x76, 0x12,  // 5....tv.
                            /* 0130 */  0xD0, 0xA5, 0x21, 0x46, 0x6F, 0x08, 0xD2, 0x26,  // ..!Fo..&
                            /* 0138 */  0xC0, 0x96, 0x00, 0x6B, 0x02, 0x8C, 0xDD, 0x06,  // ...k....
                            /* 0140 */  0x08, 0xCA, 0xD1, 0x36, 0x87, 0x22, 0x84, 0x28,  // ...6.".(
                            /* 0148 */  0x21, 0xE2, 0x86, 0xAC, 0x11, 0x45, 0x10, 0x95,  // !....E..
                            /* 0150 */  0x41, 0x08, 0x35, 0x50, 0xD8, 0x28, 0xF1, 0x8D,  // A.5P.(..
                            /* 0158 */  0x13, 0x22, 0x48, 0x02, 0x8F, 0x1C, 0x77, 0x04,  // ."H...w.
                            /* 0160 */  0xF0, 0xD8, 0x0E, 0xE8, 0x04, 0x4F, 0xE9, 0x71,  // .....O.q
                            /* 0168 */  0xC1, 0x04, 0x9E, 0xF7, 0xC1, 0x1D, 0xEA, 0x21,  // .......!
                            /* 0170 */  0x1C, 0x70, 0xD4, 0x18, 0xC7, 0xF1, 0x4C, 0x40,  // .p....L@
                            /* 0178 */  0x16, 0x2E, 0x0D, 0x20, 0x8A, 0x04, 0x8F, 0x3A,  // ... ...:
                            /* 0180 */  0x32, 0xF8, 0x70, 0xE0, 0x41, 0x7A, 0x9E, 0x9E,  // 2.p.Az..
                            /* 0188 */  0x40, 0x90, 0x43, 0x38, 0x82, 0xC7, 0x86, 0xA7,  // @.C8....
                            /* 0190 */  0x02, 0x8F, 0x81, 0x5D, 0x17, 0x7C, 0x0E, 0xF0,  // ...].|..
                            /* 0198 */  0x31, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3A,  // 1...P.~:
                            /* 01A0 */  0x60, 0x93, 0x0E, 0x87, 0x19, 0xAE, 0x87, 0x1D,  // `.......
                            /* 01A8 */  0xEE, 0x04, 0x1E, 0x0E, 0x1E, 0x33, 0xF8, 0x91,  // .....3..
                            /* 01B0 */  0xC3, 0x83, 0xC3, 0xCD, 0xF0, 0x64, 0x8E, 0xAC,  // .....d..
                            /* 01B8 */  0x54, 0x01, 0x66, 0x4F, 0x08, 0x3A, 0x4D, 0xF8,  // T.fO.:M.
                            /* 01C0 */  0xCC, 0xC1, 0x6E, 0x00, 0xE7, 0xD3, 0x33, 0x24,  // ..n...3$
                            /* 01C8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x69,  // .?.....i
                            /* 01D0 */  0xBF, 0x7A, 0x18, 0xF2, 0xA1, 0xE0, 0xB0, 0x98,  // .z......
                            /* 01D8 */  0xD8, 0xB3, 0x07, 0x1D, 0x0F, 0xF8, 0xAF, 0x24,  // .......$
                            /* 01E0 */  0x0F, 0x1B, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0x91,  // .....k..
                            /* 01E8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x38, 0x0E,  // ......8.
                            /* 01F0 */  0xE3, 0x34, 0x7C, 0x09, 0xF1, 0x39, 0xE0, 0xFF,  // .4|..9..
                            /* 01F8 */  0x1F, 0x24, 0xC6, 0x31, 0x79, 0x70, 0x3C, 0xD8,  // .$.1yp<.
                            /* 0200 */  0xC8, 0xE9, 0x51, 0xC5, 0x47, 0x0A, 0x7E, 0xBE,  // ..Q.G.~.
                            /* 0208 */  0xF0, 0x91, 0x82, 0x5D, 0x10, 0x9E, 0x1C, 0x0C,  // ...]....
                            /* 0210 */  0x71, 0x38, 0x67, 0xE5, 0x13, 0x85, 0x0F, 0x2A,  // q8g....*
                            /* 0218 */  0xB8, 0x13, 0x05, 0x5C, 0x85, 0xE8, 0xE4, 0x36,  // ...\...6
                            /* 0220 */  0x61, 0xB4, 0x67, 0x81, 0xC7, 0x09, 0x98, 0x07,  // a.g.....
                            /* 0228 */  0x01, 0xF0, 0x8D, 0xDF, 0x07, 0x19, 0xB0, 0x4D,  // .......M
                            /* 0230 */  0x09, 0x3B, 0x24, 0x78, 0x47, 0x19, 0xE0, 0x71,  // .;$xG..q
                            /* 0238 */  0x32, 0xC1, 0x1D, 0x27, 0x3C, 0x04, 0x3E, 0x80,  // 2..'<.>.
                            /* 0240 */  0x87, 0x90, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0xCF,  // ......!.
                            /* 0248 */  0x3C, 0x60, 0x1B, 0x06, 0x57, 0x68, 0xD3, 0xA7,  // <`..Wh..
                            /* 0250 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                            /* 0258 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xFB, 0xE1,  // .V.J....
                            /* 0260 */  0x58, 0xDC, 0xBB, 0x40, 0x07, 0x03, 0x0B, 0x7B,  // X..@...{
                            /* 0268 */  0x21, 0xE8, 0x88, 0xE0, 0x58, 0x20, 0x34, 0x08,  // !...X 4.
                            /* 0270 */  0x9D, 0x40, 0xFC, 0xFF, 0x07                     // .@...
                        })
                    }

                    Name (FNQ0, Package (0x12)
                    {
                        Package (0x08)
                        {
                            0x05, 
                            0x07, 
                            0x06, 
                            One, 
                            0x08, 
                            0x03, 
                            0x0C, 
                            0x0B
                        }, 

                        Package (0x08)
                        {
                            0x00014C08, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0x00015F90, 
                            0x00015F90, 
                            0xC8, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x0001FBD0, 
                            0xD6D8
                        }, 

                        Package (0x08)
                        {
                            0x4E20, 
                            0x88B8, 
                            0x9C40, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x2710, 
                            0x2710, 
                            0x2710, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0x61A8, 
                            0x61A8, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0x9C40, 
                            0x9C40, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xA028, 
                            0xC738, 
                            0xC738, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xD2F0, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0x9C40, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xD6D8, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xEA60, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }
                    })
                    Name (FNQ1, Package (0x12)
                    {
                        Package (0x08)
                        {
                            0x05, 
                            0x07, 
                            0x06, 
                            One, 
                            0x08, 
                            0x03, 
                            0x0C, 
                            0x0B
                        }, 

                        Package (0x08)
                        {
                            0x00013880, 
                            0x000156F8, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00011170
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0x000156F8, 
                            0x00015F90, 
                            0xC8, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x0001FBD0, 
                            0xD6D8
                        }, 

                        Package (0x08)
                        {
                            0x4E20, 
                            0x88B8, 
                            0x9C40, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x2710, 
                            0x2710, 
                            0x2710, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0x61A8, 
                            0x61A8, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0x9C40, 
                            0x9C40, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xA028, 
                            0xC738, 
                            0xC738, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xD2F0, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x7530, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0x9C40, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xD6D8, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xEA60, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }
                    })
                    Name (FNQ4, Package (0x12)
                    {
                        Package (0x08)
                        {
                            0x05, 
                            0x07, 
                            0x06, 
                            One, 
                            0x08, 
                            0x03, 
                            0x0C, 
                            0x0B
                        }, 

                        Package (0x08)
                        {
                            0x00013880, 
                            0x000156F8, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0x000156F8, 
                            0x00015F90, 
                            0xC8, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x0001FBD0, 
                            0xD6D8
                        }, 

                        Package (0x08)
                        {
                            0x4E20, 
                            0x88B8, 
                            0x9C40, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x2710, 
                            0x2710, 
                            0x2710, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0x61A8, 
                            0x61A8, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0x9C40, 
                            0x9C40, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xA028, 
                            0xC738, 
                            0xC738, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xD2F0, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x7530, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0x9C40, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xD6D8, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xEA60, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }
                    })
                    Name (FNQ2, Package (0x12)
                    {
                        Package (0x08)
                        {
                            0x05, 
                            0x07, 
                            0x06, 
                            One, 
                            0x08, 
                            0x03, 
                            0x0C, 
                            0x0B
                        }, 

                        Package (0x08)
                        {
                            0x00013880, 
                            0x000156F8, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0x000156F8, 
                            0x00015F90, 
                            0xC8, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x0001FBD0, 
                            0xD6D8
                        }, 

                        Package (0x08)
                        {
                            0x4E20, 
                            0x88B8, 
                            0x9C40, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x2710, 
                            0x2710, 
                            0x2710, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0x61A8, 
                            0x61A8, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0x9C40, 
                            0x9C40, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xA028, 
                            0xC738, 
                            0xC738, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xD2F0, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x7530, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0x9C40, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xD6D8, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xEA60, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }
                    })
                    Name (FNQ3, Package (0x12)
                    {
                        Package (0x08)
                        {
                            0x05, 
                            0x07, 
                            0x06, 
                            One, 
                            0x08, 
                            0x03, 
                            0x0C, 
                            0x0B
                        }, 

                        Package (0x08)
                        {
                            0x00014C08, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00011170
                        }, 

                        Package (0x08)
                        {
                            0xD6D8, 
                            0x00015F90, 
                            0x00015F90, 
                            0xC8, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0xA028, 
                            0xC738, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x0001FBD0, 
                            0xD6D8
                        }, 

                        Package (0x08)
                        {
                            0x4E20, 
                            0x88B8, 
                            0x9C40, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x2710, 
                            0x2710, 
                            0x2710, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00015F90, 
                            0x9C40
                        }, 

                        Package (0x08)
                        {
                            0x61A8, 
                            0x61A8, 
                            0x61A8, 
                            0x32, 
                            0x05, 
                            0x5A, 
                            0x00019A28, 
                            0xC350
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0x9C40, 
                            0x9C40, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xA028, 
                            0xC738, 
                            0xC738, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xD2F0, 
                            0x0113, 
                            0x0A, 
                            0x64, 
                            0x000222E0, 
                            0xFDE8
                        }, 

                        Package (0x08)
                        {
                            0x88B8, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0x9C40, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xC350, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xD6D8, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }, 

                        Package (0x08)
                        {
                            0xEA60, 
                            0x00015F90, 
                            0x00015F90, 
                            0x01F4, 
                            0x1E, 
                            0x64, 
                            0x000222E0, 
                            0x00013880
                        }
                    })
                    Name (FNQ6, Package (0x08)
                    {
                        Package (0x0D)
                        {
                            0x2E, 
                            0x07, 
                            0x06, 
                            0x08, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x25, 
                            0x26, 
                            0x27, 
                            0x28, 
                            0x2C, 
                            0x03
                        }, 

                        Package (0x0D)
                        {
                            0xFDE8, 
                            0x000156F8, 
                            0x000156F8, 
                            0x1E, 
                            0x199A, 
                            0x2D00, 
                            0x21, 
                            0x2666, 
                            0xFE8A, 
                            0xFEEC, 
                            0x03C4, 
                            0x4FAD, 
                            0x64
                        }, 

                        Package (0x0D)
                        {
                            0xAFC8, 
                            0x000156F8, 
                            0x000156F8, 
                            0x1E, 
                            0x199A, 
                            0x2800, 
                            0x21, 
                            0x2666, 
                            0xFE88, 
                            0x040E, 
                            0x0339, 
                            0x000FBE25, 
                            0x64
                        }, 

                        Package (0x0D)
                        {
                            0xAFC8, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0A, 
                            0x199A, 
                            0x2D00, 
                            0x21, 
                            0x2666, 
                            0xFF45, 
                            0x0306, 
                            0x029A, 
                            0x000FD500, 
                            0x64
                        }, 

                        Package (0x0D)
                        {
                            0x88B8, 
                            0xD2F0, 
                            0xFDE8, 
                            0x0A, 
                            0x199A, 
                            0x2800, 
                            0x21, 
                            0x2666, 
                            0xFE61, 
                            0x01D2, 
                            0x037C, 
                            0x3E, 
                            0x64
                        }, 

                        Package (0x0D)
                        {
                            0x61A8, 
                            0xAFC8, 
                            0xBB80, 
                            0x05, 
                            0x199A, 
                            0x2800, 
                            0x21, 
                            0x2666, 
                            0xFE61, 
                            0x01D2, 
                            0x037C, 
                            0x3E, 
                            0x60
                        }, 

                        Package (0x0D)
                        {
                            0x61A8, 
                            0x927C, 
                            0xBB80, 
                            0x05, 
                            0x199A, 
                            0x1F00, 
                            0x21, 
                            0x2666, 
                            0xB9, 
                            0x05CF, 
                            0x77, 
                            0x000F88BB, 
                            0x60
                        }, 

                        Package (0x0D)
                        {
                            0x4E20, 
                            0x88B8, 
                            0x9C40, 
                            0x05, 
                            0x199A, 
                            0x1F00, 
                            0x21, 
                            0x2666, 
                            0xB9, 
                            0x05CF, 
                            0x77, 
                            0x000F88BB, 
                            0x60
                        }
                    })
                    Method (FTSW, 0, NotSerialized)
                    {
                        If ((MCSK == One))
                        {
                            If (((GTYP == 0x05) || (GTYP == 0x06)))
                            {
                                Local0 = FNQ2 /* \_SB_.FNQ2 */
                            }
                            ElseIf ((GTYP == One))
                            {
                                Local0 = FNQ4 /* \_SB_.FNQ4 */
                            }
                            Else
                            {
                                Local0 = FNQ1 /* \_SB_.FNQ1 */
                            }
                        }
                        ElseIf ((MCSK == 0x02))
                        {
                            If (((GTYP == 0x02) || (GTYP == 0x07)))
                            {
                                Local0 = FNQ3 /* \_SB_.FNQ3 */
                            }
                            Else
                            {
                                Local0 = FNQ0 /* \_SB_.FNQ0 */
                            }
                        }
                        Else
                        {
                            Local0 = FNQ0 /* \_SB_.FNQ0 */
                        }

                        Return (Local0)
                    }

                    Method (FNQR, 1, NotSerialized)
                    {
                        Local6 = FTSW ()
                        Local0 = SizeOf (Local6 [Zero])
                        Local1 = ((Local1 = (Local0 * 0x05)) + 0x02)
                        Name (BUFF, Buffer (Local1){})
                        BUFF [Zero] = Local1
                        BUFF [One] = Zero
                        Local2 = One
                        Local3 = Zero
                        Local4 = Zero
                        While ((Local3 < Local0))
                        {
                            BUFF [Local2 += One] = DerefOf (DerefOf (Local6 [
                                Zero]) [Local3])
                            Local4 = DerefOf (DerefOf (Local6 [Arg0]) [Local3])
                            BUFF [Local2 += One] = (Local4 & 0xFF)
                            BUFF [Local2 += One] = ((Local4 & 0xFF00) >> 
                                0x08)
                            BUFF [Local2 += One] = ((Local4 & 0x00FF0000) >> 
                                0x10)
                            BUFF [Local2 += One] = ((Local4 & 0xFF000000) >> 
                                0x18)
                            Local3 += One
                        }

                        ALIB (0x0C, BUFF)
                    }

                    Method (FNQS, 1, Serialized)
                    {
                        Sleep (0x03E8)
                        If ((Acquire (^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                        {
                            Local0 = ToInteger (^PCI0.LPC0.EC0.DCMB)
                            Release (^PCI0.LPC0.EC0.LFCM)
                        }

                        If (((Local0 > Zero) && (Local0 < 0x07)))
                        {
                            Local0 += 0x07
                            FNQR (Local0)
                        }
                        Else
                        {
                            Local0 = Arg0
                            Local1 = ((One == Local0) || (0x02 == Local0))
                            Local2 = ((0x03 == Local0) || (0x04 == Local0))
                            Local3 = (Local1 || Local2)
                            If (((0x02 == ^PCI0.LPC0.EC0.ACTY ()) || (0x03 == ^PCI0.LPC0.EC0.ACTY ())))
                            {
                                If (Local3)
                                {
                                    Local0 = 0x05
                                }

                                If ((0x06 == Local0))
                                {
                                    Local0 = 0x07
                                }
                            }

                            FNQR (Local0)
                        }

                        If (((COCC == One) && (CPTY == 0x09)))
                        {
                            Name (XX22, Buffer (0x07){})
                            CreateWordField (XX22, Zero, SSZ2)
                            CreateByteField (XX22, 0x02, SMN2)
                            CreateDWordField (XX22, 0x03, SMD2)
                            SSZ2 = 0x07
                            SMN2 = 0x0C
                            SMD2 = 0x00025D78
                            ALIB (0x0C, XX22)
                            SMN2 = 0x0B
                            SMD2 = 0x000186A0
                            ALIB (0x0C, XX22)
                        }
                    }

                    Name (IGPM, Zero)
                    Name (DGDO, One)
                    Name (REST, 0x07)
                    Name (PWEN, 0x0C)
                    Name (PWOK, 0x9A)
                    Scope (\)
                    {
                        Name (INSM, Zero)
                        Name (BCTP, Zero)
                        Name (CPM1, Zero)
                        Name (CPM2, Zero)
                        Name (CPM3, Zero)
                        Name (CPM4, Zero)
                        Name (CGTC, Zero)
                        Name (GGTC, Zero)
                        Name (CTG2, Zero)
                        Name (DWMD, Zero)
                        Name (QGPS, Zero)
                        Name (BGPS, 0x10)
                        Name (PGPS, 0x10)
                        Name (MGPS, 0x10)
                    }

                    Scope (\_SB)
                    {
                        Device (GZFD)
                        {
                            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                            Name (_UID, "GMZN")  // _UID: Unique ID
                            Name (_WDG, Buffer (0x0208)
                            {
                                /* 0000 */  0xE3, 0x54, 0x7B, 0x88, 0xDC, 0xDD, 0x2C, 0x4B,  // .T{...,K
                                /* 0008 */  0x8B, 0x88, 0x68, 0xA2, 0x6A, 0x88, 0x35, 0xD0,  // ..h.j.5.
                                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x49, 0x95, 0x54, 0x92,  // AA..I.T.
                                /* 0018 */  0xDE, 0x4B, 0x06, 0x4F, 0xAC, 0x04, 0xCE, 0x8B,  // .K.O....
                                /* 0020 */  0xF8, 0x98, 0xDB, 0xAA, 0x42, 0x32, 0x01, 0x02,  // ....B2..
                                /* 0028 */  0x77, 0xD7, 0xAF, 0x14, 0x6F, 0x10, 0x9B, 0x4C,  // w...o..L
                                /* 0030 */  0xB3, 0x34, 0xD3, 0x88, 0xDC, 0x78, 0x09, 0xBE,  // .4...x..
                                /* 0038 */  0x42, 0x33, 0x01, 0x02, 0xF1, 0x47, 0x75, 0xDA,  // B3...Gu.
                                /* 0040 */  0x4D, 0x82, 0x5F, 0x40, 0xBE, 0x79, 0xD9, 0x90,  // M._@.y..
                                /* 0048 */  0x3E, 0x29, 0xCE, 0xD7, 0x42, 0x34, 0x01, 0x02,  // >)..B4..
                                /* 0050 */  0x05, 0x88, 0x2A, 0xDC, 0x8C, 0x3A, 0xBA, 0x41,  // ..*..:.A
                                /* 0058 */  0xA6, 0xF7, 0x09, 0x2E, 0x00, 0x89, 0xCD, 0x3B,  // .......;
                                /* 0060 */  0x42, 0x35, 0x01, 0x02, 0x27, 0x91, 0x5B, 0x8C,  // B5..'.[.
                                /* 0068 */  0xD4, 0xEC, 0x57, 0x46, 0x98, 0x0F, 0x85, 0x10,  // ..WF....
                                /* 0070 */  0x19, 0xF9, 0x9C, 0xA5, 0x42, 0x41, 0x01, 0x02,  // ....BA..
                                /* 0078 */  0x0A, 0xCA, 0xF3, 0xB7, 0xDC, 0xAC, 0xD2, 0x42,  // .......B
                                /* 0080 */  0x92, 0x17, 0x77, 0xC6, 0xC6, 0x28, 0xFB, 0xD2,  // ..w..(..
                                /* 0088 */  0x41, 0x30, 0x01, 0x01, 0xE2, 0x54, 0x7B, 0x88,  // A0...T{.
                                /* 0090 */  0xDC, 0xDD, 0x2C, 0x4B, 0x8B, 0x88, 0x68, 0xA2,  // ..,K..h.
                                /* 0098 */  0x6A, 0x88, 0x35, 0xD0, 0x41, 0x31, 0x02, 0x01,  // j.5.A1..
                                /* 00A0 */  0xD3, 0x7C, 0xA5, 0x93, 0xC6, 0xBB, 0xAB, 0x46,  // .|.....F
                                /* 00A8 */  0x95, 0x1D, 0x31, 0xF1, 0x7C, 0xC9, 0x68, 0xA0,  // ..1.|.h.
                                /* 00B0 */  0x41, 0x32, 0x12, 0x01, 0x6D, 0x2A, 0xFB, 0x87,  // A2..m*..
                                /* 00B8 */  0x02, 0xD8, 0xE7, 0x48, 0x92, 0x08, 0x45, 0x76,  // ...H..Ev
                                /* 00C0 */  0xC5, 0xF5, 0xC8, 0xD8, 0x41, 0x33, 0x03, 0x01,  // ....A3..
                                /* 00C8 */  0x84, 0xBD, 0xD5, 0x4D, 0xA9, 0x15, 0xE2, 0x47,  // ...M...G
                                /* 00D0 */  0xAD, 0x65, 0xCC, 0x61, 0xA5, 0xC6, 0x2F, 0xD0,  // .e.a../.
                                /* 00D8 */  0x41, 0x34, 0x06, 0x01, 0xE6, 0x3C, 0xAF, 0xEC,  // A4...<..
                                /* 00E0 */  0xB2, 0xDC, 0x3D, 0x47, 0x94, 0xC3, 0x7B, 0xF4,  // ..=G..{.
                                /* 00E8 */  0xD9, 0x6E, 0x0D, 0x9A, 0x41, 0x35, 0x09, 0x01,  // .n..A5..
                                /* 00F0 */  0x6D, 0x25, 0x90, 0x4C, 0xEA, 0x44, 0xA8, 0xD6,  // m%.L.D..
                                /* 00F8 */  0x76, 0x50, 0x63, 0xDF, 0x4F, 0xEB, 0x2C, 0xFF,  // vPc.O.,.
                                /* 0100 */  0x41, 0x36, 0x03, 0x01, 0x81, 0x24, 0xD4, 0xBF,  // A6...$..
                                /* 0108 */  0xE3, 0xAE, 0x01, 0x45, 0xA1, 0x07, 0xAF, 0xB6,  // ...E....
                                /* 0110 */  0x84, 0x25, 0xC5, 0xF8, 0xD0, 0x00, 0x01, 0x08,  // .%......
                                /* 0118 */  0x81, 0x24, 0xD4, 0xBF, 0xE3, 0xAE, 0x02, 0x45,  // .$.....E
                                /* 0120 */  0xA1, 0x07, 0xAF, 0xB6, 0x84, 0x25, 0xC5, 0xF8,  // .....%..
                                /* 0128 */  0xE0, 0x00, 0x01, 0x08, 0x6B, 0x90, 0x62, 0xD0,  // ....k.b.
                                /* 0130 */  0xD4, 0x12, 0x10, 0x45, 0x99, 0x9D, 0x48, 0x31,  // ...E..H1
                                /* 0138 */  0xEE, 0x80, 0xE9, 0x85, 0xD1, 0x00, 0x01, 0x08,  // ........
                                /* 0140 */  0x35, 0xA4, 0x72, 0xBC, 0xC1, 0xE8, 0x75, 0x42,  // 5.r...uB
                                /* 0148 */  0xB3, 0xE2, 0xD8, 0xB8, 0x07, 0x4A, 0xBA, 0x59,  // .....J.Y
                                /* 0150 */  0xE1, 0x00, 0x01, 0x08, 0xD9, 0xC6, 0xAF, 0x10,  // ........
                                /* 0158 */  0x8B, 0xEA, 0x90, 0x45, 0xA2, 0xE7, 0x1C, 0xD3,  // ...E....
                                /* 0160 */  0xC8, 0x4B, 0xB4, 0xB1, 0xE2, 0x00, 0x01, 0x08,  // .K......
                                /* 0168 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 0170 */  0x86, 0xF9, 0x61, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..a...._
                                /* 0178 */  0xE3, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                                /* 0180 */  0xEA, 0x8F, 0xE1, 0x41, 0x86, 0xF9, 0x61, 0x1D,  // ...A..a.
                                /* 0188 */  0x83, 0x15, 0x1B, 0x5F, 0xE4, 0x00, 0x01, 0x08,  // ..._....
                                /* 0190 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 0198 */  0x86, 0xF9, 0x71, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..q...._
                                /* 01A0 */  0xE5, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                                /* 01A8 */  0xEA, 0x8F, 0xE0, 0x41, 0x86, 0xF9, 0x81, 0x1D,  // ...A....
                                /* 01B0 */  0x83, 0x15, 0x1B, 0x5F, 0xE6, 0x00, 0x01, 0x08,  // ..._....
                                /* 01B8 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                                /* 01C0 */  0x86, 0xF9, 0x91, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ......._
                                /* 01C8 */  0xE7, 0x00, 0x01, 0x08, 0xA1, 0x91, 0x33, 0x1E,  // ......3.
                                /* 01D0 */  0x89, 0x2C, 0x4D, 0x46, 0x95, 0xD9, 0x30, 0x28,  // .,MF..0(
                                /* 01D8 */  0xB7, 0x2E, 0x7A, 0x33, 0xE8, 0x00, 0x01, 0x08,  // ..z3....
                                /* 01E0 */  0xE5, 0x46, 0x13, 0xBE, 0x32, 0x3A, 0x31, 0x4A,  // .F..2:1J
                                /* 01E8 */  0xB8, 0xB0, 0x2C, 0xD1, 0x95, 0xE1, 0xF5, 0x72,  // ..,....r
                                /* 01F0 */  0xE9, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                                /* 01F8 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                                /* 0200 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x44, 0x01, 0x00   // ..).DD..
                            })
                            OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                            Field (ECMS, ByteAcc, Lock, Preserve)
                            {
                                INDX,   8, 
                                DATA,   8
                            }

                            Method (RECM, 1, Serialized)
                            {
                                INDX = Arg0
                                Return (DATA) /* \_SB_.GZFD.DATA */
                            }

                            Method (WECM, 2, Serialized)
                            {
                                INDX = Arg0
                                DATA = Arg1
                            }

                            Method (WSMI, 1, NotSerialized)
                            {
                                SMBB = Arg0
                                SMBA = 0xCB
                            }

                            Name (LFT0, Package (0x09)
                            {
                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x55, 
                                    0x5A, 
                                    0x19, 
                                    0x23, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x55, 
                                    0x5A, 
                                    0x19, 
                                    0x23, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x38, 
                                    0x38, 
                                    0x38, 
                                    0x38, 
                                    0x3D, 
                                    0x45, 
                                    0x4C, 
                                    0x51, 
                                    0x56, 
                                    0x5C, 
                                    0x38, 
                                    0x5C, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x25, 
                                    0x28, 
                                    0x2B, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x25, 
                                    0x7F, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x3C, 
                                    0x3C, 
                                    0x3C, 
                                    0x3C, 
                                    0x3C, 
                                    0x40, 
                                    0x49, 
                                    0x4B, 
                                    0x4D, 
                                    0x58, 
                                    0x3C, 
                                    0x58, 
                                    0x09
                                }
                            })
                            Name (LFT1, Package (0x09)
                            {
                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x55, 
                                    0x5A, 
                                    0x19, 
                                    0x0A, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x55, 
                                    0x5A, 
                                    0x19, 
                                    0x0A, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x05, 
                                    Zero, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x05, 
                                    Zero, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x43, 
                                    0x49, 
                                    0x50, 
                                    0x54, 
                                    0x56, 
                                    0x5F, 
                                    0x3A, 
                                    0x5F, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x22, 
                                    0x24, 
                                    0x2B, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x22, 
                                    0x7F, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0DAC, 
                                    0x0E74, 
                                    0x1068, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x3F, 
                                    0x3F, 
                                    0x3F, 
                                    0x3F, 
                                    0x3F, 
                                    0x47, 
                                    0x4A, 
                                    0x4D, 
                                    0x4F, 
                                    0x58, 
                                    0x3F, 
                                    0x58, 
                                    0x09
                                }
                            })
                            Name (LFT2, Package (0x09)
                            {
                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E10, 
                                    0x1004, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x08
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1004, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x08
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E10, 
                                    0x1004, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x55, 
                                    0x5A, 
                                    0x0F, 
                                    0x14, 
                                    0x37, 
                                    0x08
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1004, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x55, 
                                    0x5A, 
                                    0x0F, 
                                    0x14, 
                                    0x37, 
                                    0x08
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E10, 
                                    0x1004, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x08
                                }, 

                                Package (0x12)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1004, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x08
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E10, 
                                    0x1004, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x33, 
                                    0x33, 
                                    0x33, 
                                    0x36, 
                                    0x40, 
                                    0x45, 
                                    0x49, 
                                    0x50, 
                                    0x57, 
                                    0x5D, 
                                    0x33, 
                                    0x5D, 
                                    0x08
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0AF0, 
                                    0x0D48, 
                                    0x0E10, 
                                    0x1004, 
                                    0x1130, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x24, 
                                    0x27, 
                                    0x2C, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x24, 
                                    0x7F, 
                                    0x08
                                }, 

                                Package (0x19)
                                {
                                    0x0640, 
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x0B54, 
                                    0x0D48, 
                                    0x0E74, 
                                    0x1004, 
                                    0x1194, 
                                    0x12C0, 
                                    0x0640, 
                                    0x12C0, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x41, 
                                    0x44, 
                                    0x4E, 
                                    0x56, 
                                    0x3A, 
                                    0x56, 
                                    0x08
                                }
                            })
                            Name (LFT3, Package (0x09)
                            {
                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x50, 
                                    0x58, 
                                    0x19, 
                                    0x23, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x50, 
                                    0x58, 
                                    0x19, 
                                    0x23, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x3A, 
                                    0x40, 
                                    0x46, 
                                    0x4F, 
                                    0x55, 
                                    0x58, 
                                    0x5E, 
                                    0x3A, 
                                    0x5E, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x22, 
                                    0x26, 
                                    0x2D, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x48, 
                                    0x22, 
                                    0x7F, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x40, 
                                    0x40, 
                                    0x40, 
                                    0x40, 
                                    0x40, 
                                    0x48, 
                                    0x4B, 
                                    0x50, 
                                    0x53, 
                                    0x55, 
                                    0x40, 
                                    0x55, 
                                    0x09
                                }
                            })
                            Name (LFT4, Package (0x09)
                            {
                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x50, 
                                    0x58, 
                                    0x0F, 
                                    0x0A, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x50, 
                                    0x58, 
                                    0x0F, 
                                    0x0A, 
                                    0x2D, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x05, 
                                    Zero, 
                                    0x23, 
                                    0x09
                                }, 

                                Package (0x12)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x32, 
                                    0x36, 
                                    0x05, 
                                    Zero, 
                                    0x23, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x39, 
                                    0x39, 
                                    0x39, 
                                    0x39, 
                                    0x3D, 
                                    0x49, 
                                    0x4C, 
                                    0x53, 
                                    0x58, 
                                    0x5E, 
                                    0x39, 
                                    0x5E, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x06A4, 
                                    0x12C0, 
                                    0x22, 
                                    0x26, 
                                    0x2A, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x22, 
                                    0x7F, 
                                    0x09
                                }, 

                                Package (0x19)
                                {
                                    0x0708, 
                                    0x07D0, 
                                    0x0898, 
                                    0x08FC, 
                                    0x0BB8, 
                                    0x0E10, 
                                    0x0ED8, 
                                    0x10CC, 
                                    0x11F8, 
                                    0x12C0, 
                                    0x0708, 
                                    0x12C0, 
                                    0x45, 
                                    0x45, 
                                    0x45, 
                                    0x45, 
                                    0x45, 
                                    0x4B, 
                                    0x4D, 
                                    0x4F, 
                                    0x54, 
                                    0x55, 
                                    0x45, 
                                    0x55, 
                                    0x09
                                }
                            })
                            Name (LFT5, Package (0x09)
                            {
                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x07D0, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x0A
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x19, 
                                    0x29, 
                                    Zero, 
                                    Zero, 
                                    0x19, 
                                    0x0A
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x07D0, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x50, 
                                    0x58, 
                                    0x0F, 
                                    0x14, 
                                    0x2D, 
                                    0x0A
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x50, 
                                    0x58, 
                                    0x0F, 
                                    0x14, 
                                    0x2D, 
                                    0x0A
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x07D0, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x0A
                                }, 

                                Package (0x12)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x32, 
                                    0x36, 
                                    0x0F, 
                                    Zero, 
                                    0x2D, 
                                    0x0A
                                }, 

                                Package (0x19)
                                {
                                    0x06A4, 
                                    0x07D0, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x38, 
                                    0x38, 
                                    0x38, 
                                    0x38, 
                                    0x3F, 
                                    0x41, 
                                    0x45, 
                                    0x49, 
                                    0x4D, 
                                    0x57, 
                                    0x38, 
                                    0x57, 
                                    0x0A
                                }, 

                                Package (0x19)
                                {
                                    0x06A4, 
                                    0x07D0, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x22, 
                                    0x26, 
                                    0x29, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x7F, 
                                    0x22, 
                                    0x7F, 
                                    0x0A
                                }, 

                                Package (0x19)
                                {
                                    0x06A4, 
                                    0x076C, 
                                    0x0834, 
                                    0x0960, 
                                    0x0A8C, 
                                    0x0BB8, 
                                    0x0CE4, 
                                    0x0E10, 
                                    0x0F3C, 
                                    0x1068, 
                                    0x06A4, 
                                    0x1068, 
                                    0x30, 
                                    0x30, 
                                    0x30, 
                                    0x30, 
                                    0x33, 
                                    0x36, 
                                    0x39, 
                                    0x42, 
                                    0x45, 
                                    0x4B, 
                                    0x30, 
                                    0x4B, 
                                    0x0A
                                }
                            })
                            Method (SFTW, 1, Serialized)
                            {
                                If ((MCSK == One))
                                {
                                    Switch (ToInteger (GTYP))
                                    {
                                        Case (One)
                                        {
                                            Return (DerefOf (LFT3 [Arg0]))
                                        }
                                        Case (0x05)
                                        {
                                            Return (DerefOf (LFT4 [Arg0]))
                                        }
                                        Case (0x07)
                                        {
                                            Return (DerefOf (LFT5 [Arg0]))
                                        }
                                        Case (0x02)
                                        {
                                            Return (DerefOf (LFT5 [Arg0]))
                                        }
                                        Case (0x06)
                                        {
                                            Return (DerefOf (LFT4 [Arg0]))
                                        }
                                        Default
                                        {
                                            Return (DerefOf (LFT4 [Arg0]))
                                        }

                                    }
                                }

                                If ((MCSK == 0x02))
                                {
                                    Switch (ToInteger (GTYP))
                                    {
                                        Case (One)
                                        {
                                            Return (DerefOf (LFT0 [Arg0]))
                                        }
                                        Case (0x05)
                                        {
                                            Return (DerefOf (LFT1 [Arg0]))
                                        }
                                        Case (0x07)
                                        {
                                            Return (DerefOf (LFT2 [Arg0]))
                                        }
                                        Case (0x02)
                                        {
                                            Return (DerefOf (LFT2 [Arg0]))
                                        }
                                        Case (0x06)
                                        {
                                            Return (DerefOf (LFT1 [Arg0]))
                                        }
                                        Default
                                        {
                                            Return (DerefOf (LFT1 [Arg0]))
                                        }

                                    }
                                }

                                Return (DerefOf (LFT1 [Arg0]))
                            }

                            Method (FTOI, 2, NotSerialized)
                            {
                                Name (OCVI, Zero)
                                Name (NORP, Zero)
                                Name (REMA, Zero)
                                Name (MANT, Zero)
                                Name (INDE, Zero)
                                Name (SHFT, Zero)
                                Name (RESU, Zero)
                                OCVI = Arg0
                                NORP = Arg1
                                Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                                While ((OCVI != Zero))
                                {
                                    REMA <<= INDE /* \_SB_.GZFD.FTOI.INDE */
                                    MANT += REMA /* \_SB_.GZFD.FTOI.REMA */
                                    INDE += One
                                    Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                                }

                                SHFT = (0x17 - INDE) /* \_SB_.GZFD.FTOI.INDE */
                                MANT <<= SHFT /* \_SB_.GZFD.FTOI.SHFT */
                                RESU |= MANT /* \_SB_.GZFD.FTOI.MANT */
                                INDE += 0x7F
                                INDE <<= 0x17
                                RESU |= INDE /* \_SB_.GZFD.FTOI.INDE */
                                If ((NORP == One))
                                {
                                    RESU |= 0x80000000
                                }

                                Return (RESU) /* \_SB_.GZFD.FTOI.RESU */
                            }

                            Method (IOT2, 1, NotSerialized)
                            {
                                Name (NOR2, Zero)
                                If ((Arg0 == Zero))
                                {
                                    Return (Zero)
                                }

                                NOR2 = (Arg0 & 0x80000000)
                                If ((NOR2 != Zero))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (IOTF, 1, NotSerialized)
                            {
                                Name (RES2, Zero)
                                If ((Arg0 == Zero))
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    RES2 = (Arg0 & 0x7FFFFFFF)
                                    Return (RES2) /* \_SB_.GZFD.IOTF.RES2 */
                                }
                            }

                            Name (GOC0, Buffer (0x2C)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (GOC0, Zero, GPST)
                            CreateDWordField (GOC0, 0x04, GOCI)
                            CreateDWordField (GOC0, 0x08, GDEV)
                            CreateDWordField (GOC0, 0x0C, GOCV)
                            CreateDWordField (GOC0, 0x10, GMIN)
                            CreateDWordField (GOC0, 0x14, GMAX)
                            CreateDWordField (GOC0, 0x18, GSCV)
                            CreateDWordField (GOC0, 0x1C, GOCO)
                            CreateDWordField (GOC0, 0x20, GNOC)
                            CreateDWordField (GOC0, 0x24, GDET)
                            CreateDWordField (GOC0, 0x28, GCAP)
                            Name (GOC1, Buffer (0x2C)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (GOC1, Zero, MPST)
                            CreateDWordField (GOC1, 0x04, MOCI)
                            CreateDWordField (GOC1, 0x08, MDEV)
                            CreateDWordField (GOC1, 0x0C, MOCV)
                            CreateDWordField (GOC1, 0x10, MMIN)
                            CreateDWordField (GOC1, 0x14, MMAX)
                            CreateDWordField (GOC1, 0x18, MSCV)
                            CreateDWordField (GOC1, 0x1C, MOCO)
                            CreateDWordField (GOC1, 0x20, MNOC)
                            CreateDWordField (GOC1, 0x24, MDET)
                            CreateDWordField (GOC1, 0x28, MCAP)
                            Method (WQA1, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    GPST = Zero
                                    GOCI = Zero
                                    GDEV = Zero
                                    GOCV = 0x64
                                    GMIN = Zero
                                    GMAX = 0x96
                                    GSCV = One
                                    GOCO = Zero
                                    GNOC = Zero
                                    GDET = Zero
                                    GCAP = Zero
                                    Return (GOC0) /* \_SB_.GZFD.GOC0 */
                                }

                                If ((Arg0 == One))
                                {
                                    MPST = Zero
                                    MOCI = One
                                    MDEV = Zero
                                    MOCV = 0xC8
                                    MMIN = Zero
                                    MMAX = 0x012C
                                    MSCV = One
                                    MOCO = Zero
                                    MNOC = Zero
                                    MDET = Zero
                                    MCAP = Zero
                                    Return (GOC1) /* \_SB_.GZFD.GOC1 */
                                }
                            }

                            Name (WTL1, Package (0x14)
                            {
                                Package (0x02)
                                {
                                    "League of Legends.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "LeagueClient.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "Three_Kingdoms.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "F1_2021_dx12.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "ModernWarfare.exe", 
                                    "1"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "1"
                                }
                            })
                            Name (WTL2, Package (0x14)
                            {
                                Package (0x02)
                                {
                                    "League of Legends.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "LeagueClient.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Three_Kingdoms.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_2021_dx12.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ModernWarfare.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }
                            })
                            Name (WTL3, Package (0x14)
                            {
                                Package (0x02)
                                {
                                    "League of Legends.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "LeagueClient.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "6"
                                }, 

                                Package (0x02)
                                {
                                    "Three_Kingdoms.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "F1_2021_dx12.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ModernWarfare.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }
                            })
                            Name (WTL4, Package (0x14)
                            {
                                Package (0x02)
                                {
                                    "League of Legends.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "LeagueClient.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "dota2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "csgo.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "TslGame.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "FortniteClient-Win64-Shipping.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RainbowSix.exe", 
                                    "5"
                                }, 

                                Package (0x02)
                                {
                                    "SOTTR.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Three_Kingdoms.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "r5apex.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "RDR2.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "bfv.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "F1_2021_dx12.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Cyberpunk2077.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "GTA5.exe", 
                                    "2"
                                }, 

                                Package (0x02)
                                {
                                    "Overwatch.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "ACValhalla.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "VALORANT-Win64-Shipping.exe", 
                                    "3"
                                }, 

                                Package (0x02)
                                {
                                    "ModernWarfare.exe", 
                                    "4"
                                }, 

                                Package (0x02)
                                {
                                    "NarakaBladepoint.exe", 
                                    "2"
                                }
                            })
                            Method (WQA2, 1, NotSerialized)
                            {
                                If (((MCSK == 0x02) || (MCSK == 0x04)))
                                {
                                    If ((GTYP == One))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (DerefOf (WTL2 [Zero]))
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (DerefOf (WTL2 [One]))
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (DerefOf (WTL2 [0x02]))
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (DerefOf (WTL2 [0x03]))
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (DerefOf (WTL2 [0x04]))
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (DerefOf (WTL2 [0x05]))
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (DerefOf (WTL2 [0x06]))
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (DerefOf (WTL2 [0x07]))
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (DerefOf (WTL2 [0x08]))
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (DerefOf (WTL2 [0x09]))
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (DerefOf (WTL2 [0x0A]))
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (DerefOf (WTL2 [0x0B]))
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (DerefOf (WTL2 [0x0C]))
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (DerefOf (WTL2 [0x0D]))
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (DerefOf (WTL2 [0x0E]))
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (DerefOf (WTL2 [0x0F]))
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (DerefOf (WTL2 [0x10]))
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (DerefOf (WTL2 [0x11]))
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (DerefOf (WTL2 [0x12]))
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (DerefOf (WTL2 [0x13]))
                                        }
                                    }
                                    ElseIf ((GTYP == 0x05))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (DerefOf (WTL3 [Zero]))
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (DerefOf (WTL3 [One]))
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (DerefOf (WTL3 [0x02]))
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (DerefOf (WTL3 [0x03]))
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (DerefOf (WTL3 [0x04]))
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (DerefOf (WTL3 [0x05]))
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (DerefOf (WTL3 [0x06]))
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (DerefOf (WTL3 [0x07]))
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (DerefOf (WTL3 [0x08]))
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (DerefOf (WTL3 [0x09]))
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (DerefOf (WTL3 [0x0A]))
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (DerefOf (WTL3 [0x0B]))
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (DerefOf (WTL3 [0x0C]))
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (DerefOf (WTL3 [0x0D]))
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (DerefOf (WTL3 [0x0E]))
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (DerefOf (WTL3 [0x0F]))
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (DerefOf (WTL3 [0x10]))
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (DerefOf (WTL3 [0x11]))
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (DerefOf (WTL3 [0x12]))
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (DerefOf (WTL3 [0x13]))
                                        }
                                    }
                                    ElseIf (((GTYP == 0x07) || (GTYP == 0x02)))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (DerefOf (WTL4 [Zero]))
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (DerefOf (WTL4 [One]))
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (DerefOf (WTL4 [0x02]))
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (DerefOf (WTL4 [0x03]))
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (DerefOf (WTL4 [0x04]))
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (DerefOf (WTL4 [0x05]))
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (DerefOf (WTL4 [0x06]))
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (DerefOf (WTL4 [0x07]))
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (DerefOf (WTL4 [0x08]))
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (DerefOf (WTL4 [0x09]))
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (DerefOf (WTL4 [0x0A]))
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (DerefOf (WTL4 [0x0B]))
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (DerefOf (WTL4 [0x0C]))
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (DerefOf (WTL4 [0x0D]))
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (DerefOf (WTL4 [0x0E]))
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (DerefOf (WTL4 [0x0F]))
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (DerefOf (WTL4 [0x10]))
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (DerefOf (WTL4 [0x11]))
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (DerefOf (WTL4 [0x12]))
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (DerefOf (WTL4 [0x13]))
                                        }
                                    }
                                    Else
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            Return (DerefOf (WTL3 [Zero]))
                                        }

                                        If ((Arg0 == One))
                                        {
                                            Return (DerefOf (WTL3 [One]))
                                        }

                                        If ((Arg0 == 0x02))
                                        {
                                            Return (DerefOf (WTL3 [0x02]))
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            Return (DerefOf (WTL3 [0x03]))
                                        }

                                        If ((Arg0 == 0x04))
                                        {
                                            Return (DerefOf (WTL3 [0x04]))
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            Return (DerefOf (WTL3 [0x05]))
                                        }

                                        If ((Arg0 == 0x06))
                                        {
                                            Return (DerefOf (WTL3 [0x06]))
                                        }

                                        If ((Arg0 == 0x07))
                                        {
                                            Return (DerefOf (WTL3 [0x07]))
                                        }

                                        If ((Arg0 == 0x08))
                                        {
                                            Return (DerefOf (WTL3 [0x08]))
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            Return (DerefOf (WTL3 [0x09]))
                                        }

                                        If ((Arg0 == 0x0A))
                                        {
                                            Return (DerefOf (WTL3 [0x0A]))
                                        }

                                        If ((Arg0 == 0x0B))
                                        {
                                            Return (DerefOf (WTL3 [0x0B]))
                                        }

                                        If ((Arg0 == 0x0C))
                                        {
                                            Return (DerefOf (WTL3 [0x0C]))
                                        }

                                        If ((Arg0 == 0x0D))
                                        {
                                            Return (DerefOf (WTL3 [0x0D]))
                                        }

                                        If ((Arg0 == 0x0E))
                                        {
                                            Return (DerefOf (WTL3 [0x0E]))
                                        }

                                        If ((Arg0 == 0x0F))
                                        {
                                            Return (DerefOf (WTL3 [0x0F]))
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            Return (DerefOf (WTL3 [0x10]))
                                        }

                                        If ((Arg0 == 0x11))
                                        {
                                            Return (DerefOf (WTL3 [0x11]))
                                        }

                                        If ((Arg0 == 0x12))
                                        {
                                            Return (DerefOf (WTL3 [0x12]))
                                        }

                                        If ((Arg0 == 0x13))
                                        {
                                            Return (DerefOf (WTL3 [0x13]))
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        Return (DerefOf (WTL1 [Zero]))
                                    }

                                    If ((Arg0 == One))
                                    {
                                        Return (DerefOf (WTL1 [One]))
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        Return (DerefOf (WTL1 [0x02]))
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        Return (DerefOf (WTL1 [0x03]))
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        Return (DerefOf (WTL1 [0x04]))
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        Return (DerefOf (WTL1 [0x05]))
                                    }

                                    If ((Arg0 == 0x06))
                                    {
                                        Return (DerefOf (WTL1 [0x06]))
                                    }

                                    If ((Arg0 == 0x07))
                                    {
                                        Return (DerefOf (WTL1 [0x07]))
                                    }

                                    If ((Arg0 == 0x08))
                                    {
                                        Return (DerefOf (WTL1 [0x08]))
                                    }

                                    If ((Arg0 == 0x09))
                                    {
                                        Return (DerefOf (WTL1 [0x09]))
                                    }

                                    If ((Arg0 == 0x0A))
                                    {
                                        Return (DerefOf (WTL1 [0x0A]))
                                    }

                                    If ((Arg0 == 0x0B))
                                    {
                                        Return (DerefOf (WTL1 [0x0B]))
                                    }

                                    If ((Arg0 == 0x0C))
                                    {
                                        Return (DerefOf (WTL1 [0x0C]))
                                    }

                                    If ((Arg0 == 0x0D))
                                    {
                                        Return (DerefOf (WTL1 [0x0D]))
                                    }

                                    If ((Arg0 == 0x0E))
                                    {
                                        Return (DerefOf (WTL1 [0x0E]))
                                    }

                                    If ((Arg0 == 0x0F))
                                    {
                                        Return (DerefOf (WTL1 [0x0F]))
                                    }

                                    If ((Arg0 == 0x10))
                                    {
                                        Return (DerefOf (WTL1 [0x10]))
                                    }

                                    If ((Arg0 == 0x11))
                                    {
                                        Return (DerefOf (WTL1 [0x11]))
                                    }

                                    If ((Arg0 == 0x12))
                                    {
                                        Return (DerefOf (WTL1 [0x12]))
                                    }

                                    If ((Arg0 == 0x13))
                                    {
                                        Return (DerefOf (WTL1 [0x13]))
                                    }
                                }
                            }

                            Name (FACT, Buffer (0x48)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (FACT, Zero, FNID)
                            CreateDWordField (FACT, 0x04, FNLE)
                            CreateWordField (FACT, 0x08, FNS0)
                            CreateWordField (FACT, 0x0A, FNS1)
                            CreateWordField (FACT, 0x0C, FNS2)
                            CreateWordField (FACT, 0x0E, FNS3)
                            CreateWordField (FACT, 0x10, FNS4)
                            CreateWordField (FACT, 0x12, FNS5)
                            CreateWordField (FACT, 0x14, FNS6)
                            CreateWordField (FACT, 0x16, FNS7)
                            CreateWordField (FACT, 0x18, FNS8)
                            CreateWordField (FACT, 0x1A, FNS9)
                            CreateDWordField (FACT, 0x1C, SEID)
                            CreateDWordField (FACT, 0x20, STLE)
                            CreateWordField (FACT, 0x24, SST0)
                            CreateWordField (FACT, 0x26, SST1)
                            CreateWordField (FACT, 0x28, SST2)
                            CreateWordField (FACT, 0x2A, SST3)
                            CreateWordField (FACT, 0x2C, SST4)
                            CreateWordField (FACT, 0x2E, SST5)
                            CreateWordField (FACT, 0x30, SST6)
                            CreateWordField (FACT, 0x32, SST7)
                            CreateWordField (FACT, 0x34, SST8)
                            CreateWordField (FACT, 0x36, SST9)
                            CreateByteField (FACT, 0x38, SOUA)
                            CreateByteField (FACT, 0x39, EOUA)
                            CreateWordField (FACT, 0x3A, CFMX)
                            CreateByteField (FACT, 0x3C, DMFS)
                            CreateByteField (FACT, 0x3D, RESE)
                            CreateWordField (FACT, 0x3E, CFMN)
                            CreateWordField (FACT, 0x40, FSPS)
                            CreateWordField (FACT, 0x42, MXST)
                            CreateWordField (FACT, 0x44, MNST)
                            CreateWordField (FACT, 0x46, STTS)
                            Method (WQA3, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    FNID = Zero
                                    FNLE = 0x0A
                                    Local0 = SFTW (0x06)
                                    FNS0 = DerefOf (Local0 [Zero])
                                    FNS1 = DerefOf (Local0 [One])
                                    FNS2 = DerefOf (Local0 [0x02])
                                    FNS3 = DerefOf (Local0 [0x03])
                                    FNS4 = DerefOf (Local0 [0x04])
                                    FNS5 = DerefOf (Local0 [0x05])
                                    FNS6 = DerefOf (Local0 [0x06])
                                    FNS7 = DerefOf (Local0 [0x07])
                                    FNS8 = DerefOf (Local0 [0x08])
                                    FNS9 = DerefOf (Local0 [0x09])
                                    CFMN = DerefOf (Local0 [0x0A])
                                    CFMX = DerefOf (Local0 [0x0B])
                                    SST0 = DerefOf (Local0 [0x0C])
                                    SST1 = DerefOf (Local0 [0x0D])
                                    SST2 = DerefOf (Local0 [0x0E])
                                    SST3 = DerefOf (Local0 [0x0F])
                                    SST4 = DerefOf (Local0 [0x10])
                                    SST5 = DerefOf (Local0 [0x11])
                                    SST6 = DerefOf (Local0 [0x12])
                                    SST7 = DerefOf (Local0 [0x13])
                                    SST8 = DerefOf (Local0 [0x14])
                                    SST9 = DerefOf (Local0 [0x15])
                                    MNST = DerefOf (Local0 [0x16])
                                    MXST = DerefOf (Local0 [0x17])
                                    DMFS = DerefOf (Local0 [0x18])
                                    SEID = 0x03
                                    STLE = 0x0A
                                    SOUA = Zero
                                    EOUA = 0x0A
                                    RESE = Zero
                                    FSPS = Zero
                                    STTS = Zero
                                    Return (FACT) /* \_SB_.GZFD.FACT */
                                }
                                ElseIf ((Arg0 == One))
                                {
                                    FNID = Zero
                                    FNLE = 0x0A
                                    Local0 = SFTW (0x07)
                                    FNS0 = DerefOf (Local0 [Zero])
                                    FNS1 = DerefOf (Local0 [One])
                                    FNS2 = DerefOf (Local0 [0x02])
                                    FNS3 = DerefOf (Local0 [0x03])
                                    FNS4 = DerefOf (Local0 [0x04])
                                    FNS5 = DerefOf (Local0 [0x05])
                                    FNS6 = DerefOf (Local0 [0x06])
                                    FNS7 = DerefOf (Local0 [0x07])
                                    FNS8 = DerefOf (Local0 [0x08])
                                    FNS9 = DerefOf (Local0 [0x09])
                                    CFMN = DerefOf (Local0 [0x0A])
                                    CFMX = DerefOf (Local0 [0x0B])
                                    SST0 = DerefOf (Local0 [0x0C])
                                    SST1 = DerefOf (Local0 [0x0D])
                                    SST2 = DerefOf (Local0 [0x0E])
                                    SST3 = DerefOf (Local0 [0x0F])
                                    SST4 = DerefOf (Local0 [0x10])
                                    SST5 = DerefOf (Local0 [0x11])
                                    SST6 = DerefOf (Local0 [0x12])
                                    SST7 = DerefOf (Local0 [0x13])
                                    SST8 = DerefOf (Local0 [0x14])
                                    SST9 = DerefOf (Local0 [0x15])
                                    MNST = DerefOf (Local0 [0x16])
                                    MXST = DerefOf (Local0 [0x17])
                                    DMFS = DerefOf (Local0 [0x18])
                                    SEID = Zero
                                    STLE = 0x0A
                                    SOUA = Zero
                                    EOUA = 0x0A
                                    RESE = Zero
                                    FSPS = Zero
                                    STTS = Zero
                                    Return (FACT) /* \_SB_.GZFD.FACT */
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    FNID = One
                                    FNLE = 0x0A
                                    Local0 = SFTW (0x08)
                                    FNS0 = DerefOf (Local0 [Zero])
                                    FNS1 = DerefOf (Local0 [One])
                                    FNS2 = DerefOf (Local0 [0x02])
                                    FNS3 = DerefOf (Local0 [0x03])
                                    FNS4 = DerefOf (Local0 [0x04])
                                    FNS5 = DerefOf (Local0 [0x05])
                                    FNS6 = DerefOf (Local0 [0x06])
                                    FNS7 = DerefOf (Local0 [0x07])
                                    FNS8 = DerefOf (Local0 [0x08])
                                    FNS9 = DerefOf (Local0 [0x09])
                                    CFMN = DerefOf (Local0 [0x0A])
                                    CFMX = DerefOf (Local0 [0x0B])
                                    SST0 = DerefOf (Local0 [0x0C])
                                    SST1 = DerefOf (Local0 [0x0D])
                                    SST2 = DerefOf (Local0 [0x0E])
                                    SST3 = DerefOf (Local0 [0x0F])
                                    SST4 = DerefOf (Local0 [0x10])
                                    SST5 = DerefOf (Local0 [0x11])
                                    SST6 = DerefOf (Local0 [0x12])
                                    SST7 = DerefOf (Local0 [0x13])
                                    SST8 = DerefOf (Local0 [0x14])
                                    SST9 = DerefOf (Local0 [0x15])
                                    MNST = DerefOf (Local0 [0x16])
                                    MXST = DerefOf (Local0 [0x17])
                                    DMFS = DerefOf (Local0 [0x18])
                                    SEID = 0x04
                                    STLE = 0x0A
                                    SOUA = Zero
                                    EOUA = 0x0A
                                    RESE = Zero
                                    FSPS = Zero
                                    STTS = Zero
                                    Return (FACT) /* \_SB_.GZFD.FACT */
                                }
                            }

                            Name (LTDA, Buffer (0x07)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (LTDA, Zero, LTID)
                            CreateByteField (LTDA, One, COTI)
                            CreateByteField (LTDA, 0x02, LTTP)
                            CreateByteField (LTDA, 0x03, STTN)
                            CreateByteField (LTDA, 0x04, DFST)
                            CreateByteField (LTDA, 0x05, BNLE)
                            CreateByteField (LTDA, 0x06, DBNL)
                            Method (WQA4, 1, NotSerialized)
                            {
                                If ((MCSK == 0x04))
                                {
                                    If ((Arg0 == Zero))
                                    {
                                        LTID = Zero
                                        COTI = Zero
                                        LTTP = One
                                        STTN = 0x06
                                        DFST = Zero
                                        BNLE = 0x04
                                        DBNL = 0x03
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == One))
                                    {
                                        LTID = One
                                        COTI = Zero
                                        LTTP = One
                                        STTN = 0x06
                                        DFST = Zero
                                        BNLE = 0x04
                                        DBNL = 0x03
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        LTID = 0x02
                                        COTI = Zero
                                        LTTP = One
                                        STTN = 0x06
                                        DFST = Zero
                                        BNLE = 0x04
                                        DBNL = 0x03
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        If ((CNFG == One))
                                        {
                                            LTID = 0x03
                                        }
                                        Else
                                        {
                                            LTID = 0xFF
                                        }

                                        COTI = One
                                        LTTP = One
                                        STTN = 0x04
                                        DFST = Zero
                                        BNLE = 0x04
                                        DBNL = 0x03
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        LTID = 0x04
                                        COTI = 0x02
                                        LTTP = One
                                        STTN = 0x04
                                        DFST = One
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        LTID = 0x05
                                        COTI = One
                                        LTTP = Zero
                                        STTN = 0x02
                                        DFST = One
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }
                                }
                                Else
                                {
                                    If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            LTID = Zero
                                            COTI = One
                                            If ((YKBT == One))
                                            {
                                                LTTP = 0x02
                                            }
                                            Else
                                            {
                                                LTTP = Zero
                                            }

                                            STTN = 0x02
                                            DFST = One
                                            BNLE = 0x03
                                            DBNL = One
                                            Return (LTDA) /* \_SB_.GZFD.LTDA */
                                        }
                                    }
                                    ElseIf ((^^PCI0.LPC0.EC0.KBLT == One))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            LTID = Zero
                                            COTI = Zero
                                            LTTP = One
                                            STTN = 0x05
                                            DFST = Zero
                                            BNLE = 0x04
                                            DBNL = 0x03
                                            Return (LTDA) /* \_SB_.GZFD.LTDA */
                                        }
                                    }

                                    If ((Arg0 == One))
                                    {
                                        LTID = 0xFF
                                        COTI = Zero
                                        LTTP = Zero
                                        STTN = Zero
                                        DFST = Zero
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x02))
                                    {
                                        LTID = 0xFF
                                        COTI = Zero
                                        LTTP = Zero
                                        STTN = Zero
                                        DFST = Zero
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x03))
                                    {
                                        If ((MCSK == 0x02))
                                        {
                                            If ((CNFG == One))
                                            {
                                                LTID = 0x03
                                            }
                                            Else
                                            {
                                                LTID = 0xFF
                                            }
                                        }
                                        Else
                                        {
                                            LTID = 0xFF
                                        }

                                        COTI = One
                                        LTTP = Zero
                                        STTN = 0x02
                                        DFST = One
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x04))
                                    {
                                        LTID = 0x04
                                        COTI = One
                                        LTTP = Zero
                                        STTN = 0x04
                                        DFST = One
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }

                                    If ((Arg0 == 0x05))
                                    {
                                        LTID = 0xFF
                                        COTI = Zero
                                        LTTP = Zero
                                        STTN = Zero
                                        DFST = Zero
                                        BNLE = Zero
                                        DBNL = Zero
                                        Return (LTDA) /* \_SB_.GZFD.LTDA */
                                    }
                                }
                            }

                            Name (LDVD, Buffer (0x3C)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (LDVD, Zero, LDVM)
                            CreateByteField (LDVD, 0x04, LDVF)
                            CreateByteField (LDVD, 0x05, LDVS)
                            CreateByteField (LDVD, 0x06, LDMS)
                            CreateByteField (LDVD, 0x07, LDMR)
                            CreateDWordField (LDVD, 0x08, LDVL)
                            CreateWordField (LDVD, 0x0C, LDF0)
                            CreateWordField (LDVD, 0x0E, LDF1)
                            CreateWordField (LDVD, 0x10, LDF2)
                            CreateWordField (LDVD, 0x12, LDF3)
                            CreateWordField (LDVD, 0x14, LDF4)
                            CreateWordField (LDVD, 0x16, LDF5)
                            CreateWordField (LDVD, 0x18, LDF6)
                            CreateWordField (LDVD, 0x1A, LDF7)
                            CreateWordField (LDVD, 0x1C, LDF8)
                            CreateWordField (LDVD, 0x1E, LDF9)
                            CreateDWordField (LDVD, 0x20, LDP1)
                            CreateDWordField (LDVD, 0x24, LDP2)
                            CreateDWordField (LDVD, 0x28, LDPP)
                            CreateDWordField (LDVD, 0x2C, LDPL)
                            CreateDWordField (LDVD, 0x30, LDPB)
                            CreateDWordField (LDVD, 0x34, LDCP)
                            CreateByteField (LDVD, 0x38, LDTC)
                            CreateByteField (LDVD, 0x39, LDTL)
                            CreateWordField (LDVD, 0x3A, LDRV)
                            Method (WQA5, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    Local0 = SFTW (Zero)
                                    LDVM = One
                                    LDVF = Zero
                                    LDVS = 0x03
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDPP = 0x33
                                    LDPL = Zero
                                    LDTC = 0x5A
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == One))
                                {
                                    Local0 = SFTW (Zero)
                                    LDVM = One
                                    LDVF = Zero
                                    LDVS = Zero
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDPP = 0x33
                                    LDPL = Zero
                                    LDTC = 0x5A
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Local0 = SFTW (One)
                                    LDVM = One
                                    LDVF = One
                                    LDVS = 0x04
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDPP = 0x33
                                    LDPL = Zero
                                    LDTC = 0x5A
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == 0x03))
                                {
                                    Local0 = SFTW (0x04)
                                    LDVM = 0x02
                                    LDVF = Zero
                                    LDVS = 0x03
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPP = 0x41
                                    LDPL = Zero
                                    LDTC = 0x5A
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == 0x04))
                                {
                                    Local0 = SFTW (0x04)
                                    LDVM = 0x02
                                    LDVF = Zero
                                    LDVS = Zero
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPP = 0x41
                                    LDPL = Zero
                                    LDTC = 0x5A
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == 0x05))
                                {
                                    Local0 = SFTW (0x05)
                                    LDVM = 0x02
                                    LDVF = One
                                    LDVS = 0x04
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPP = 0x41
                                    LDPL = Zero
                                    LDTC = 0x5A
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == 0x06))
                                {
                                    Local0 = SFTW (0x02)
                                    LDVM = 0x03
                                    LDVF = Zero
                                    LDVS = 0x03
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPP = 0x5A
                                    LDPL = Zero
                                    LDTC = 0x64
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == 0x07))
                                {
                                    Local0 = SFTW (0x02)
                                    LDVM = 0x03
                                    LDVF = Zero
                                    LDVS = Zero
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPP = 0x5A
                                    LDPL = Zero
                                    LDTC = 0x64
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }

                                If ((Arg0 == 0x08))
                                {
                                    Local0 = SFTW (0x03)
                                    LDVM = 0x03
                                    LDVF = One
                                    LDVS = 0x04
                                    LDMS = DerefOf (Local0 [0x11])
                                    LDMR = DerefOf (Local0 [0x10])
                                    LDVL = 0x0A
                                    LDF0 = DerefOf (Local0 [Zero])
                                    LDF1 = DerefOf (Local0 [One])
                                    LDF2 = DerefOf (Local0 [0x02])
                                    LDF3 = DerefOf (Local0 [0x03])
                                    LDF4 = DerefOf (Local0 [0x04])
                                    LDF5 = DerefOf (Local0 [0x05])
                                    LDF6 = DerefOf (Local0 [0x06])
                                    LDF7 = DerefOf (Local0 [0x07])
                                    LDF8 = DerefOf (Local0 [0x08])
                                    LDF9 = DerefOf (Local0 [0x09])
                                    LDP1 = DerefOf (Local0 [0x0C])
                                    LDP2 = DerefOf (Local0 [0x0D])
                                    LDPP = 0x5A
                                    LDPL = Zero
                                    LDTC = 0x64
                                    LDPB = DerefOf (Local0 [0x0E])
                                    LDCP = DerefOf (Local0 [0x0F])
                                    LDTL = 0x57
                                    Return (LDVD) /* \_SB_.GZFD.LDVD */
                                }
                            }

                            Name (COC0, Buffer (0x28)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (COC0, Zero, CMOD)
                            CreateByteField (COC0, One, CTP1)
                            CreateWordField (COC0, 0x02, CRES)
                            CreateDWordField (COC0, 0x04, CTUN)
                            CreateDWordField (COC0, 0x08, CDEF)
                            CreateDWordField (COC0, 0x0C, CVAL)
                            CreateDWordField (COC0, 0x10, CMIN)
                            CreateDWordField (COC0, 0x14, CMAX)
                            CreateDWordField (COC0, 0x18, CSCA)
                            CreateDWordField (COC0, 0x1C, CORI)
                            CreateDWordField (COC0, 0x20, CNOC)
                            CreateDWordField (COC0, 0x24, CINT)
                            Method (WQA6, 1, NotSerialized)
                            {
                                If ((Arg0 == Zero))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4401
                                    CDEF = 0x40E00000
                                    Divide (PBOS, 0x64, Local1, Local0)
                                    CVAL = FTOI (Local0, Zero)
                                    CMIN = 0x3F800000
                                    CMAX = 0x41200000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }

                                If ((Arg0 == One))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4402
                                    CDEF = 0x43480000
                                    CVAL = FTOI (MCBC, Zero)
                                    CMIN = Zero
                                    CMAX = 0x43480000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    CMOD = Zero
                                    CTP1 = One
                                    CTUN = 0x414D4403
                                    CDEF = 0xC0A00000
                                    CVAL = FTOI (CCOM, CBCS)
                                    CMIN = 0xC1F00000
                                    CMAX = 0x41F00000
                                    CSCA = 0x3F800000
                                    CORI = One
                                    CNOC = 0x04
                                    CINT = 0xC8
                                    Return (COC0) /* \_SB_.GZFD.COC0 */
                                }
                            }

                            Method (HTPE, 0, NotSerialized)
                            {
                                If (((DSMF != 0x03) && (DSMF != 0x04)))
                                {
                                    Return (Zero)
                                }

                                ^^PCI0.GPP0.PEGP.CUMA = Zero
                                Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                ^^PCI0.LPC0.EC0.WEJF (0x02, Zero)
                                Sleep (0x64)
                            }

                            Method (HTPL, 0, NotSerialized)
                            {
                                If (((DSMF != 0x03) && (DSMF != 0x04)))
                                {
                                    Return (Zero)
                                }

                                If ((S4FG == One))
                                {
                                    S4FG = Zero
                                    Return (Zero)
                                }

                                IGPM = ^^PCI0.LPC0.EC0.REJF (One)
                                If ((DGDO == One))
                                {
                                    If (((IGPM == One) && (^^PCI0.GPP0.GSTA () == Zero)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x02, Zero)
                                        Notify (^^PCI0.GPP0.PEGP, 0x03) // Eject Request
                                        ^^PCI0.GPP0.PEGP.CUMA = One
                                        Return (One)
                                    }
                                    ElseIf ((((IGPM == 0x02) && (^^PCI0.GPP0.GSTA () == Zero)) && (
                                        ^^PCI0.LPC0.EC0.ACTY () != One)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x02, Zero)
                                        Notify (^^PCI0.GPP0.PEGP, 0x03) // Eject Request
                                        ^^PCI0.GPP0.PEGP.CUMA = One
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((DGDO == Zero))
                                {
                                    If (((IGPM == Zero) && (^^PCI0.GPP0.GSTA () == Zero)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x02, Zero)
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        ^^PCI0.GPP0.PEGP.CUMA = Zero
                                        Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                        Return (One)
                                    }

                                    If ((((IGPM == 0x02) && (^^PCI0.GPP0.GSTA () == Zero)) && (^^PCI0.LPC0.EC0.ACTY () == One)))
                                    {
                                        ^^PCI0.LPC0.EC0.WEJF (0x02, Zero)
                                        ^^PCI0.LPC0.EC0.WEJF (0x03, Zero)
                                        ^^PCI0.GPP0.PEGP.CUMA = Zero
                                        ^^PCI0.GPP0.SGPC (One)
                                        ^^PCI0.GPP0.CMDR = 0x06
                                        ^^PCI0.GPP0.D0ST = Zero
                                        ^^PCI0.GPP0.PEGP.SSSV = ^^PCI0.DSSV /* External reference */
                                        Sleep (0x64)
                                        Notify (^^PCI0.GPP0.PEGP, Zero) // Bus Check
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (WMAA, 3, NotSerialized)
                            {
                                If ((Arg1 == 0x04))
                                {
                                    If ((GOCC == One))
                                    {
                                        Return (0x05)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x0B))
                                {
                                    Return (0x0E)
                                }

                                If ((Arg1 == 0x0C))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0D))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x77)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x76)
                                    }
                                }

                                If ((Arg1 == 0x0E))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0F))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x10))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x12))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x13))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x14))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.FCST & One))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x15))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x16))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x78)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x79)
                                    }
                                }

                                If ((Arg1 == 0x17))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GDST & 0x02))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x18))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x19))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x7B)
                                    }
                                    Else
                                    {
                                        ^^PCI0.LPC0.EC0.NCMD (0x59, 0x7A)
                                    }
                                }

                                If ((Arg1 == 0x1A))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GDST & 0x04))
                                            {
                                                Release (^^PCI0.LPC0.EC0.LFCM)
                                                Return (One)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x1E))
                                {
                                    Local1 = Zero
                                    Local1 |= 0xF000
                                    Local1 |= 0x04
                                    Local1 |= 0x10
                                    Local1 |= 0x40
                                    Return (Local1)
                                }

                                If ((Arg1 == 0x1F))
                                {
                                    Local1 = 0x0C80
                                    Local2 = 0x0C80
                                    Local1 |= (Local2 << 0x10)
                                    Return (Local1)
                                }

                                If ((Arg1 == 0x20))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x21))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x22))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x23))
                                {
                                    If ((^^PCI0.LPC0.EC0.KBLT == One))
                                    {
                                        Return (0x04)
                                    }
                                    Else
                                    {
                                        Return (0xF0)
                                    }
                                }

                                If ((Arg1 == 0x24))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (Arg2) == One))
                                            {
                                                ^^PCI0.LPC0.EC0.KLOR = One
                                                ^^PCI0.LPC0.EC0.KLCH = One
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.KLOR = Zero
                                                ^^PCI0.LPC0.EC0.KLCH = One
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x25))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = ^^PCI0.LPC0.EC0.KLOR /* \_SB_.PCI0.LPC0.EC0_.KLOR */
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x26))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x27))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x28))
                                {
                                    Return (0x02)
                                }

                                If ((Arg1 == 0x29))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.MSMF == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.MSMF == Zero))
                                            {
                                                Local1 = Zero
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2A))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        SMBB = 0x26
                                        SMBA = 0xCA
                                    }
                                    ElseIf ((ToInteger (Arg2) == Zero))
                                    {
                                        SMBB = 0x25
                                        SMBA = 0xCA
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x2B))
                                {
                                    Return (0x05)
                                }

                                If ((Arg1 == 0x2C))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((ToInteger (Arg2) == One))
                                            {
                                                If ((^^PCI0.LPC0.EC0.SPMO != 0x02))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                ^^PCI0.LPC0.EC0.CTMD = Zero
                                                ^^PCI0.LPC0.EC0.SPMO = 0x02
                                                If ((^^PCI0.LPC0.EC0.ADPT == Zero))
                                                {
                                                    FNQS (0x07)
                                                }
                                                Else
                                                {
                                                    FNQS (0x06)
                                                }

                                                If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                                {
                                                    EATL = One
                                                }
                                                Else
                                                {
                                                    EATL = Zero
                                                }

                                                LTGP = Zero
                                                ^^PCI0.LPC0.EC0.PABD = Zero
                                                DTGP = Zero
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0x02))
                                            {
                                                If ((^^PCI0.LPC0.EC0.SPMO != Zero))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                }

                                                ^^PCI0.LPC0.EC0.CTMD = Zero
                                                ^^PCI0.LPC0.EC0.SPMO = Zero
                                                If ((^^PCI0.LPC0.EC0.ADPT == Zero))
                                                {
                                                    FNQS (0x05)
                                                }
                                                ElseIf ((DBFS == One))
                                                {
                                                    FNQS (0x04)
                                                }
                                                Else
                                                {
                                                    FNQS (0x03)
                                                }

                                                EATL = Zero
                                                LTGP = Zero
                                                ^^PCI0.LPC0.EC0.PABD = Zero
                                                DTGP = Zero
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0x03))
                                            {
                                                If (((^^PCI0.LPC0.EC0.ADPT == Zero) || (^^PCI0.LPC0.EC0.ACTY () == 0x02)))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO != Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                    FNQS (0x05)
                                                    LTGP = Zero
                                                    ^^PCI0.LPC0.EC0.PABD = One
                                                    DTGP = Zero
                                                    EATL = Zero
                                                }
                                                Else
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO != One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    If ((^^PCI0.LPC0.EC0.CTMD == One))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.SPMO = One
                                                    If ((DBFS == One))
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (One)
                                                    }

                                                    LTGP = One
                                                    ^^PCI0.LPC0.EC0.PABD = Zero
                                                    DTGP = One
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                }
                                            }
                                            ElseIf ((ToInteger (Arg2) == 0xFF))
                                            {
                                                If (((^^PCI0.LPC0.EC0.ADPT == Zero) || (^^PCI0.LPC0.EC0.ACTY () == 0x02)))
                                                {
                                                    If ((^^PCI0.LPC0.EC0.SPMO != Zero))
                                                    {
                                                        ^^PCI0.LPC0.EC0.SSFM = One
                                                    }

                                                    ^^PCI0.LPC0.EC0.SPMO = Zero
                                                    FNQS (0x05)
                                                    LTGP = Zero
                                                    ^^PCI0.LPC0.EC0.CAC1 = One
                                                    DTGP = Zero
                                                    ^^PCI0.LPC0.EC0.CTMD = Zero
                                                }
                                                Else
                                                {
                                                    ^^PCI0.LPC0.EC0.SSFM = One
                                                    If ((DBFS == One))
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (One)
                                                    }

                                                    LTGP = One
                                                    ^^PCI0.LPC0.EC0.CAC1 = Zero
                                                    DTGP = One
                                                    ^^PCI0.LPC0.EC0.CTMD = One
                                                }

                                                EATL = Zero
                                            }

                                            INSM = Zero
                                            Sleep (0x05)
                                            Notify (GZFD, 0xE7) // Hardware-Specific
                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                            Sleep (0x05)
                                            Notify (^^PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2D))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                If ((^^PCI0.LPC0.EC0.PABD == One))
                                                {
                                                    Local1 = 0x03
                                                }
                                                ElseIf ((^^PCI0.LPC0.EC0.CAC1 == One))
                                                {
                                                    Local1 = 0xFF
                                                }
                                                Else
                                                {
                                                    Local1 = 0x02
                                                }
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                Local1 = 0xFF
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2E))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.GSFS == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.GSFS == Zero))
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x2F))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x30))
                                {
                                    Return (0x64)
                                }

                                If ((Arg1 == 0x31))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x32))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        If ((M009 (0x90) == One))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x33))
                                {
                                    If ((PANT & 0x02))
                                    {
                                        If ((ToInteger (Arg2) == One))
                                        {
                                            WECM (0x7F, One)
                                            M010 (0x90, One)
                                        }
                                        Else
                                        {
                                            WECM (0x7F, Zero)
                                            M010 (0x90, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        WECM (0x7F, Zero)
                                        M010 (0x90, Zero)
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x34))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.LCON = ToInteger (Arg2)
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Zero)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x35))
                                {
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x36))
                                {
                                    Local0 = Zero
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.RS8F == One) || (^^PCI0.LPC0.EC0.COD5 == One)))
                                            {
                                                Local0 = One
                                            }

                                            RDOC = Zero
                                            ^^PCI0.LPC0.EC0.RS8F = Zero
                                            ^^PCI0.LPC0.EC0.COD5 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Local0)
                                }

                                If ((Arg1 == 0x37))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Local1 = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg1 == 0x39))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                        {
                                            INSM = ToInteger (Arg2)
                                            If ((INSM == Zero))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8B, Zero)
                                                If ((DBFS == One))
                                                {
                                                    FNQS (0x04)
                                                }
                                                Else
                                                {
                                                    FNQS (0x03)
                                                }

                                                BCTP = Zero
                                                DTGP = Zero
                                                LTGP = Zero
                                            }
                                            ElseIf ((INSM == One))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                FNQS (0x02)
                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x02))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x10)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x03))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x11)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x0D)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x11)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x0D)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x04))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x0F)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x11)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If ((GTYP == One))
                                                    {
                                                        FNQS (0x0D)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x10)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x05))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x0F)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If ((GTYP == One))
                                                    {
                                                        FNQS (0x0E)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x0F)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            ElseIf ((INSM == 0x06))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8A, Zero)
                                                If ((MCSK == 0x02))
                                                {
                                                    If (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x0E)
                                                    }
                                                }
                                                ElseIf ((MCSK == One))
                                                {
                                                    If ((GTYP == One))
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                    ElseIf (((GTYP == 0x07) || (GTYP == 0x02)))
                                                    {
                                                        FNQS (0x02)
                                                    }
                                                    Else
                                                    {
                                                        FNQS (0x0E)
                                                    }
                                                }

                                                BCTP = One
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8B, Zero)
                                                If ((DBFS == One))
                                                {
                                                    FNQS (0x04)
                                                }
                                                Else
                                                {
                                                    FNQS (0x03)
                                                }

                                                BCTP = Zero
                                                DTGP = One
                                                LTGP = Zero
                                            }

                                            Sleep (0x05)
                                            Notify (NPCF, 0xC0) // Hardware-Specific
                                        }

                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x3A))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local1 = INSM /* \INSM */
                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3B))
                                {
                                    Return (One)
                                }

                                If ((Arg1 == 0x3C))
                                {
                                    Name (CCFQ, Buffer (0x04)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateWordField (CCFQ, Zero, CCF1)
                                    CreateWordField (CCFQ, 0x02, CCF2)
                                    Local1 = CMSP /* \CMSP */
                                    Local2 = CMSP /* \CMSP */
                                    If ((COCC == Zero))
                                    {
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }
                                    ElseIf (((COCC == One) && (CPTY == 0x09)))
                                    {
                                        Local1 += 0xC8
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }
                                    Else
                                    {
                                        CCF1 = Local1
                                        CCF2 = Local2
                                    }

                                    Return (CCFQ) /* \_SB_.GZFD.WMAA.CCFQ */
                                }

                                If ((Arg1 == 0x3D))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local1 = 0x07
                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3E))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                        {
                                            Local1 = One
                                        }
                                        Else
                                        {
                                            Local1 = Zero
                                        }

                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x3F))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (0x03)
                                    }
                                }

                                If ((Arg1 == 0x40))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (^^PCI0.LPC0.EC0.REJF (One))
                                    }
                                }

                                If ((Arg1 == 0x41))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Local0 = ToInteger (Arg2)
                                        If (((Local0 & 0x03) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.WEJF (One, Zero)
                                        }
                                        ElseIf (((Local0 & 0x03) == One))
                                        {
                                            ^^PCI0.LPC0.EC0.WEJF (One, One)
                                        }
                                        ElseIf (((Local0 & 0x03) == 0x02))
                                        {
                                            ^^PCI0.LPC0.EC0.WEJF (One, 0x02)
                                        }

                                        Local1 = HTPL ()
                                        Return (Local1)
                                    }
                                }

                                If ((Arg1 == 0x42))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        DGDO = ToInteger (Arg2)
                                        HTPL ()
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x43))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        Return (Zero)
                                    }
                                }

                                Name (VSLF, Package (0x1E)
                                {
                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2560&SUBSYS_3AFE17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2560&SUBSYS_3AFF17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24E0&SUBSYS_3B0017AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24E0&SUBSYS_3B0117AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_25E2&SUBSYS_3B0217AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_25E2&SUBSYS_3B0317AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_25E0&SUBSYS_3B0417AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_25E0&SUBSYS_3B0517AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2560&SUBSYS_3B0617AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2560&SUBSYS_3B0717AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24E0&SUBSYS_3B0817AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24E0&SUBSYS_3B0917AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_25E0&SUBSYS_3B0A17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_25E0&SUBSYS_3B0B17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2560&SUBSYS_3B0C17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2560&SUBSYS_3B0D17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24E0&SUBSYS_3B0E17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24E0&SUBSYS_3B0F17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2460&SUBSYS_3B1017AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2460&SUBSYS_3B1117AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24DD&SUBSYS_3B2317AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24DD&SUBSYS_3B2417AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24DD&SUBSYS_3B2517AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24DD&SUBSYS_3B2617AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24DD&SUBSYS_3B2A17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_1002&DEV_73DF&SUBSYS_3B2117AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_25E0&SUBSYS_3B2C17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_2560&SUBSYS_3B2B17AA"
                                    }, 

                                    Package (0x01)
                                    {
                                        "PCIVEN_10DE&DEV_24E0&SUBSYS_3B2D17AA"
                                    }, 

                                    Package (0x02)
                                    {
                                        "unkonw device", 
                                        "0"
                                    }
                                })
                                If ((Arg1 == 0x44))
                                {
                                    Name (IBUF, Buffer (0x26){})
                                    If ((SGID == 0x3AFE17AA))
                                    {
                                        Local5 = Zero
                                    }
                                    ElseIf ((SGID == 0x3AFF17AA))
                                    {
                                        Local5 = One
                                    }
                                    ElseIf ((SGID == 0x3B0017AA))
                                    {
                                        Local5 = 0x02
                                    }
                                    ElseIf ((SGID == 0x3B0117AA))
                                    {
                                        Local5 = 0x03
                                    }
                                    ElseIf ((SGID == 0x3B0217AA))
                                    {
                                        Local5 = 0x04
                                    }
                                    ElseIf ((SGID == 0x3B0317AA))
                                    {
                                        Local5 = 0x05
                                    }
                                    ElseIf ((SGID == 0x3B0417AA))
                                    {
                                        Local5 = 0x06
                                    }
                                    ElseIf ((SGID == 0x3B0517AA))
                                    {
                                        Local5 = 0x07
                                    }
                                    ElseIf ((SGID == 0x3B0617AA))
                                    {
                                        Local5 = 0x08
                                    }
                                    ElseIf ((SGID == 0x3B0717AA))
                                    {
                                        Local5 = 0x09
                                    }
                                    ElseIf ((SGID == 0x3B0817AA))
                                    {
                                        Local5 = 0x0A
                                    }
                                    ElseIf ((SGID == 0x3B0917AA))
                                    {
                                        Local5 = 0x0B
                                    }
                                    ElseIf ((SGID == 0x3B0A17AA))
                                    {
                                        Local5 = 0x0C
                                    }
                                    ElseIf ((SGID == 0x3B0B17AA))
                                    {
                                        Local5 = 0x0D
                                    }
                                    ElseIf ((SGID == 0x3B0C17AA))
                                    {
                                        Local5 = 0x0E
                                    }
                                    ElseIf ((SGID == 0x3B0D17AA))
                                    {
                                        Local5 = 0x0F
                                    }
                                    ElseIf ((SGID == 0x3B0E17AA))
                                    {
                                        Local5 = 0x10
                                    }
                                    ElseIf ((SGID == 0x3B0F17AA))
                                    {
                                        Local5 = 0x11
                                    }
                                    ElseIf ((SGID == 0x3B1017AA))
                                    {
                                        Local5 = 0x12
                                    }
                                    ElseIf ((SGID == 0x3B1117AA))
                                    {
                                        Local5 = 0x13
                                    }
                                    ElseIf ((SGID == 0x3B2317AA))
                                    {
                                        Local5 = 0x14
                                    }
                                    ElseIf ((SGID == 0x3B2417AA))
                                    {
                                        Local5 = 0x15
                                    }
                                    ElseIf ((SGID == 0x3B2517AA))
                                    {
                                        Local5 = 0x16
                                    }
                                    ElseIf ((SGID == 0x3B2617AA))
                                    {
                                        Local5 = 0x17
                                    }
                                    ElseIf ((SGID == 0x3B2A17AA))
                                    {
                                        Local5 = 0x18
                                    }
                                    ElseIf ((SGID == 0x3B2117AA))
                                    {
                                        Local5 = 0x19
                                    }
                                    ElseIf ((SGID == 0x3B2C17AA))
                                    {
                                        Local5 = 0x1A
                                    }
                                    ElseIf ((SGID == 0x3B2B17AA))
                                    {
                                        Local5 = 0x1B
                                    }
                                    ElseIf ((SGID == 0x3B2D17AA))
                                    {
                                        Local5 = 0x1C
                                    }
                                    Else
                                    {
                                        Local5 = 0x1D
                                    }

                                    IBUF = DerefOf (VSLF [Local5])
                                    Return (IBUF) /* \_SB_.GZFD.WMAA.IBUF */
                                }
                            }

                            Method (WMB2, 3, NotSerialized)
                            {
                                If ((Arg1 == One))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (^^PCI0.LPC0.EC0.FNST) /* \_SB_.PCI0.LPC0.EC0_.FNST */
                                        }
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((ToInteger (Arg2) == One))
                                        {
                                            ^^PCI0.LPC0.EC0.FNST = One
                                        }
                                        Else
                                        {
                                            ^^PCI0.LPC0.EC0.FNST = Zero
                                        }

                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }
                                }

                                If ((Arg1 == 0x06))
                                {
                                    CreateByteField (Arg2, Zero, SFMD)
                                    CreateByteField (Arg2, One, SFID)
                                    CreateDWordField (Arg2, 0x02, SFST)
                                    CreateByteField (Arg2, 0x06, FSS0)
                                    CreateByteField (Arg2, 0x08, FSS1)
                                    CreateByteField (Arg2, 0x0A, FSS2)
                                    CreateByteField (Arg2, 0x0C, FSS3)
                                    CreateByteField (Arg2, 0x0E, FSS4)
                                    CreateByteField (Arg2, 0x10, FSS5)
                                    CreateByteField (Arg2, 0x12, FSS6)
                                    CreateByteField (Arg2, 0x14, FSS7)
                                    CreateByteField (Arg2, 0x16, FSS8)
                                    CreateByteField (Arg2, 0x18, FSS9)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((ToInteger (SFMD) == One))
                                        {
                                            ^^PCI0.LPC0.EC0.F9F0 = FSS0 /* \_SB_.GZFD.WMB2.FSS0 */
                                            ^^PCI0.LPC0.EC0.F9F1 = FSS1 /* \_SB_.GZFD.WMB2.FSS1 */
                                            ^^PCI0.LPC0.EC0.F9F2 = FSS2 /* \_SB_.GZFD.WMB2.FSS2 */
                                            ^^PCI0.LPC0.EC0.F9F3 = FSS3 /* \_SB_.GZFD.WMB2.FSS3 */
                                            ^^PCI0.LPC0.EC0.F9F4 = FSS4 /* \_SB_.GZFD.WMB2.FSS4 */
                                            ^^PCI0.LPC0.EC0.F9F5 = FSS5 /* \_SB_.GZFD.WMB2.FSS5 */
                                            ^^PCI0.LPC0.EC0.F9F6 = FSS6 /* \_SB_.GZFD.WMB2.FSS6 */
                                            ^^PCI0.LPC0.EC0.F9F7 = FSS7 /* \_SB_.GZFD.WMB2.FSS7 */
                                            ^^PCI0.LPC0.EC0.F9F8 = FSS8 /* \_SB_.GZFD.WMB2.FSS8 */
                                            ^^PCI0.LPC0.EC0.F9F9 = FSS9 /* \_SB_.GZFD.WMB2.FSS9 */
                                            ^^PCI0.LPC0.EC0.F9FA = SFMD /* \_SB_.GZFD.WMB2.SFMD */
                                        }
                                        ElseIf ((ToInteger (SFMD) == 0x02))
                                        {
                                            ^^PCI0.LPC0.EC0.F9F0 = FSS0 /* \_SB_.GZFD.WMB2.FSS0 */
                                            ^^PCI0.LPC0.EC0.F9F1 = FSS1 /* \_SB_.GZFD.WMB2.FSS1 */
                                            ^^PCI0.LPC0.EC0.F9F2 = FSS2 /* \_SB_.GZFD.WMB2.FSS2 */
                                            ^^PCI0.LPC0.EC0.F9F3 = FSS3 /* \_SB_.GZFD.WMB2.FSS3 */
                                            ^^PCI0.LPC0.EC0.F9F4 = FSS4 /* \_SB_.GZFD.WMB2.FSS4 */
                                            ^^PCI0.LPC0.EC0.F9F5 = FSS5 /* \_SB_.GZFD.WMB2.FSS5 */
                                            ^^PCI0.LPC0.EC0.F9F6 = FSS6 /* \_SB_.GZFD.WMB2.FSS6 */
                                            ^^PCI0.LPC0.EC0.F9F7 = FSS7 /* \_SB_.GZFD.WMB2.FSS7 */
                                            ^^PCI0.LPC0.EC0.F9F8 = FSS8 /* \_SB_.GZFD.WMB2.FSS8 */
                                            ^^PCI0.LPC0.EC0.F9F9 = FSS9 /* \_SB_.GZFD.WMB2.FSS9 */
                                            ^^PCI0.LPC0.EC0.F9FA = SFMD /* \_SB_.GZFD.WMB2.SFMD */
                                        }
                                        ElseIf ((ToInteger (SFMD) == 0x03))
                                        {
                                            ^^PCI0.LPC0.EC0.F9F0 = FSS0 /* \_SB_.GZFD.WMB2.FSS0 */
                                            ^^PCI0.LPC0.EC0.F9F1 = FSS1 /* \_SB_.GZFD.WMB2.FSS1 */
                                            ^^PCI0.LPC0.EC0.F9F2 = FSS2 /* \_SB_.GZFD.WMB2.FSS2 */
                                            ^^PCI0.LPC0.EC0.F9F3 = FSS3 /* \_SB_.GZFD.WMB2.FSS3 */
                                            ^^PCI0.LPC0.EC0.F9F4 = FSS4 /* \_SB_.GZFD.WMB2.FSS4 */
                                            ^^PCI0.LPC0.EC0.F9F5 = FSS5 /* \_SB_.GZFD.WMB2.FSS5 */
                                            ^^PCI0.LPC0.EC0.F9F6 = FSS6 /* \_SB_.GZFD.WMB2.FSS6 */
                                            ^^PCI0.LPC0.EC0.F9F7 = FSS7 /* \_SB_.GZFD.WMB2.FSS7 */
                                            ^^PCI0.LPC0.EC0.F9F8 = FSS8 /* \_SB_.GZFD.WMB2.FSS8 */
                                            ^^PCI0.LPC0.EC0.F9F9 = FSS9 /* \_SB_.GZFD.WMB2.FSS9 */
                                            ^^PCI0.LPC0.EC0.F9FA = SFMD /* \_SB_.GZFD.WMB2.SFMD */
                                        }

                                        ^^PCI0.LPC0.EC0.NCMD (0x8C, Zero)
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }
                                }

                                If ((Arg1 == 0x07))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        Local0 = (^^PCI0.LPC0.EC0.FA2S * 0x64)
                                        Return (Local0)
                                    }
                                    ElseIf ((ToInteger (Arg2) == Zero))
                                    {
                                        Local0 = (^^PCI0.LPC0.EC0.FANS * 0x64)
                                        Return (Local0)
                                    }

                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                }

                                If ((Arg1 == 0x08))
                                {
                                    If ((ToInteger (Arg2) == 0x03))
                                    {
                                        Local1 = ^^PCI0.LPC0.EC0.CPUT /* \_SB_.PCI0.LPC0.EC0_.CPUT */
                                        Return (Local1)
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0x04))
                                    {
                                        Local1 = ^^PCI0.LPC0.EC0.GPUT /* \_SB_.PCI0.LPC0.EC0_.GPUT */
                                        Return (Local1)
                                    }

                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                }
                            }

                            OperationRegion (CPUP, SystemMemory, 0xFE0B06B0, 0x10)
                            Field (CPUP, ByteAcc, NoLock, Preserve)
                            {
                                CPP1,   16, 
                                CPP2,   16, 
                                CPP3,   16, 
                                CPP4,   16
                            }

                            Method (WMB3, 3, NotSerialized)
                            {
                                Name (XX11, Buffer (0x07){})
                                CreateWordField (XX11, Zero, SSZE)
                                CreateByteField (XX11, 0x02, SMUF)
                                CreateDWordField (XX11, 0x03, SMUD)
                                SSZE = 0x07
                                If ((Arg1 == One))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ADPT == One))
                                            {
                                                If ((ToInteger (Arg2) == One))
                                                {
                                                    Return (Zero)
                                                }
                                                ElseIf ((COCC == One))
                                                {
                                                    Return (0x12)
                                                }
                                                Else
                                                {
                                                    Return (0x10)
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    CreateByteField (Arg2, Zero, COCM)
                                    CreateByteField (Arg2, One, COCS)
                                    If ((ToInteger (COCM) != One))
                                    {
                                        If ((ToInteger (COCS) == One))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ADPT == One))
                                            {
                                                SMBB = 0xD1
                                                SMBA = 0xCA
                                            }
                                        }
                                        Else
                                        {
                                            SMBB = 0xD2
                                            SMBA = 0xCA
                                        }
                                    }
                                    Else
                                    {
                                        SMBB = 0xD2
                                        SMBA = 0xCA
                                    }
                                }

                                If ((Arg1 == 0x03))
                                {
                                    If ((CPP1 == Zero))
                                    {
                                        CPP1 = 0x36
                                    }

                                    Name (GCC1, Buffer (0x10)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (GCC1, Zero, STPL)
                                    CreateDWordField (GCC1, 0x04, STP1)
                                    CreateDWordField (GCC1, 0x08, MIP1)
                                    CreateDWordField (GCC1, 0x0C, MAP1)
                                    STPL = CPP1 /* \_SB_.GZFD.CPP1 */
                                    STP1 = One
                                    MIP1 = 0x1E
                                    MAP1 = 0x5F
                                    Return (GCC1) /* \_SB_.GZFD.WMB3.GCC1 */
                                }

                                If ((Arg1 == 0x04))
                                {
                                    CPP1 = ToInteger (Arg2)
                                    Local0 = CPP1 /* \_SB_.GZFD.CPP1 */
                                    Local0 *= 0x03E8
                                    SMUF = 0x07
                                    SMUD = Local0
                                    ALIB (0x0C, XX11)
                                }

                                If ((Arg1 == 0x05))
                                {
                                    If ((CPP2 == Zero))
                                    {
                                        CPP2 = 0x32
                                    }

                                    If ((MCSK == One))
                                    {
                                        CPM2 = 0x55
                                    }
                                    ElseIf ((MCSK == 0x02))
                                    {
                                        CPM2 = 0x5A
                                    }
                                    Else
                                    {
                                        CPM2 = 0x55
                                    }

                                    Name (GCC2, Buffer (0x10)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (GCC2, Zero, LTPL)
                                    CreateDWordField (GCC2, 0x04, STP2)
                                    CreateDWordField (GCC2, 0x08, MIP2)
                                    CreateDWordField (GCC2, 0x0C, MAP2)
                                    LTPL = CPP2 /* \_SB_.GZFD.CPP2 */
                                    STP2 = One
                                    MIP2 = 0x0F
                                    MAP2 = CPM2 /* \CPM2 */
                                    Return (GCC2) /* \_SB_.GZFD.WMB3.GCC2 */
                                }

                                If ((Arg1 == 0x06))
                                {
                                    CPP2 = ToInteger (Arg2)
                                    If ((DBFS == Zero))
                                    {
                                        Local0 = CPP2 /* \_SB_.GZFD.CPP2 */
                                        Local0 *= 0x03E8
                                        SMUF = 0x05
                                        SMUD = Local0
                                        ALIB (0x0C, XX11)
                                    }
                                }

                                If ((Arg1 == 0x07))
                                {
                                    Name (CDPL, Buffer (0x08)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (CDPL, Zero, DLPL)
                                    CreateDWordField (CDPL, 0x04, DSPL)
                                    DLPL = 0x32
                                    DSPL = 0x36
                                    Return (CDPL) /* \_SB_.GZFD.WMB3.CDPL */
                                }

                                If ((Arg1 == 0x08))
                                {
                                    If ((CPP3 == Zero))
                                    {
                                        CPP3 = 0x41
                                    }

                                    Name (GCC3, Buffer (0x14)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (GCC3, Zero, LTP3)
                                    CreateDWordField (GCC3, 0x04, DTP3)
                                    CreateDWordField (GCC3, 0x08, STE3)
                                    CreateDWordField (GCC3, 0x0C, MIP3)
                                    CreateDWordField (GCC3, 0x10, MAP3)
                                    LTP3 = CPP3 /* \_SB_.GZFD.CPP3 */
                                    DTP3 = 0x41
                                    STE3 = One
                                    MIP3 = 0x23
                                    MAP3 = 0x5F
                                    Return (GCC3) /* \_SB_.GZFD.WMB3.GCC3 */
                                }

                                If ((Arg1 == 0x09))
                                {
                                    CPP3 = ToInteger (Arg2)
                                    Local1 = CPP3 /* \_SB_.GZFD.CPP3 */
                                    Local1 *= 0x03E8
                                    SMUF = 0x06
                                    SMUD = Local1
                                    ALIB (0x0C, XX11)
                                }

                                If ((Arg1 == 0x0A))
                                {
                                    If ((CGTC == Zero))
                                    {
                                        CGTC = 0x5A
                                    }

                                    Name (CGTB, Buffer (0x05)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateByteField (CGTB, Zero, CTTC)
                                    CreateByteField (CGTB, One, DTTC)
                                    CreateByteField (CGTB, 0x02, CSTE)
                                    CreateByteField (CGTB, 0x03, CMIT)
                                    CreateByteField (CGTB, 0x04, CMAT)
                                    CTTC = CGTC /* \CGTC */
                                    DTTC = 0x5A
                                    CSTE = One
                                    CMIT = 0x55
                                    CMAT = 0x64
                                    Return (CGTB) /* \_SB_.GZFD.WMB3.CGTB */
                                }

                                If ((Arg1 == 0x0B))
                                {
                                    CGTC = ToInteger (Arg2)
                                    SMUF = 0x03
                                    SMUD = CGTC /* \CGTC */
                                    ALIB (0x0C, XX11)
                                }

                                If ((Arg1 == 0x0E))
                                {
                                    CreateDWordField (Arg2, Zero, LTT1)
                                    CreateDWordField (Arg2, 0x04, CNID)
                                    CreateDWordField (Arg2, 0x08, CVA1)
                                    If ((ToInteger (CNID) == 0x414D4401))
                                    {
                                        WECM (0xCC, IOTF (ToInteger (CVA1)))
                                        SMBB = 0xCF
                                        SMBA = 0xCA
                                    }
                                    ElseIf ((ToInteger (CNID) == 0x414D4402))
                                    {
                                        WECM (0xCD, IOTF (ToInteger (CVA1)))
                                        SMBB = 0xCF
                                        SMBA = 0xCA
                                    }
                                    ElseIf ((ToInteger (CNID) == 0x414D4403))
                                    {
                                        WECM (0xBE, IOT2 (ToInteger (CVA1)))
                                        WECM (0xCE, IOTF (ToInteger (CVA1)))
                                        SMBB = 0xCF
                                        SMBA = 0xCA
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0F))
                                {
                                    CreateByteField (Arg2, Zero, CTYE)
                                    If ((ToInteger (CTYE) == One))
                                    {
                                        If (((CPTY == 0x09) && (SCOC == One)))
                                        {
                                            Return (0x02)
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }

                                If ((Arg1 == 0x10))
                                {
                                    Name (CGBB, Buffer (0x14)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (CGBB, Zero, CGB1)
                                    CreateDWordField (CGBB, 0x04, CGB2)
                                    CreateDWordField (CGBB, 0x08, CGB3)
                                    CreateDWordField (CGBB, 0x0C, CGB4)
                                    CreateDWordField (CGBB, 0x10, CGB5)
                                    Local0 = SFTW (0x04)
                                    If ((CPP4 == Zero))
                                    {
                                        CPP4 = DerefOf (Local0 [0x10])
                                    }

                                    CGB1 = CPP4 /* \_SB_.GZFD.CPP4 */
                                    CGB2 = DerefOf (Local0 [0x10])
                                    CGB3 = One
                                    CGB4 = 0x0F
                                    If ((MCSK == One))
                                    {
                                        If (((GTYP == 0x05) || (GTYP == 0x06)))
                                        {
                                            Local1 = 0x32
                                        }
                                        ElseIf ((GTYP == One))
                                        {
                                            Local1 = 0x37
                                        }
                                        Else
                                        {
                                            Local1 = 0x32
                                        }
                                    }
                                    ElseIf ((MCSK == 0x02))
                                    {
                                        If (((GTYP == 0x02) || (GTYP == 0x07)))
                                        {
                                            Local1 = 0x3C
                                        }
                                        ElseIf (((GTYP == 0x05) || (GTYP == 0x06)))
                                        {
                                            Local1 = 0x3C
                                        }
                                        ElseIf ((GTYP == One))
                                        {
                                            Local1 = 0x37
                                        }
                                    }
                                    Else
                                    {
                                        Local1 = 0x32
                                    }

                                    CGB5 = Local1
                                    Return (CGBB) /* \_SB_.GZFD.WMB3.CGBB */
                                }

                                If ((Arg1 == 0x11))
                                {
                                    CPP4 = ToInteger (Arg2)
                                    If ((DBFS == One))
                                    {
                                        Local0 = CPP4 /* \_SB_.GZFD.CPP4 */
                                        Local0 *= 0x03E8
                                        SMUF = 0x05
                                        SMUD = Local0
                                        ALIB (0x0C, XX11)
                                    }
                                }
                            }

                            Method (WMB4, 3, NotSerialized)
                            {
                                OperationRegion (GPUP, SystemMemory, 0xFE0B06C0, 0x10)
                                Field (GPUP, ByteAcc, NoLock, Preserve)
                                {
                                    DTG1,   16, 
                                    CTG1,   16
                                }

                                If ((One == GTYP))
                                {
                                    CTG2 = 0x0118
                                }
                                ElseIf (((GTYP == 0x02) || (GTYP == 0x07)))
                                {
                                    CTG2 = 0xA0
                                }
                                ElseIf ((0x03 == GTYP))
                                {
                                    CTG2 = 0x0118
                                }
                                ElseIf ((0x05 == GTYP))
                                {
                                    CTG2 = 0x50
                                }
                                Else
                                {
                                    CTG2 = 0x50
                                }

                                If ((Arg1 == One))
                                {
                                    Local0 = ToInteger (Arg2)
                                    Local1 = Zero
                                    If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                    {
                                        If ((Local0 == One))
                                        {
                                            Local1 = Zero
                                        }

                                        If ((Local0 == 0x02))
                                        {
                                            Local1 = BGPS /* \BGPS */
                                        }

                                        If ((Local0 == 0x03))
                                        {
                                            Local1 = PGPS /* \PGPS */
                                        }

                                        If ((Local0 == 0xFF))
                                        {
                                            Local1 = MGPS /* \MGPS */
                                        }
                                    }
                                    Else
                                    {
                                        Local1 = Zero
                                    }

                                    Return (Local1)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    CreateByteField (Arg2, Zero, GGOM)
                                    CreateByteField (Arg2, One, GOCS)
                                    If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                    {
                                        If ((GGOM == One))
                                        {
                                            QGPS = Zero
                                        }

                                        If ((GGOM == 0x02))
                                        {
                                            If ((GOCS == One))
                                            {
                                                BGPS = 0x11
                                            }
                                            Else
                                            {
                                                BGPS = 0x10
                                            }
                                        }

                                        If ((GGOM == 0x03))
                                        {
                                            If ((GOCS == One))
                                            {
                                                PGPS = 0x11
                                            }
                                            Else
                                            {
                                                PGPS = 0x10
                                            }
                                        }

                                        If ((GGOM == 0xFF))
                                        {
                                            If ((GOCS == One))
                                            {
                                                MGPS = 0x12
                                            }
                                            Else
                                            {
                                                MGPS = 0x10
                                            }
                                        }
                                    }

                                    Return (Zero)
                                }

                                If ((Arg1 == 0x03))
                                {
                                    If ((DTG1 == Zero))
                                    {
                                        DTG1 = 0x78
                                    }

                                    Name (DTGG, Buffer (0x10)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (DTGG, Zero, PPAB)
                                    CreateDWordField (DTGG, 0x04, STP3)
                                    CreateDWordField (DTGG, 0x08, NPPL)
                                    CreateDWordField (DTGG, 0x0C, XPPL)
                                    Divide (DTG1, 0x08, Local1, Local0)
                                    PPAB = Local0
                                    STP3 = 0x05
                                    NPPL = Zero
                                    XPPL = 0x0F
                                    Return (DTGG) /* \_SB_.GZFD.WMB4.DTGG */
                                }

                                If ((Arg1 == 0x04))
                                {
                                    Local0 = ToInteger (Arg2)
                                    DTG1 = (Local0 * 0x08)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        ^^PCI0.LPC0.EC0.GPAB = Local0
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }

                                If ((Arg1 == 0x05))
                                {
                                    If ((CTG1 == Zero))
                                    {
                                        CTG1 = CTG2 /* \CTG2 */
                                    }

                                    Name (CTGG, Buffer (0x10)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (CTGG, Zero, PPA1)
                                    CreateDWordField (CTGG, 0x04, STP4)
                                    CreateDWordField (CTGG, 0x08, NPP1)
                                    CreateDWordField (CTGG, 0x0C, XPP1)
                                    Divide (CTG2, 0x08, Local1, Local0)
                                    Divide (CTG1, 0x08, Local3, Local2)
                                    PPA1 = Local2
                                    STP4 = 0x05
                                    NPP1 = Zero
                                    XPP1 = Local0
                                    Return (CTGG) /* \_SB_.GZFD.WMB4.CTGG */
                                }

                                If ((Arg1 == 0x06))
                                {
                                    Local0 = ToInteger (Arg2)
                                    CTG1 = (Local0 * 0x08)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        ^^PCI0.LPC0.EC0.TGPP = Local0
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }

                                If ((Arg1 == 0x07))
                                {
                                    Name (GDPL, Buffer (0x08)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateDWordField (GDPL, Zero, GLPL)
                                    CreateDWordField (GDPL, 0x04, GSPL)
                                    GLPL = 0x0F
                                    Divide (CTG2, 0x08, Local5, CTG2) /* \CTG2 */
                                    GSPL = CTG2 /* \CTG2 */
                                    Return (GDPL) /* \_SB_.GZFD.WMB4.GDPL */
                                }

                                If ((Arg1 == 0x08))
                                {
                                    Name (GGTB, Buffer (0x05)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateByteField (GGTB, Zero, GTTC)
                                    CreateByteField (GGTB, One, GDTT)
                                    CreateByteField (GGTB, 0x02, GSTE)
                                    CreateByteField (GGTB, 0x03, GMIT)
                                    CreateByteField (GGTB, 0x04, GMAT)
                                    If ((GGTC == Zero))
                                    {
                                        GGTC = 0x57
                                    }

                                    GTTC = GGTC /* \GGTC */
                                    GDTT = 0x57
                                    GSTE = One
                                    GMIT = 0x4C
                                    GMAT = 0x57
                                    Return (GGTB) /* \_SB_.GZFD.WMB4.GGTB */
                                }

                                If ((Arg1 == 0x09))
                                {
                                    GGTC = ToInteger (Arg2)
                                    Notify (^^PCI0.GPP0.PEGP, 0xC0) // Hardware-Specific
                                }

                                If ((Arg1 == 0x0A))
                                {
                                    Return (Zero)
                                }
                            }

                            Method (WMB5, 3, NotSerialized)
                            {
                                If ((Arg1 == One))
                                {
                                    Name (GGDT, Buffer (0x02)
                                    {
                                         0x00                                             // .
                                    })
                                    CreateByteField (GGDT, Zero, GCPU)
                                    CreateByteField (GGDT, One, GGPU)
                                    GCPU = One
                                    GGPU = One
                                    Return (GGDT) /* \_SB_.GZFD.WMB5.GGDT */
                                }

                                If ((Arg1 == 0x02))
                                {
                                    Return (0x00010007)
                                }

                                If ((Arg1 == 0x03))
                                {
                                    Return (0x01FF)
                                }

                                If ((Arg1 == 0x05))
                                {
                                    If ((PANT & 0x04))
                                    {
                                        If (((DSMF == 0x03) || (DSMF == 0x04)))
                                        {
                                            Return (0x0279)
                                        }
                                        Else
                                        {
                                            Return (0x0278)
                                        }
                                    }
                                    ElseIf (((DSMF == 0x03) || (DSMF == 0x04)))
                                    {
                                        Return (0x0269)
                                    }
                                    Else
                                    {
                                        Return (0x0268)
                                    }
                                }

                                If ((Arg1 == 0x06))
                                {
                                    Local0 = RECM (0xEC)
                                    Return (Local0)
                                }

                                If ((Arg1 == 0x07))
                                {
                                    CreateByteField (Arg2, Zero, SDFD)
                                    CreateByteField (Arg2, One, SDFS)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        ^^PCI0.LPC0.EC0.ACPD = One
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Local1 = RECM (0xEC)
                                    If ((SDFD == One))
                                    {
                                        Local2 = (Local1 & 0xFC)
                                        If (((SDFS & 0x03) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.WEJF (One, Zero)
                                            WECM (0xEC, Local2)
                                        }
                                        ElseIf (((SDFS & 0x03) == One))
                                        {
                                            ^^PCI0.LPC0.EC0.WEJF (One, One)
                                            Local3 = (Local2 | One)
                                            WECM (0xEC, Local3)
                                        }
                                        ElseIf (((SDFS & 0x03) == 0x02))
                                        {
                                            ^^PCI0.LPC0.EC0.WEJF (One, 0x02)
                                            Local3 = (Local2 | 0x02)
                                            WECM (0xEC, Local3)
                                        }

                                        Local0 = HTPL ()
                                    }
                                    ElseIf ((SDFD == 0x02))
                                    {
                                        Local0 = Zero
                                    }
                                    ElseIf ((SDFD == 0x03))
                                    {
                                        Local0 = Zero
                                    }
                                    ElseIf ((SDFD == 0x04))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.FLBT = SDFS /* \_SB_.GZFD.WMB5.SDFS */
                                            If ((SDFS == One))
                                            {
                                                WSMI (0x05)
                                                Local2 = (Local1 | 0x10)
                                                WECM (0xEC, Local2)
                                            }
                                            Else
                                            {
                                                WSMI (0x06)
                                                Local2 = (Local1 & 0xEF)
                                                WECM (0xEC, Local2)
                                            }

                                            Local0 = One
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }
                                    ElseIf ((SDFD == 0x05))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.EACS = SDFS /* \_SB_.GZFD.WMB5.SDFS */
                                            If ((SDFS == One))
                                            {
                                                WSMI (0x07)
                                                Local2 = (Local1 | 0x20)
                                                WECM (0xEC, Local2)
                                            }
                                            Else
                                            {
                                                WSMI (0x08)
                                                Local2 = (Local1 & 0xDF)
                                                WECM (0xEC, Local2)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Local0 = One
                                    }
                                    ElseIf ((SDFD == 0x06))
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            ^^PCI0.LPC0.EC0.ETCS = SDFS /* \_SB_.GZFD.WMB5.SDFS */
                                            If ((SDFS == One))
                                            {
                                                WSMI (0x09)
                                                Local2 = (Local1 | 0x40)
                                                WECM (0xEC, Local2)
                                            }
                                            Else
                                            {
                                                WSMI (0x0A)
                                                Local2 = (Local1 & 0xBF)
                                                WECM (0xEC, Local2)
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }

                                        Local0 = One
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                    }

                                    Return (Local0)
                                }

                                If ((Arg1 == 0x08))
                                {
                                    Return (0x02)
                                }

                                If ((Arg1 == 0x09))
                                {
                                    DGDO = ToInteger (Arg2)
                                    HTPL ()
                                    Return (Zero)
                                }

                                If ((Arg1 == 0x0A))
                                {
                                    Return (DGID) /* \DGID */
                                }

                                If ((Arg1 == 0x0B))
                                {
                                    Local0 = Zero
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.ACTY () == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x04)))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                            }

                                            If ((^^PCI0.LPC0.EC0.ACTY () == 0x02))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                Local0 |= 0x0100
                                            }

                                            If ((^^PCI0.LPC0.EC0.APTS == 0x03))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACMO == One))
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                }
                                                Else
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                    Local0 |= 0x0100
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Local0)
                                }

                                If ((Arg1 == 0x0C))
                                {
                                    DWMD = ToInteger (Arg2)
                                    Return (Zero)
                                }
                            }

                            Method (WMBA, 3, NotSerialized)
                            {
                                Name (GLCS, Buffer (0x02)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (GLCS, Zero, LCST)
                                CreateByteField (GLCS, One, LCBL)
                                If ((Arg1 == One))
                                {
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((ToInteger (Arg2) == Zero))
                                        {
                                            LCST = Zero
                                            Local0 = Zero
                                            If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                            {
                                                Local0 = ^^PCI0.LPC0.EC0.GECF (0x8D, 0x04)
                                                Local0 += One
                                                LCBL = Local0
                                            }
                                            Else
                                            {
                                                LCBL = Zero
                                            }
                                        }
                                        ElseIf ((ToInteger (Arg2) == 0x03))
                                        {
                                            Local0 = Zero
                                            Local0 = ^^PCI0.LPC0.EC0.GECF (0x8D, One)
                                            If ((Local0 == One))
                                            {
                                                LCST = One
                                            }
                                            Else
                                            {
                                                LCST = Zero
                                            }

                                            LCBL = Zero
                                        }
                                        ElseIf ((ToInteger (Arg2) == 0x04))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                LCST = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                LCST = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                LCST = Zero
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                LCST = 0x03
                                            }

                                            LCBL = Zero
                                        }

                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }

                                    Return (GLCS) /* \_SB_.GZFD.WMBA.GLCS */
                                }

                                If ((Arg1 == 0x02))
                                {
                                    CreateByteField (Arg2, Zero, SLID)
                                    CreateByteField (Arg2, One, SCST)
                                    CreateByteField (Arg2, 0x02, SCBL)
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        If ((SLID == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.KBLT == Zero))
                                            {
                                                If ((SCBL == One))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x05)
                                                }
                                                ElseIf ((SCBL == 0x02))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x06)
                                                }
                                                ElseIf ((SCBL == 0x03))
                                                {
                                                    ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x07)
                                                }
                                            }
                                        }
                                        ElseIf ((SLID == 0x03))
                                        {
                                            If ((SCST == One))
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x02)
                                            }
                                            Else
                                            {
                                                ^^PCI0.LPC0.EC0.NCMD (0x8D, 0x03)
                                            }
                                        }
                                        ElseIf ((SLID == 0x04)){}
                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }
                                }
                            }

                            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                            {
                                If ((Arg0 == 0xD1))
                                {
                                    Return (Zero)
                                }

                                If ((Arg0 == 0xE2))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local2 = Zero
                                            If (((^^PCI0.LPC0.EC0.GDST & 0x02) == 0x02))
                                            {
                                                Local2 |= One
                                            }

                                            If (((^^PCI0.LPC0.EC0.GDST & 0x04) == 0x04))
                                            {
                                                Local2 |= 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local2)
                                        }
                                    }
                                }

                                Name (FANQ, Package (0x02)
                                {
                                    One, 
                                    0x05
                                })
                                Name (FANB, Package (0x02)
                                {
                                    0x02, 
                                    0x05
                                })
                                Name (FANP, Package (0x02)
                                {
                                    0x03, 
                                    0x05
                                })
                                If ((Arg0 == 0xE3))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Return (FANQ) /* \_SB_.GZFD._WED.FANQ */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Return (FANB) /* \_SB_.GZFD._WED.FANB */
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Return (FANP) /* \_SB_.GZFD._WED.FANP */
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE4))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            Local1 = Zero
                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE5))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.ACTY () == One))
                                            {
                                                Local1 = One
                                            }
                                            Else
                                            {
                                                Local1 = 0x02
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE6))
                                {
                                    Return (One)
                                }

                                If ((Arg0 == 0xE7))
                                {
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If ((^^PCI0.LPC0.EC0.SPMO == 0x02))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == Zero))
                                            {
                                                Local1 = 0x02
                                            }
                                            ElseIf ((^^PCI0.LPC0.EC0.SPMO == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            If ((^^PCI0.LPC0.EC0.CTMD == One))
                                            {
                                                Local1 = 0x03
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                            Return (Local1)
                                        }
                                    }
                                }

                                If ((Arg0 == 0xE8))
                                {
                                    If (((LSKD == 0x13) || (LSKD == 0x14)))
                                    {
                                        Local1 = Zero
                                    }
                                    ElseIf (((LSKD == 0x15) || (LSKD == 0x16)))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((((LSKD == 0x17) || (LSKD == 0x18)) || ((
                                        LSKD == 0x19) || (LSKD == 0x25))))
                                    {
                                        Local1 = 0x02
                                    }
                                    ElseIf ((LSKD == 0x26))
                                    {
                                        Local1 = 0x03
                                    }
                                    ElseIf ((((LSKD == 0x1A) || (LSKD == 0x1B)) || ((
                                        LSKD == 0x1C) || (LSKD == 0x1D))))
                                    {
                                        Local1 = 0x03
                                    }
                                    ElseIf ((((LSKD == 0x1E) || (LSKD == 0x1F)) || ((
                                        LSKD == 0x20) || (LSKD == 0x21))))
                                    {
                                        Local1 = 0x03
                                    }
                                    ElseIf ((((LSKD == 0x22) || (LSKD == 0x23)) || 0x24))
                                    {
                                        Local1 = 0x03
                                    }

                                    Return (Local1)
                                }

                                If ((Arg0 == 0xE9))
                                {
                                    Local0 = Zero
                                    If (^^PCI0.LPC0.EC0.ECAV)
                                    {
                                        If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                                        {
                                            If (((^^PCI0.LPC0.EC0.ACTY () == One) || (^^PCI0.LPC0.EC0.ACTY () == 0x04)))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                            }

                                            If ((^^PCI0.LPC0.EC0.ACTY () == 0x02))
                                            {
                                                Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                Local0 |= 0x0100
                                            }

                                            If ((^^PCI0.LPC0.EC0.APTS == 0x03))
                                            {
                                                If ((^^PCI0.LPC0.EC0.ACMO == One))
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                }
                                                Else
                                                {
                                                    Local0 |= ^^PCI0.LPC0.EC0.APTS /* \_SB_.PCI0.LPC0.EC0_.APTS */
                                                    Local0 |= 0x0100
                                                }
                                            }

                                            Release (^^PCI0.LPC0.EC0.LFCM)
                                        }
                                    }

                                    Return (Local0)
                                }
                            }

                            Name (WQDD, Buffer (0x5F02)
                            {
                                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                                /* 0008 */  0xF2, 0x5E, 0x00, 0x00, 0x50, 0x6A, 0x02, 0x00,  // .^..Pj..
                                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                                /* 0018 */  0x28, 0x59, 0xAB, 0x02, 0x01, 0x06, 0x04, 0x10,  // (Y......
                                /* 0020 */  0x84, 0xB0, 0x1E, 0x08, 0x09, 0xB1, 0x40, 0x21,  // ......@!
                                /* 0028 */  0x02, 0xC5, 0x21, 0x52, 0x74, 0x09, 0x30, 0x18,  // ..!Rt.0.
                                /* 0030 */  0x0D, 0x20, 0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C,  // . ..!.LL
                                /* 0038 */  0x80, 0x08, 0x08, 0x79, 0x15, 0x60, 0x53, 0x80,  // ...y.`S.
                                /* 0040 */  0x49, 0x10, 0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C,  // I....Q..
                                /* 0048 */  0x4A, 0x08, 0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40,  // J..$.0/@
                                /* 0050 */  0xB7, 0x00, 0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D,  // ....l.0-
                                /* 0058 */  0xC0, 0x31, 0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C,  // .1$..N.,
                                /* 0060 */  0x05, 0x42, 0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B,  // .BB.(..[
                                /* 0068 */  0x80, 0x76, 0x44, 0x49, 0x16, 0x60, 0x19, 0x46,  // .vDI.`.F
                                /* 0070 */  0x04, 0x1E, 0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC,  // ..Ed.qh.
                                /* 0078 */  0x30, 0x2C, 0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2,  // 0,.L.8..
                                /* 0080 */  0x91, 0x45, 0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE,  // .E..u*@.
                                /* 0088 */  0x00, 0x61, 0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39,  // .a.....9
                                /* 0090 */  0x28, 0x12, 0x00, 0x1A, 0x25, 0x66, 0x4C, 0x04,  // (...%fL.
                                /* 0098 */  0xB6, 0x73, 0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17,  // .sl..4..
                                /* 00A0 */  0x20, 0x1D, 0x43, 0x23, 0x38, 0xAE, 0x60, 0x4C,  //  .C#8.`L
                                /* 00A8 */  0x33, 0x8E, 0x60, 0x42, 0xC4, 0xE2, 0x82, 0x30,  // 3.`B...0
                                /* 00B0 */  0x04, 0x15, 0xA3, 0xC7, 0xF1, 0x11, 0xC0, 0x28,  // .......(
                                /* 00B8 */  0xA7, 0x12, 0x2D, 0x7E, 0xC0, 0x28, 0x51, 0x8D,  // ..-~.(Q.
                                /* 00C0 */  0xC1, 0x70, 0xA2, 0x05, 0x8B, 0x66, 0xCF, 0x28,  // .p...f.(
                                /* 00C8 */  0x02, 0x32, 0x58, 0xDC, 0xE8, 0x87, 0x68, 0x82,  // .2X...h.
                                /* 00D0 */  0x60, 0x07, 0x84, 0x91, 0x01, 0x21, 0xC8, 0xD6,  // `....!..
                                /* 00D8 */  0x47, 0x4A, 0x08, 0xEC, 0x7E, 0x64, 0x72, 0x26,  // GJ..~dr&
                                /* 00E0 */  0xC0, 0xA0, 0x00, 0x6B, 0x02, 0xBC, 0x09, 0x70,  // ...k...p
                                /* 00E8 */  0x38, 0x21, 0xC1, 0xB4, 0x25, 0x40, 0x21, 0x82,  // 8!..%@!.
                                /* 00F0 */  0x60, 0x6A, 0x43, 0xD1, 0x08, 0x63, 0x84, 0x8B,  // `jC..c..
                                /* 00F8 */  0x13, 0x25, 0x66, 0xC4, 0xC6, 0x00, 0x85, 0x12,  // .%f.....
                                /* 0100 */  0x31, 0x48, 0x8D, 0x10, 0x02, 0x36, 0x42, 0xB0,  // 1H...6B.
                                /* 0108 */  0x88, 0xC5, 0x41, 0x6A, 0xAC, 0xED, 0x0F, 0x82,  // ..Aj....
                                /* 0110 */  0x88, 0x75, 0x70, 0x2E, 0x60, 0x11, 0x46, 0x83,  // .up.`.F.
                                /* 0118 */  0x3A, 0x0B, 0x24, 0x78, 0x36, 0xF0, 0xB9, 0xE0,  // :.$x6...
                                /* 0120 */  0xB4, 0x4E, 0xCF, 0x53, 0x0C, 0x72, 0xBE, 0xA7,  // .N.S.r..
                                /* 0128 */  0x55, 0xE7, 0x28, 0x29, 0x81, 0xA5, 0x42, 0xE8,  // U.()..B.
                                /* 0130 */  0xFF, 0x7F, 0x5D, 0x78, 0x4A, 0x80, 0xE1, 0x1A,  // ..]xJ...
                                /* 0138 */  0x50, 0xD7, 0x83, 0x87, 0x03, 0x36, 0x92, 0xE7,  // P....6..
                                /* 0140 */  0x01, 0xEC, 0x7C, 0x4E, 0xE2, 0x61, 0x20, 0x7A,  // ..|N.a z
                                /* 0148 */  0xB3, 0x07, 0x03, 0x59, 0x04, 0xD2, 0x38, 0x7C,  // ...Y..8|
                                /* 0150 */  0x0A, 0xF0, 0x3C, 0x4E, 0x34, 0x81, 0x8F, 0x04,  // ..<N4...
                                /* 0158 */  0xC7, 0x80, 0x19, 0x91, 0xA1, 0x3D, 0xB5, 0xD3,  // .....=..
                                /* 0160 */  0x79, 0x0E, 0xF0, 0x19, 0xE1, 0x70, 0xD8, 0xF8,  // y....p..
                                /* 0168 */  0x9E, 0x25, 0xD8, 0x38, 0xE0, 0x2B, 0xBE, 0x03,  // .%.8.+..
                                /* 0170 */  0x08, 0xE1, 0x4D, 0xC1, 0xF3, 0x33, 0xC1, 0xE0,  // ..M..3..
                                /* 0178 */  0x03, 0x45, 0x1F, 0x13, 0x7C, 0x46, 0x78, 0x73,  // .E..|Fxs
                                /* 0180 */  0xF0, 0x34, 0x3D, 0xA5, 0x08, 0xEF, 0x12, 0x6C,  // .4=....l
                                /* 0188 */  0x26, 0x8E, 0x08, 0xA1, 0xEF, 0x85, 0x45, 0x41,  // &.....EA
                                /* 0190 */  0x68, 0xDF, 0x3A, 0x4C, 0x20, 0xCE, 0x11, 0xEC,  // h.:L ...
                                /* 0198 */  0x14, 0x10, 0xF4, 0xA8, 0x3D, 0x98, 0x97, 0x02,  // ....=...
                                /* 01A0 */  0x8F, 0xC9, 0xE7, 0x83, 0xC3, 0xC3, 0x1C, 0x0E,  // ........
                                /* 01A8 */  0x3C, 0x8B, 0xB3, 0xF1, 0xE1, 0x80, 0x0D, 0xD9,  // <.......
                                /* 01B0 */  0xC8, 0x0F, 0x11, 0x60, 0x19, 0x14, 0x76, 0x16,  // ...`..v.
                                /* 01B8 */  0x27, 0x85, 0x39, 0x03, 0x80, 0x31, 0xEE, 0x60,  // '.9..1.`
                                /* 01C0 */  0xD1, 0xC3, 0xF2, 0x45, 0x02, 0x43, 0x30, 0xDE,  // ...E.C0.
                                /* 01C8 */  0x48, 0x41, 0x75, 0x54, 0xF0, 0x48, 0xE1, 0xFC,  // HAuT.H..
                                /* 01D0 */  0xFF, 0x47, 0x8A, 0x93, 0x37, 0x52, 0xD0, 0x40,  // .G..7R.@
                                /* 01D8 */  0x3D, 0x63, 0x3C, 0x17, 0xBC, 0x6B, 0xE0, 0x8E,  // =c<..k..
                                /* 01E0 */  0x0E, 0x60, 0x05, 0xC6, 0x0D, 0xD4, 0x7E, 0x05,  // .`....~.
                                /* 01E8 */  0x20, 0x04, 0x7F, 0x4F, 0x79, 0x78, 0x78, 0x48,  //  ..OyxxH
                                /* 01F0 */  0x89, 0xF0, 0xA8, 0x62, 0xF4, 0x87, 0x8B, 0x3E,  // ...b...>
                                /* 01F8 */  0x05, 0x68, 0x85, 0x10, 0xDA, 0x41, 0x84, 0x39,  // .h...A.9
                                /* 0200 */  0x88, 0x48, 0xB1, 0x22, 0x84, 0x79, 0x2E, 0x09,  // .H.".y..
                                /* 0208 */  0x67, 0xA0, 0x60, 0xE1, 0x4E, 0x24, 0x46, 0x28,  // g.`.N$F(
                                /* 0210 */  0x43, 0xBF, 0x64, 0x98, 0xA0, 0xC8, 0x21, 0xA2,  // C.d...!.
                                /* 0218 */  0xC7, 0xC1, 0x81, 0x4F, 0xE3, 0xA8, 0x82, 0x07,  // ...O....
                                /* 0220 */  0x8D, 0x1C, 0xE5, 0x54, 0x0E, 0xCB, 0x77, 0x03,  // ...T..w.
                                /* 0228 */  0x23, 0x1C, 0xD7, 0x41, 0x9D, 0xA2, 0x6F, 0x2B,  // #..A..o+
                                /* 0230 */  0x07, 0x7D, 0x9C, 0x2F, 0x13, 0x81, 0x9E, 0x39,  // .}./...9
                                /* 0238 */  0x38, 0x81, 0x43, 0xAE, 0x9E, 0xC6, 0x78, 0x3A,  // 8.C...x:
                                /* 0240 */  0x28, 0x16, 0x0C, 0xEA, 0xD0, 0x03, 0xB8, 0x3A,  // (......:
                                /* 0248 */  0x20, 0x3C, 0x27, 0xC0, 0xFA, 0xFF, 0x1F, 0x7A,  //  <'....z
                                /* 0250 */  0xC0, 0x35, 0xF9, 0x23, 0x6A, 0x15, 0x44, 0x97,  // .5.#j.D.
                                /* 0258 */  0x81, 0x28, 0x31, 0x62, 0x9F, 0x4C, 0xFC, 0xF7,  // .(1b.L..
                                /* 0260 */  0x0C, 0x76, 0xE6, 0x31, 0xCC, 0xA3, 0x0F, 0xE6,  // .v.1....
                                /* 0268 */  0xC0, 0x03, 0xFF, 0x9E, 0xF3, 0x8A, 0xF3, 0x90,  // ........
                                /* 0270 */  0xF3, 0x96, 0x73, 0x08, 0x6F, 0x38, 0x86, 0x78,  // ..s.o8.x
                                /* 0278 */  0xD1, 0x79, 0x28, 0xF0, 0x78, 0x42, 0x3C, 0xF0,  // .y(.xB<.
                                /* 0280 */  0x58, 0x19, 0x8A, 0x20, 0x1E, 0x78, 0x8C, 0xF1,  // X.. .x..
                                /* 0288 */  0xB4, 0x63, 0x94, 0x10, 0xAF, 0x3B, 0xBE, 0xED,  // .c...;..
                                /* 0290 */  0x84, 0x30, 0xD4, 0x03, 0x4C, 0xF8, 0x13, 0x08,  // .0..L...
                                /* 0298 */  0xE9, 0x03, 0x0F, 0x13, 0xA4, 0x02, 0xA2, 0x0D,  // ........
                                /* 02A0 */  0x10, 0x45, 0x3A, 0xF0, 0x80, 0x6E, 0x68, 0x3E,  // .E:..nh>
                                /* 02A8 */  0x7E, 0xF8, 0xC0, 0x03, 0xF7, 0xF4, 0x01, 0xFF,  // ~.......
                                /* 02B0 */  0xB8, 0x01, 0x3E, 0xF9, 0x07, 0x1F, 0x50, 0x88,  // ..>...P.
                                /* 02B8 */  0x3D, 0x9C, 0x80, 0xE6, 0x00, 0x04, 0xBE, 0xC8,  // =.......
                                /* 02C0 */  0x10, 0x72, 0x32, 0x1E, 0xF4, 0xFF, 0x1F, 0xF7,  // .r2.....
                                /* 02C8 */  0xB1, 0x20, 0x5C, 0xC4, 0xE7, 0x02, 0x1E, 0xF0,  // . \.....
                                /* 02D0 */  0xF8, 0x03, 0x74, 0x04, 0x1E, 0x27, 0x40, 0x73,  // ..t..'@s
                                /* 02D8 */  0x8A, 0x60, 0x40, 0xE7, 0xC4, 0x2E, 0x62, 0x1E,  // .`@...b.
                                /* 02E0 */  0x41, 0x5D, 0xC7, 0x18, 0x50, 0xDC, 0x22, 0x7C,  // A]..P."|
                                /* 02E8 */  0x1E, 0xF3, 0x19, 0xE2, 0x9D, 0x21, 0x81, 0xC3,  // .....!..
                                /* 02F0 */  0x8F, 0x14, 0x7D, 0x4E, 0xF0, 0x29, 0x83, 0x5D,  // ..}N.).]
                                /* 02F8 */  0x53, 0xF8, 0x1D, 0xE6, 0xD5, 0xC3, 0x30, 0xCF,  // S.....0.
                                /* 0300 */  0x02, 0x2C, 0xE4, 0x09, 0x08, 0xE8, 0x9C, 0x67,  // .,.....g
                                /* 0308 */  0xF0, 0x47, 0x11, 0xD8, 0xA3, 0xE2, 0xB3, 0x78,  // .G.....x
                                /* 0310 */  0x5E, 0x38, 0x2B, 0x3E, 0x5B, 0x0F, 0x17, 0x8C,  // ^8+>[...
                                /* 0318 */  0x81, 0xCF, 0x09, 0x50, 0x4E, 0x01, 0x9E, 0x2B,  // ...PN..+
                                /* 0320 */  0xEE, 0xF0, 0x04, 0xE7, 0xFF, 0x3F, 0x56, 0x78,  // .....?Vx
                                /* 0328 */  0x80, 0x3E, 0x3C, 0x01, 0x8F, 0x73, 0x02, 0x9B,  // .><..s..
                                /* 0330 */  0x12, 0xE6, 0x98, 0x00, 0xCE, 0xD0, 0x03, 0x45,  // .......E
                                /* 0338 */  0x0F, 0xCF, 0xC0, 0x21, 0x7D, 0x48, 0xC0, 0x1E,  // ...!}H..
                                /* 0340 */  0x30, 0xC0, 0x05, 0xEA, 0x03, 0x06, 0xF0, 0x18,  // 0.......
                                /* 0348 */  0x13, 0x9B, 0x29, 0x7E, 0xA8, 0xC0, 0x63, 0x14,  // ..)~..c.
                                /* 0350 */  0xCF, 0x48, 0x87, 0x0A, 0xE6, 0x3F, 0xAA, 0x87,  // .H...?..
                                /* 0358 */  0x0A, 0xEF, 0xFF, 0x3F, 0x54, 0x30, 0x8E, 0xC9,  // ...?T0..
                                /* 0360 */  0x43, 0x05, 0x06, 0x67, 0x44, 0x0F, 0x15, 0x37,  // C..gD..7
                                /* 0368 */  0x1A, 0xDF, 0xAE, 0xDE, 0xB0, 0xF8, 0x58, 0xB1,  // ......X.
                                /* 0370 */  0x67, 0x44, 0x70, 0x9D, 0xCA, 0x7C, 0x46, 0x04,  // gDp..|F.
                                /* 0378 */  0x1E, 0x83, 0xC2, 0x0C, 0x16, 0x18, 0xC4, 0x3E,  // .......>
                                /* 0380 */  0x26, 0x40, 0x39, 0x76, 0x18, 0xE2, 0x6C, 0x5E,  // &@9v..l^
                                /* 0388 */  0xD5, 0xD8, 0x85, 0x88, 0x8D, 0x15, 0x5C, 0x1E,  // ......\.
                                /* 0390 */  0xC6, 0x0A, 0x14, 0xFE, 0xFF, 0x27, 0x13, 0xEC,  // .....'..
                                /* 0398 */  0x9C, 0x30, 0x17, 0x22, 0xCC, 0x89, 0x08, 0x18,  // .0."....
                                /* 03A0 */  0x0C, 0xC7, 0x47, 0x44, 0xCF, 0x15, 0x06, 0xC1,  // ..GD....
                                /* 03A8 */  0x98, 0x83, 0x05, 0xD5, 0x88, 0x3C, 0x58, 0xF8,  // .....<X.
                                /* 03B0 */  0x67, 0xBE, 0x83, 0x05, 0xCB, 0xA0, 0x0C, 0xF1,  // g.......
                                /* 03B8 */  0x1A, 0x77, 0xB8, 0xC0, 0x25, 0xFA, 0x49, 0x01,  // .w..%.I.
                                /* 03C0 */  0xCA, 0x81, 0xCE, 0xF7, 0x3E, 0x76, 0x51, 0x62,  // ....>vQb
                                /* 03C8 */  0xA3, 0x05, 0x9F, 0x89, 0xD1, 0x02, 0x15, 0x30,  // .......0
                                /* 03D0 */  0x4F, 0x28, 0xFA, 0x73, 0xDE, 0xAB, 0x98, 0xB1,  // O(.s....
                                /* 03D8 */  0x1E, 0xF9, 0xFC, 0xFF, 0xBF, 0x64, 0x73, 0x98,  // .....ds.
                                /* 03E0 */  0xC8, 0x8F, 0x45, 0xE0, 0x3C, 0xA2, 0x82, 0xF1,  // ..E.<...
                                /* 03E8 */  0x7A, 0xFA, 0x46, 0xCA, 0xD4, 0x5E, 0x08, 0x08,  // z.F..^..
                                /* 03F0 */  0x48, 0x58, 0x1F, 0x23, 0x7D, 0x45, 0x35, 0x4A,  // HX.#}E5J
                                /* 03F8 */  0x8C, 0x33, 0x0B, 0x78, 0x30, 0x21, 0x1E, 0x51,  // .3.x0!.Q
                                /* 0400 */  0x81, 0x51, 0xF4, 0x97, 0xA3, 0xCF, 0xA7, 0x34,  // .Q.....4
                                /* 0408 */  0x2C, 0x0C, 0xEA, 0x88, 0x0A, 0xF8, 0xBE, 0x10,  // ,.......
                                /* 0410 */  0x3C, 0xA2, 0x62, 0xFE, 0xFF, 0x47, 0x54, 0xB0,  // <.b..GT.
                                /* 0418 */  0x5F, 0x49, 0x23, 0xBC, 0x96, 0x3E, 0x93, 0x3E,  // _I#..>.>
                                /* 0420 */  0xDA, 0x9F, 0xD8, 0x1B, 0xC1, 0xD3, 0xA9, 0x87,  // ........
                                /* 0428 */  0x13, 0xC1, 0x47, 0x54, 0x06, 0x16, 0x29, 0x8A,  // ..GT..).
                                /* 0430 */  0x21, 0xA3, 0x44, 0x35, 0xCA, 0xE3, 0x3D, 0xC3,  // !.D5..=.
                                /* 0438 */  0x7A, 0xD1, 0x37, 0x92, 0x6F, 0x10, 0xD1, 0xE3,  // z.7.o...
                                /* 0440 */  0x3E, 0xE2, 0x73, 0x99, 0x0B, 0x91, 0x8F, 0x23,  // >.s....#
                                /* 0448 */  0x2A, 0x40, 0x91, 0x93, 0x1B, 0x1C, 0xD4, 0x67,  // *@.....g
                                /* 0450 */  0x87, 0xF3, 0xF6, 0x05, 0xC1, 0xF8, 0x6F, 0x4B,  // ......oK
                                /* 0458 */  0x3E, 0xB9, 0x81, 0xE5, 0xFF, 0x7F, 0x46, 0x05,  // >.....F.
                                /* 0460 */  0x4E, 0x63, 0x7A, 0x55, 0x38, 0x27, 0xCC, 0x2C,  // NczU8'.,
                                /* 0468 */  0x0E, 0xCA, 0xE7, 0x18, 0x70, 0x9E, 0x32, 0xE1,  // ....p.2.
                                /* 0470 */  0x40, 0x1F, 0xF2, 0x9B, 0x87, 0xCF, 0x09, 0x67,  // @......g
                                /* 0478 */  0xCA, 0x4E, 0xFC, 0xC0, 0xFB, 0xA0, 0xE3, 0x03,  // .N......
                                /* 0480 */  0x88, 0x5D, 0x0E, 0x14, 0xD4, 0x67, 0x5B, 0x38,  // .]...g[8
                                /* 0488 */  0xF7, 0x1B, 0xEC, 0xAD, 0x15, 0x73, 0xB6, 0x05,  // .....s..
                                /* 0490 */  0xDF, 0x01, 0x15, 0x1C, 0x07, 0x21, 0xFF, 0xFF,  // .....!..
                                /* 0498 */  0xCF, 0xB6, 0xC0, 0xF9, 0x2D, 0xE1, 0xE1, 0xE2,  // ....-...
                                /* 04A0 */  0xEF, 0x6D, 0x6C, 0x26, 0x11, 0x4E, 0xE8, 0x91,  // .ml&.N..
                                /* 04A8 */  0xC6, 0x17, 0xF5, 0x73, 0xB3, 0x71, 0x48, 0x12,  // ...s.qH.
                                /* 04B0 */  0xF4, 0x94, 0x0A, 0x74, 0x66, 0xF5, 0xD4, 0x07,  // ...tf...
                                /* 04B8 */  0xB6, 0x59, 0x61, 0x70, 0xA2, 0x1C, 0x16, 0x83,  // .Yap....
                                /* 04C0 */  0x78, 0xA4, 0xF1, 0x3D, 0xE6, 0x71, 0x01, 0x9C,  // x..=.q..
                                /* 04C8 */  0x03, 0xC6, 0x8F, 0xC8, 0x63, 0xF1, 0x09, 0x96,  // ....c...
                                /* 04D0 */  0x0D, 0x06, 0x47, 0x30, 0xEA, 0x51, 0x15, 0xE8,  // ..G0.Q..
                                /* 04D8 */  0xCC, 0xEA, 0x78, 0xB1, 0xFF, 0xFF, 0xF1, 0xC2,  // ..x.....
                                /* 04E0 */  0xBE, 0xE5, 0xF2, 0xE3, 0x93, 0x47, 0x8C, 0x39,  // .....G.9
                                /* 04E8 */  0x30, 0x00, 0x9F, 0x01, 0x63, 0xCE, 0xB1, 0x1E,  // 0...c...
                                /* 04F0 */  0x30, 0x98, 0xCF, 0xAB, 0xE0, 0x18, 0x30, 0xF8,  // 0.....0.
                                /* 04F8 */  0xEE, 0xBA, 0x6C, 0xC0, 0xC0, 0x26, 0xFE, 0x71,  // ..l..&.q
                                /* 0500 */  0x05, 0xCA, 0x81, 0x03, 0x7F, 0x9E, 0xC5, 0x1C,  // ........
                                /* 0508 */  0x1E, 0xC1, 0x76, 0x6A, 0x05, 0xC7, 0xE1, 0x11,  // ..vj....
                                /* 0510 */  0xF7, 0xFF, 0x3F, 0x70, 0x80, 0x6F, 0x58, 0x98,  // ..?p.oX.
                                /* 0518 */  0x23, 0x2F, 0x60, 0xE2, 0xD8, 0x0A, 0x8E, 0x23,  // #/`....#
                                /* 0520 */  0x2F, 0xE0, 0xF2, 0xD4, 0x0A, 0x5C, 0xFE, 0xFF,  // /....\..
                                /* 0528 */  0x47, 0x5E, 0xC0, 0x93, 0x8A, 0x23, 0x2F, 0xA0,  // G^...#/.
                                /* 0530 */  0xE7, 0x98, 0x81, 0x1F, 0x90, 0xA1, 0x8F, 0xE4,  // ........
                                /* 0538 */  0x3D, 0xD4, 0x07, 0xC4, 0xB0, 0x2F, 0xA1, 0xC6,  // =..../..
                                /* 0540 */  0x7D, 0xA7, 0xF4, 0xB1, 0x10, 0x6C, 0x83, 0xF5,  // }....l..
                                /* 0548 */  0xB1, 0x10, 0x78, 0x0C, 0x0A, 0xCE, 0xFF, 0xFF,  // ..x.....
                                /* 0550 */  0xA0, 0x00, 0xCE, 0xD3, 0x32, 0x70, 0x38, 0xD1,  // ....2p8.
                                /* 0558 */  0xB2, 0xD3, 0x32, 0x30, 0x4C, 0xD2, 0x08, 0x84,  // ..20L...
                                /* 0560 */  0xC9, 0x3F, 0x4D, 0x49, 0xDE, 0x5B, 0x80, 0xC2,  // .?MI.[..
                                /* 0568 */  0xF8, 0xB4, 0x0C, 0xB8, 0x12, 0x7C, 0x50, 0x00,  // .....|P.
                                /* 0570 */  0xCD, 0x69, 0x00, 0xFE, 0x4D, 0x80, 0x1F, 0x22,  // .i..M.."
                                /* 0578 */  0xC2, 0x3F, 0x70, 0x78, 0x04, 0x11, 0xFE, 0xFF,  // .?px....
                                /* 0580 */  0x09, 0x7C, 0x52, 0x06, 0xD7, 0x89, 0xE1, 0x49,  // .|R....I
                                /* 0588 */  0x19, 0xEC, 0x01, 0xCF, 0x03, 0x3A, 0x6F, 0xF8,  // .....:o.
                                /* 0590 */  0xA4, 0x0C, 0xF0, 0xE3, 0x64, 0x89, 0x3B, 0x89,  // ....d.;.
                                /* 0598 */  0x80, 0xF7, 0x16, 0x82, 0x39, 0x86, 0xC0, 0xFC,  // ....9...
                                /* 05A0 */  0xFF, 0x1F, 0x43, 0xC0, 0xA7, 0x30, 0xD0, 0x19,  // ..C..0..
                                /* 05A8 */  0x8C, 0x49, 0x59, 0xAD, 0x6C, 0xAC, 0xD6, 0xE7,  // .IY.l...
                                /* 05B0 */  0x0D, 0x2A, 0xF8, 0x98, 0xA0, 0x09, 0x3D, 0xB9,  // .*....=.
                                /* 05B8 */  0x79, 0x98, 0x95, 0xCE, 0x46, 0x28, 0xAF, 0x07,  // y...F(..
                                /* 05C0 */  0xCF, 0xF6, 0x96, 0x09, 0xA6, 0x73, 0xB4, 0x21,  // .....s.!
                                /* 05C8 */  0x2C, 0xF0, 0x44, 0x62, 0x08, 0x8D, 0xC7, 0xE0,  // ,.Db....
                                /* 05D0 */  0x16, 0x04, 0x47, 0x41, 0x7C, 0x02, 0x70, 0xD8,  // ..GA|.p.
                                /* 05D8 */  0x13, 0x10, 0xFA, 0x08, 0xE0, 0x3B, 0x0F, 0x27,  // .....;.'
                                /* 05E0 */  0x70, 0xB8, 0xE3, 0x0F, 0x3D, 0x31, 0xE0, 0xC7,  // p...=1..
                                /* 05E8 */  0x76, 0x60, 0xE7, 0xE5, 0x53, 0x2E, 0xB8, 0x66,  // v`..S..f
                                /* 05F0 */  0xE6, 0xFB, 0x92, 0x87, 0xC6, 0xEE, 0x26, 0x1E,  // ......&.
                                /* 05F8 */  0x8A, 0x87, 0xF0, 0x78, 0x60, 0x02, 0x8F, 0xC4,  // ...x`...
                                /* 0600 */  0xE7, 0x22, 0x3E, 0x08, 0x9F, 0xC2, 0xF9, 0xE1,  // .">.....
                                /* 0608 */  0x07, 0x9C, 0x07, 0x23, 0xDC, 0x19, 0x01, 0x1E,  // ...#....
                                /* 0610 */  0x90, 0x2F, 0x04, 0x9E, 0xD5, 0x43, 0x01, 0x9B,  // ./...C..
                                /* 0618 */  0x43, 0x88, 0x30, 0xD1, 0x0C, 0x8F, 0xF9, 0x0E,  // C.0.....
                                /* 0620 */  0x68, 0x54, 0x44, 0xD6, 0xB8, 0x50, 0x23, 0xF5,  // hTD..P#.
                                /* 0628 */  0x49, 0x86, 0x61, 0xBF, 0x0F, 0x58, 0xF4, 0x40,  // I.a..X.@
                                /* 0630 */  0x75, 0x3B, 0x78, 0x4A, 0xC7, 0xC0, 0x7A, 0xEC,  // u;xJ..z.
                                /* 0638 */  0x1C, 0xD6, 0x68, 0x07, 0xEB, 0xA3, 0x84, 0xAF,  // ..h.....
                                /* 0640 */  0x21, 0x9E, 0xD9, 0xFF, 0xFF, 0x84, 0x0D, 0xEB,  // !.......
                                /* 0648 */  0x23, 0x14, 0xB8, 0x8E, 0x0A, 0xEC, 0xB8, 0xED,  // #.......
                                /* 0650 */  0x13, 0x00, 0xEE, 0x9C, 0xA0, 0x53, 0x03, 0xEA,  // .....S..
                                /* 0658 */  0x00, 0x64, 0xF1, 0xA7, 0x06, 0xC4, 0x1C, 0x0F,  // .d......
                                /* 0660 */  0xEB, 0x49, 0xC0, 0xA0, 0xAF, 0x3A, 0xC6, 0x79,  // .I...:.y
                                /* 0668 */  0xA2, 0xF2, 0x88, 0x7C, 0x0B, 0x60, 0x52, 0x4F,  // ...|.`RO
                                /* 0670 */  0x0E, 0x28, 0x91, 0x14, 0x92, 0x78, 0x72, 0x40,  // .(...xr@
                                /* 0678 */  0x89, 0x82, 0xA3, 0x20, 0x3E, 0x39, 0xF8, 0xD4,  // ... >9..
                                /* 0680 */  0x8E, 0x3F, 0x39, 0xE0, 0xCF, 0x61, 0xFC, 0xE4,  // .?9..a..
                                /* 0688 */  0x00, 0xF7, 0xC0, 0x0C, 0x9E, 0xA1, 0xF2, 0xF9,  // ........
                                /* 0690 */  0xC1, 0xBB, 0xAE, 0xB3, 0xB3, 0x03, 0x60, 0x25,  // ......`%
                                /* 0698 */  0xD8, 0xD9, 0x01, 0x34, 0xFF, 0xFF, 0xB3, 0x03,  // ...4....
                                /* 06A0 */  0x3F, 0x07, 0xF8, 0xEC, 0x00, 0xAE, 0x13, 0x00,  // ?.......
                                /* 06A8 */  0xF0, 0x39, 0x3F, 0xC0, 0x99, 0xE4, 0xF3, 0x03,  // .9?.....
                                /* 06B0 */  0x60, 0xE1, 0x62, 0xE0, 0xF3, 0x3B, 0xF8, 0xC6,  // `.b..;..
                                /* 06B8 */  0xC7, 0xCE, 0x0F, 0x80, 0xA1, 0xFF, 0xFF, 0xF9,  // ........
                                /* 06C0 */  0x01, 0x38, 0xC0, 0xF2, 0xF3, 0x03, 0xF0, 0x39,  // .8.....9
                                /* 06C8 */  0x01, 0x80, 0x47, 0xE4, 0xF9, 0x01, 0xC5, 0xE1,  // ..G.....
                                /* 06D0 */  0x83, 0xA2, 0xD1, 0x4E, 0xE2, 0x00, 0x4E, 0xFC,  // ...N..N.
                                /* 06D8 */  0x20, 0x22, 0x9C, 0x43, 0xF8, 0x43, 0x78, 0xA5,  //  ".C.Cx.
                                /* 06E0 */  0x88, 0x12, 0xE8, 0x61, 0xD2, 0x27, 0x4C, 0x72,  // ...a.'Lr
                                /* 06E8 */  0x7C, 0x40, 0x09, 0xA5, 0xD0, 0xD1, 0xCA, 0xC7,  // |@......
                                /* 06F0 */  0x07, 0x2E, 0x0C, 0x8E, 0x82, 0xF8, 0xF8, 0xE0,  // ........
                                /* 06F8 */  0xD0, 0xC7, 0x07, 0xE8, 0x21, 0x4F, 0x33, 0xA0,  // ....!O3.
                                /* 0700 */  0x38, 0xBA, 0xF9, 0x58, 0x05, 0x16, 0xAC, 0x37,  // 8..X...7
                                /* 0708 */  0x71, 0x4F, 0x0F, 0xC6, 0xBD, 0xD8, 0xB7, 0x39,  // qO.....9
                                /* 0710 */  0x23, 0x9D, 0xE0, 0xF9, 0xBE, 0x3D, 0xFA, 0xBC,  // #....=..
                                /* 0718 */  0xF7, 0x00, 0x01, 0x0C, 0xFE, 0xFF, 0x07, 0x08,  // ........
                                /* 0720 */  0xE0, 0x74, 0x34, 0xF3, 0x01, 0x02, 0x5C, 0xE3,  // .t4...\.
                                /* 0728 */  0xF7, 0x01, 0x02, 0x5C, 0x67, 0x00, 0xE0, 0x25,  // ...\g..%
                                /* 0730 */  0xEA, 0x08, 0x81, 0x96, 0x7D, 0xC0, 0x42, 0x60,  // ....}.B`
                                /* 0738 */  0x33, 0x0C, 0xDF, 0x22, 0x7C, 0x5C, 0xF0, 0xA0,  // 3.."|\..
                                /* 0740 */  0x4C, 0xE0, 0x83, 0x1E, 0xE0, 0xE5, 0x38, 0xC4,  // L.....8.
                                /* 0748 */  0xA7, 0x07, 0xEF, 0xF8, 0xC0, 0xFF, 0xFF, 0xC7,  // ........
                                /* 0750 */  0x07, 0xC0, 0x45, 0xA8, 0xE3, 0x03, 0xE8, 0x2C,  // ..E....,
                                /* 0758 */  0x1C, 0x1F, 0x40, 0x37, 0x7E, 0xE0, 0x71, 0x74,  // ..@7~.qt
                                /* 0760 */  0x80, 0x73, 0xB6, 0x61, 0x47, 0x07, 0x60, 0x7F,  // .s.aG.`.
                                /* 0768 */  0xB4, 0xC2, 0x8D, 0x15, 0x3C, 0xFF, 0xFF, 0x93,  // ....<...
                                /* 0770 */  0x10, 0x3F, 0x3A, 0x00, 0xA7, 0x83, 0x7A, 0xA0,  // .?:...z.
                                /* 0778 */  0x07, 0xD9, 0x40, 0x8F, 0x0E, 0xC0, 0xFF, 0xAC,  // ..@.....
                                /* 0780 */  0xEE, 0xA3, 0x03, 0x70, 0x1A, 0x3F, 0x7C, 0x21,  // ...p.?|!
                                /* 0788 */  0x47, 0x07, 0xD4, 0x10, 0x2C, 0xF6, 0x10, 0x83,  // G...,...
                                /* 0790 */  0xD0, 0x78, 0x53, 0x26, 0xC3, 0x7D, 0x4D, 0xF1,  // .xS&.}M.
                                /* 0798 */  0x78, 0x7C, 0x6A, 0x60, 0x07, 0x07, 0x2E, 0x8D,  // x|j`....
                                /* 07A0 */  0x42, 0xE7, 0x29, 0x1F, 0x1C, 0xB8, 0x14, 0x38,  // B.)....8
                                /* 07A8 */  0x0A, 0xE2, 0x83, 0x83, 0x63, 0x1E, 0x1C, 0xA0,  // ....c...
                                /* 07B0 */  0xC7, 0x3A, 0xC2, 0x80, 0x42, 0x1E, 0x14, 0xFD,  // .:..B...
                                /* 07B8 */  0xFF, 0x8F, 0x14, 0xFE, 0xD4, 0xD8, 0x0A, 0x8F,  // ........
                                /* 07C0 */  0x0D, 0x77, 0x6A, 0x00, 0x9C, 0x1C, 0xE2, 0x7D,  // .wj....}
                                /* 07C8 */  0x6A, 0x00, 0x97, 0x87, 0x53, 0x03, 0xE8, 0x26,  // j...S..&
                                /* 07D0 */  0xEA, 0xF3, 0x0B, 0xB8, 0x86, 0x0F, 0xE9, 0xD0,  // ........
                                /* 07D8 */  0x80, 0x3A, 0x01, 0xF8, 0xF4, 0x8D, 0xC1, 0x65,  // .:.....e
                                /* 07E0 */  0xC6, 0x46, 0xA9, 0x33, 0xB5, 0x67, 0xC3, 0xCE,  // .F.3.g..
                                /* 07E8 */  0x98, 0xEC, 0xD4, 0xC0, 0xC5, 0x51, 0xE8, 0xD8,  // .....Q..
                                /* 07F0 */  0xE0, 0x53, 0x03, 0x17, 0x03, 0x47, 0x41, 0x7C,  // .S...GA|
                                /* 07F8 */  0x6A, 0x70, 0xD0, 0x53, 0x03, 0xF4, 0x53, 0xA2,  // jp.S..S.
                                /* 0800 */  0x4F, 0x0D, 0x70, 0xFE, 0xFF, 0xA7, 0x06, 0xDC,  // O.p.....
                                /* 0808 */  0x81, 0x19, 0x3C, 0x73, 0xE3, 0xE7, 0x30, 0x0F,  // ..<s..0.
                                /* 0810 */  0x0E, 0x77, 0x76, 0x01, 0x1C, 0x82, 0xFB, 0x14,  // .wv.....
                                /* 0818 */  0x05, 0xDC, 0xC6, 0x0F, 0xF1, 0xDC, 0x00, 0x7D,  // .......}
                                /* 0820 */  0xD6, 0xCF, 0x0D, 0xC0, 0xEA, 0xFF, 0x7F, 0x6E,  // .......n
                                /* 0828 */  0x00, 0x56, 0x73, 0x7B, 0x6E, 0x00, 0x9C, 0x9A,  // .Vs{n...
                                /* 0830 */  0x38, 0x37, 0x00, 0xC9, 0xF1, 0xC3, 0x38, 0xCC,  // 87....8.
                                /* 0838 */  0xE1, 0x45, 0x9F, 0x1B, 0xD0, 0x53, 0x8B, 0x51,  // .E...S.Q
                                /* 0840 */  0x3C, 0x34, 0xFA, 0xCC, 0xED, 0x83, 0x03, 0x3F,  // <4.....?
                                /* 0848 */  0xCB, 0xF9, 0xE4, 0xE0, 0x83, 0x03, 0x97, 0x03,  // ........
                                /* 0850 */  0x47, 0x41, 0xFC, 0xFF, 0x3F, 0x38, 0x38, 0xEA,  // GA..?88.
                                /* 0858 */  0xC1, 0x01, 0x7A, 0xB4, 0x83, 0x03, 0x28, 0x0E,  // ..z...(.
                                /* 0860 */  0x3E, 0xE0, 0x39, 0xF6, 0xF0, 0xD1, 0xB1, 0xA9,  // >.9.....
                                /* 0868 */  0x62, 0x4F, 0x0E, 0x80, 0x93, 0x33, 0x98, 0x4F,  // bO...3.O
                                /* 0870 */  0x0E, 0xE0, 0x52, 0x71, 0x72, 0x00, 0xDD, 0x9C,  // ..Rqr...
                                /* 0878 */  0x1E, 0xA3, 0xC0, 0x7A, 0x00, 0x80, 0x73, 0x74,  // ...z..st
                                /* 0880 */  0xC0, 0x8D, 0xC1, 0x92, 0x8F, 0x0E, 0x08, 0xAD,  // ........
                                /* 0888 */  0x67, 0x5D, 0x32, 0x8C, 0x73, 0xE0, 0x87, 0x4A,  // g]2.s..J
                                /* 0890 */  0xCC, 0xFF, 0xFF, 0x78, 0x0B, 0xF8, 0xB8, 0x12,  // ...x....
                                /* 0898 */  0xC4, 0x3A, 0xF5, 0xB7, 0x2F, 0x4F, 0xF2, 0x45,  // .:../O.E
                                /* 08A0 */  0xDD, 0x37, 0x63, 0x36, 0x3D, 0xCC, 0xC9, 0x01,  // .7c6=...
                                /* 08A8 */  0x70, 0x72, 0xF8, 0x07, 0xDF, 0xC8, 0x7D, 0xF8,  // pr....}.
                                /* 08B0 */  0x07, 0x4E, 0x27, 0x07, 0x7E, 0x02, 0xC0, 0xDF,  // .N'.~...
                                /* 08B8 */  0x17, 0xF0, 0x87, 0x7F, 0xDC, 0xFF, 0x5F, 0x14,  // ......_.
                                /* 08C0 */  0x84, 0x02, 0x1C, 0xFE, 0x21, 0x9D, 0x2C, 0x31,  // ....!.,1
                                /* 08C8 */  0x08, 0xE7, 0xF0, 0x1C, 0x6B, 0xCF, 0x27, 0x4C,  // ....k.'L
                                /* 08D0 */  0x7A, 0x7C, 0xE0, 0x27, 0x08, 0x1F, 0x65, 0x7C,  // z|.'..e|
                                /* 08D8 */  0x7C, 0xE0, 0xB2, 0xE0, 0x28, 0x88, 0x8F, 0x0F,  // |...(...
                                /* 08E0 */  0x8E, 0x7C, 0x7C, 0x80, 0x1E, 0xF1, 0xF8, 0x00,  // .||.....
                                /* 08E8 */  0x8A, 0xC3, 0xC0, 0x63, 0x0C, 0xD8, 0xD0, 0x0E,  // ...c....
                                /* 08F0 */  0x0E, 0x07, 0x64, 0xB0, 0xA0, 0x21, 0x2A, 0x86,  // ..d..!*.
                                /* 08F8 */  0x22, 0xC0, 0xCD, 0x9F, 0x20, 0x00, 0x2D, 0x27,  // "... .-'
                                /* 0900 */  0x21, 0x9F, 0x20, 0xC0, 0x75, 0x06, 0xF0, 0x09,  // !. .u...
                                /* 0908 */  0x02, 0x5C, 0x47, 0x00, 0x78, 0xFF, 0xFF, 0x23,  // .\G.x..#
                                /* 0910 */  0x00, 0x18, 0x91, 0x62, 0x3D, 0x02, 0x30, 0x89,  // ...b=.0.
                                /* 0918 */  0xA7, 0x3B, 0xB4, 0xF8, 0x23, 0x37, 0xE2, 0xFC,  // .;..#7..
                                /* 0920 */  0x00, 0x4B, 0xEE, 0xF9, 0x01, 0x25, 0x94, 0x42,  // .K...%.B
                                /* 0928 */  0x07, 0x08, 0x9F, 0x1F, 0xF8, 0x61, 0xD7, 0x60,  // .....a.`
                                /* 0930 */  0x06, 0xF1, 0xF9, 0xC1, 0xA1, 0xCF, 0x0F, 0xD0,  // ........
                                /* 0938 */  0x43, 0x9E, 0xB8, 0x41, 0x21, 0xF6, 0x88, 0x0C,  // C..A!...
                                /* 0940 */  0xBA, 0xF1, 0xC2, 0xC3, 0xB4, 0x2F, 0x0C, 0x69,  // ...../.i
                                /* 0948 */  0x46, 0xD0, 0x19, 0x0F, 0xF0, 0x72, 0x22, 0xF2,  // F....r".
                                /* 0950 */  0x01, 0x02, 0x5C, 0x36, 0x60, 0xE9, 0xFF, 0xFF,  // ..\6`...
                                /* 0958 */  0x00, 0x01, 0x9E, 0x33, 0x00, 0xF0, 0x12, 0x76,  // ...3...v
                                /* 0960 */  0xCE, 0x43, 0x0B, 0x3F, 0xD3, 0x40, 0x9A, 0xF3,  // .C.?.@..
                                /* 0968 */  0x8B, 0xB8, 0x7D, 0x82, 0x88, 0xC0, 0xE7, 0x07,  // ..}.....
                                /* 0970 */  0x1F, 0x21, 0xF8, 0x91, 0xD3, 0x07, 0x2C, 0x1F,  // .!....,.
                                /* 0978 */  0x21, 0xB8, 0x24, 0x38, 0x0A, 0xE2, 0x23, 0x84,  // !.$8..#.
                                /* 0980 */  0xE3, 0x1E, 0x21, 0xA0, 0xC7, 0x3B, 0xD1, 0x80,  // ..!..;..
                                /* 0988 */  0xE2, 0x64, 0x06, 0x1E, 0xA4, 0x33, 0xF3, 0x48,  // .d...3.H
                                /* 0990 */  0x8D, 0xF2, 0xF2, 0x81, 0x3F, 0xCF, 0x00, 0x5E,  // ....?..^
                                /* 0998 */  0xFE, 0xFF, 0x27, 0x3D, 0x70, 0xEA, 0x38, 0xE9,  // ..'=p.8.
                                /* 09A0 */  0x01, 0xAD, 0x03, 0x00, 0x38, 0x04, 0x1F, 0x1E,  // ....8...
                                /* 09A8 */  0xD0, 0x21, 0x0E, 0x0F, 0x54, 0x21, 0x86, 0x0E,  // .!..T!..
                                /* 09B0 */  0x0E, 0x47, 0xEB, 0xE3, 0x03, 0xEE, 0xF2, 0xC0,  // .G......
                                /* 09B8 */  0x0E, 0x9F, 0x3E, 0x3C, 0xF0, 0x13, 0x8D, 0x4F,  // ..><...O
                                /* 09C0 */  0x58, 0x3E, 0x3C, 0xF0, 0xE3, 0x9E, 0x4F, 0x9E,  // X><...O.
                                /* 09C8 */  0xFC, 0xF0, 0xE0, 0xE8, 0x87, 0x07, 0xE8, 0x67,  // .......g
                                /* 09D0 */  0x4F, 0x1F, 0x1E, 0xE0, 0x1F, 0xA1, 0xF9, 0x60,  // O......`
                                /* 09D8 */  0xE1, 0x4F, 0xD3, 0x28, 0xD1, 0x0E, 0xF1, 0x3D,  // .O.(...=
                                /* 09E0 */  0xE0, 0x3C, 0x82, 0x18, 0xE7, 0x61, 0x8F, 0xC1,  // .<...a..
                                /* 09E8 */  0x9E, 0xEC, 0x19, 0xDB, 0xF5, 0x11, 0x02, 0x08,  // ........
                                /* 09F0 */  0xFE, 0xFF, 0x8F, 0x10, 0xC0, 0xE5, 0x90, 0xE6,  // ........
                                /* 09F8 */  0x23, 0x04, 0xB8, 0x7C, 0x1C, 0x21, 0x40, 0x77,  // #..|.!@w
                                /* 0A00 */  0x0C, 0x00, 0x8E, 0xB2, 0x0F, 0x12, 0x28, 0x29,  // ......()
                                /* 0A08 */  0x07, 0x09, 0x7A, 0xCA, 0x61, 0x17, 0x09, 0x7E,  // ..z.a..~
                                /* 0A10 */  0x8A, 0x60, 0xD2, 0x4F, 0x11, 0xA8, 0x83, 0x84,  // .`.O....
                                /* 0A18 */  0xCF, 0xA2, 0x3E, 0x45, 0xF0, 0xF3, 0x30, 0x07,  // ..>E..0.
                                /* 0A20 */  0xF1, 0x29, 0xC2, 0x34, 0x3E, 0x45, 0xC0, 0x0D,  // .).4>E..
                                /* 0A28 */  0x7C, 0xC6, 0x02, 0xC5, 0xD4, 0x8E, 0x17, 0x2C,  // |......,
                                /* 0A30 */  0xA3, 0xF7, 0x59, 0xCF, 0xC7, 0x45, 0x9F, 0x38,  // ..Y..E.8
                                /* 0A38 */  0x8C, 0x71, 0xF6, 0xE1, 0xA2, 0xBE, 0xF0, 0x31,  // .q.....1
                                /* 0A40 */  0x2C, 0x36, 0x66, 0xDC, 0xFF, 0x7F, 0xCC, 0x6C,  // ,6f....l
                                /* 0A48 */  0x2A, 0xC6, 0x38, 0x7C, 0x7E, 0xD2, 0x02, 0xBC,  // *.8|~...
                                /* 0A50 */  0x1C, 0xF1, 0x7D, 0x90, 0x00, 0xD7, 0x58, 0x7C,  // ..}...X|
                                /* 0A58 */  0x90, 0x00, 0xD7, 0x49, 0x00, 0xF8, 0x86, 0x3A,  // ...I...:
                                /* 0A60 */  0x4B, 0xA0, 0xC4, 0x9D, 0xD0, 0x7C, 0x38, 0x46,  // K....|8F
                                /* 0A68 */  0xCC, 0xF7, 0x68, 0x7C, 0xF8, 0x8A, 0x70, 0x06,  // ..h|..p.
                                /* 0A70 */  0xC6, 0x39, 0x37, 0x1F, 0x95, 0x0D, 0xF3, 0xF6,  // .97.....
                                /* 0A78 */  0xE0, 0xAB, 0x4C, 0x90, 0x30, 0x6F, 0xA9, 0x61,  // ..L.0o.a
                                /* 0A80 */  0xCE, 0x23, 0x4C, 0x94, 0x04, 0x3E, 0xA1, 0xFA,  // .#L..>..
                                /* 0A88 */  0x50, 0xC1, 0xCF, 0x15, 0x3E, 0x82, 0xF9, 0x50,  // P...>..P
                                /* 0A90 */  0xC1, 0xA5, 0xC2, 0x51, 0x10, 0x1F, 0x2A, 0x2C,  // ...Q..*,
                                /* 0A98 */  0xE3, 0x50, 0x81, 0xFA, 0xFF, 0x1F, 0x2A, 0xE0,  // .P....*.
                                /* 0AA0 */  0xC4, 0x3E, 0xE9, 0x80, 0x42, 0xFE, 0xA9, 0x16,  // .>..B...
                                /* 0AA8 */  0x74, 0x47, 0x01, 0x8F, 0x10, 0xC6, 0x8D, 0xC4,  // tG......
                                /* 0AB0 */  0x27, 0x13, 0x9F, 0xDB, 0x8C, 0x63, 0xB0, 0xC3,  // '....c..
                                /* 0AB8 */  0xC5, 0x61, 0x63, 0x8E, 0xCC, 0x9E, 0x2B, 0xE6,  // .ac...+.
                                /* 0AC0 */  0x5C, 0x01, 0x38, 0x39, 0xCA, 0xF9, 0x5C, 0x01,  // \.89..\.
                                /* 0AC8 */  0x2E, 0x23, 0xE7, 0x0A, 0xD0, 0x1D, 0x06, 0x80,  // .#......
                                /* 0AD0 */  0xD7, 0xFF, 0xFF, 0x30, 0x00, 0x8E, 0x93, 0x21,  // ...0...!
                                /* 0AD8 */  0x6E, 0x3C, 0x96, 0x7D, 0xB4, 0x40, 0xCC, 0xFC,  // n<.}.@..
                                /* 0AE0 */  0xB0, 0x5F, 0x02, 0x1E, 0x2C, 0xF8, 0x59, 0x02,  // ._..,.Y.
                                /* 0AE8 */  0x77, 0xE0, 0xE1, 0x07, 0x43, 0x1F, 0x29, 0xB8,  // w...C.).
                                /* 0AF0 */  0x28, 0x38, 0x0A, 0xE2, 0x23, 0x85, 0x8F, 0x3B,  // (8..#..;
                                /* 0AF8 */  0x3E, 0x52, 0xC0, 0x0D, 0x78, 0xA4, 0x00, 0xC5,  // >R..x...
                                /* 0B00 */  0xB9, 0x1B, 0x7C, 0x93, 0x63, 0x03, 0x87, 0x77,  // ..|.c..w
                                /* 0B08 */  0x90, 0x07, 0x2C, 0x2A, 0x39, 0x47, 0x80, 0xEA,  // ..,*9G..
                                /* 0B10 */  0xFF, 0x7F, 0x02, 0x00, 0x4E, 0x87, 0x07, 0x98,  // ....N...
                                /* 0B18 */  0x18, 0x0F, 0x0F, 0x80, 0xAF, 0xC9, 0xB1, 0xC3,  // ........
                                /* 0B20 */  0x03, 0x60, 0xF6, 0xFF, 0x7F, 0x62, 0xF0, 0x29,  // .`...b.)
                                /* 0B28 */  0xC0, 0x87, 0x07, 0xE0, 0x76, 0x02, 0x80, 0x2F,  // ....v../
                                /* 0B30 */  0xFA, 0xF0, 0x80, 0x12, 0x05, 0xA1, 0x20, 0x87,  // ...... .
                                /* 0B38 */  0x07, 0xC4, 0x11, 0x1E, 0xCE, 0x58, 0x1F, 0x16,  // .....X..
                                /* 0B40 */  0x8C, 0xEF, 0x1B, 0x98, 0xCF, 0xA9, 0x80, 0x97,  // ........
                                /* 0B48 */  0xF1, 0xF2, 0x23, 0x37, 0x38, 0x70, 0x4E, 0xE0,  // ..#78pN.
                                /* 0B50 */  0x28, 0x71, 0xA7, 0x08, 0xE0, 0xFA, 0xFF, 0x3F,  // (q.....?
                                /* 0B58 */  0xA7, 0x02, 0xAF, 0xF3, 0xA7, 0xCF, 0xA9, 0xC0,  // ........
                                /* 0B60 */  0xE9, 0x18, 0x00, 0xEE, 0x40, 0x47, 0x09, 0xD4,  // ....@G..
                                /* 0B68 */  0x11, 0xC0, 0xC1, 0xCE, 0xF2, 0x90, 0xA6, 0xF3,  // ........
                                /* 0B70 */  0x8C, 0x88, 0x1B, 0xE8, 0x69, 0xD8, 0x25, 0x8A,  // ....i.%.
                                /* 0B78 */  0xEE, 0xAD, 0x3E, 0x0A, 0x02, 0x66, 0x2E, 0x07,  // ..>..f..
                                /* 0B80 */  0x2F, 0x09, 0x07, 0xEB, 0x29, 0xE2, 0x8E, 0x95,  // /...)...
                                /* 0B88 */  0x30, 0xBC, 0xCF, 0x91, 0x60, 0x05, 0x8C, 0xF2,  // 0...`...
                                /* 0B90 */  0xD8, 0xEB, 0x63, 0xE5, 0xFF, 0xFF, 0x30, 0x7D,  // ..c...0}
                                /* 0B98 */  0x92, 0x06, 0x5C, 0x1D, 0x05, 0xC1, 0x67, 0xE5,  // ..\...g.
                                /* 0BA0 */  0x28, 0x08, 0xB4, 0x0E, 0x03, 0xC0, 0xE9, 0xC8,  // (.......
                                /* 0BA8 */  0x83, 0xE3, 0x70, 0x8C, 0xF3, 0x34, 0xE2, 0x46,  // ..p..4.F
                                /* 0BB0 */  0x81, 0x3B, 0xF0, 0x60, 0xCF, 0x61, 0x3E, 0x54,  // .;.`.a>T
                                /* 0BB8 */  0x70, 0xC1, 0x14, 0x3A, 0xF1, 0xF8, 0x50, 0xC1,  // p..:..P.
                                /* 0BC0 */  0x05, 0xC2, 0x51, 0x10, 0x1F, 0x2A, 0x1C, 0xFE,  // ..Q..*..
                                /* 0BC8 */  0xC0, 0x03, 0xE5, 0xFF, 0x7F, 0xA8, 0xC0, 0x85,  // ........
                                /* 0BD0 */  0x3D, 0x52, 0x83, 0xE2, 0x1C, 0x70, 0xE0, 0x60,  // =R...p.`
                                /* 0BD8 */  0x19, 0x1E, 0x9B, 0x30, 0xCC, 0xA9, 0x63, 0x2F,  // ...0..c/
                                /* 0BE0 */  0x27, 0x8F, 0x04, 0xC6, 0xE1, 0x07, 0x6A, 0xC0,  // '.....j.
                                /* 0BE8 */  0x4B, 0xC8, 0xF3, 0x04, 0xE8, 0xB4, 0x9C, 0x27,  // K......'
                                /* 0BF0 */  0x40, 0x77, 0x0E, 0x00, 0x9E, 0x01, 0x8E, 0x12,  // @w......
                                /* 0BF8 */  0xA8, 0xFF, 0x3F, 0x87, 0xC3, 0x1C, 0xC6, 0x10,  // ..?.....
                                /* 0C00 */  0x47, 0x09, 0x98, 0xE2, 0x8F, 0x12, 0xA8, 0xD3,  // G.......
                                /* 0C08 */  0x84, 0x8F, 0x63, 0x3E, 0x4A, 0x70, 0x99, 0x70,  // ..c>Jp.p
                                /* 0C10 */  0x14, 0xC4, 0x47, 0x09, 0x4B, 0x38, 0xEE, 0x40,  // ..G.K8.@
                                /* 0C18 */  0x8F, 0x7C, 0xDC, 0x01, 0x05, 0x88, 0x0F, 0x4D,  // .|.....M
                                /* 0C20 */  0xE0, 0x1A, 0x33, 0x38, 0x8F, 0x63, 0x80, 0xA3,  // ..38.c..
                                /* 0C28 */  0x53, 0x9D, 0x4F, 0x13, 0xE0, 0xF2, 0x72, 0x9A,  // S.O...r.
                                /* 0C30 */  0x00, 0xDD, 0xFF, 0xFF, 0x28, 0x00, 0x9C, 0x83,  // ....(...
                                /* 0C38 */  0x1C, 0x16, 0xD1, 0x91, 0x8E, 0x64, 0xA0, 0x18,  // .....d..
                                /* 0C40 */  0xF7, 0xDB, 0xA4, 0x0F, 0x46, 0x3A, 0x52, 0xA0,  // ....F:R.
                                /* 0C48 */  0xCE, 0x63, 0x3E, 0x53, 0xF8, 0x48, 0xC1, 0x85,  // .c>S.H..
                                /* 0C50 */  0xC2, 0x51, 0x10, 0x1F, 0x29, 0x2C, 0xE2, 0x48,  // .Q..),.H
                                /* 0C58 */  0x01, 0x3D, 0xF4, 0x91, 0x02, 0x14, 0xE2, 0x0F,  // .=......
                                /* 0C60 */  0x4D, 0x40, 0x06, 0xEA, 0x38, 0x7C, 0x22, 0xF7,  // M@..8|".
                                /* 0C68 */  0x7D, 0xC9, 0x78, 0xAF, 0x4C, 0xF0, 0xCE, 0x14,  // }.x.L...
                                /* 0C70 */  0xC0, 0xF4, 0xFF, 0x7F, 0xA6, 0x00, 0xD7, 0xC1,  // ........
                                /* 0C78 */  0xC9, 0x67, 0x0A, 0x70, 0xC1, 0xF9, 0x4C, 0x01,  // .g.p..L.
                                /* 0C80 */  0xAE, 0xB3, 0x00, 0xF0, 0x16, 0x7A, 0xB8, 0x46,  // .....z.F
                                /* 0C88 */  0x9F, 0x24, 0x7C, 0x12, 0x62, 0xB7, 0x09, 0x1F,  // .$|.b...
                                /* 0C90 */  0x79, 0xB0, 0x92, 0x0F, 0x14, 0xA8, 0xB3, 0xAC,  // y.......
                                /* 0C98 */  0xCF, 0x8A, 0x3E, 0x50, 0x70, 0x71, 0x70, 0x14,  // ..>Ppqp.
                                /* 0CA0 */  0xC4, 0x07, 0x0A, 0x07, 0x3F, 0x8C, 0x41, 0x0F,  // ....?.A.
                                /* 0CA8 */  0x7A, 0x18, 0x03, 0x85, 0xE0, 0x53, 0x13, 0xE8,  // z....S..
                                /* 0CB0 */  0x66, 0x0B, 0xE3, 0xCE, 0x04, 0xFB, 0xFF, 0x7F,  // f.......
                                /* 0CB8 */  0x94, 0x00, 0x9C, 0x1C, 0xD1, 0x7D, 0x94, 0x00,  // .....}..
                                /* 0CC0 */  0x97, 0x99, 0xA3, 0x04, 0xE8, 0x4E, 0x01, 0xC0,  // .....N..
                                /* 0CC8 */  0x4F, 0xF8, 0x21, 0x02, 0x7D, 0x44, 0xF4, 0x01,  // O.!.}D..
                                /* 0CD0 */  0x88, 0x1D, 0x22, 0x60, 0x9C, 0x60, 0x7D, 0x88,  // .."`.`}.
                                /* 0CD8 */  0xE0, 0xA7, 0x30, 0x1F, 0x24, 0x7C, 0x88, 0xE0,  // ..0.$|..
                                /* 0CE0 */  0x87, 0x7E, 0x1F, 0xFB, 0xF9, 0x21, 0xC2, 0x34,  // .~...!.4
                                /* 0CE8 */  0x3E, 0x44, 0xC0, 0x3D, 0xF8, 0xFB, 0x90, 0x03,  // >D.=....
                                /* 0CF0 */  0x7F, 0x82, 0xC7, 0x8B, 0xFD, 0xFF, 0x1F, 0x96,  // ........
                                /* 0CF8 */  0xE0, 0x8F, 0x17, 0x6C, 0x57, 0x25, 0xFC, 0x41,  // ...lW%.A
                                /* 0D00 */  0x02, 0xB0, 0x72, 0x1C, 0xF1, 0x41, 0x02, 0x5C,  // ..r..A.\
                                /* 0D08 */  0x6A, 0x0E, 0x12, 0xA0, 0x3B, 0x09, 0x00, 0x5F,  // j...;.._
                                /* 0D10 */  0xB9, 0x87, 0x09, 0xD4, 0x71, 0xDC, 0x27, 0x6B,  // ....q.'k
                                /* 0D18 */  0x8F, 0x83, 0x61, 0x1C, 0xF3, 0x1B, 0x40, 0x88,  // ..a...@.
                                /* 0D20 */  0x77, 0x33, 0x9F, 0x5D, 0x61, 0xFD, 0xFF, 0xCF,  // w3.]a...
                                /* 0D28 */  0xAE, 0xC0, 0xE7, 0x2C, 0x81, 0x3B, 0x64, 0x82,  // ...,.;d.
                                /* 0D30 */  0x67, 0xC8, 0x7C, 0x6E, 0x0C, 0x24, 0xD4, 0x53,  // g.|n.$.S
                                /* 0D38 */  0x92, 0x8F, 0x01, 0xA7, 0x72, 0xB0, 0x71, 0x82,  // ....r.q.
                                /* 0D40 */  0xBC, 0x12, 0x78, 0xB8, 0x46, 0xF2, 0xC9, 0x29,  // ..x.F..)
                                /* 0D48 */  0xC8, 0x53, 0xC2, 0x29, 0x44, 0x7D, 0x7D, 0x7B,  // .S.)D}}{
                                /* 0D50 */  0x38, 0x68, 0xEA, 0xEC, 0x0A, 0x88, 0x74, 0x73,  // 8h....ts
                                /* 0D58 */  0x76, 0x05, 0x5A, 0xE7, 0x00, 0xF8, 0xFF, 0xFF,  // v.Z.....
                                /* 0D60 */  0x73, 0x00, 0xFC, 0x73, 0x17, 0x9C, 0x73, 0x04,  // s..s..s.
                                /* 0D68 */  0xCE, 0xE7, 0xB4, 0x75, 0x90, 0xE0, 0xE7, 0x2E,  // ...u....
                                /* 0D70 */  0xE0, 0x78, 0x90, 0xC0, 0x1D, 0x91, 0xC0, 0x33,  // .x.....3
                                /* 0D78 */  0x62, 0xFC, 0xE8, 0x7C, 0x8C, 0x00, 0xBC, 0x9D,  // b..|....
                                /* 0D80 */  0xBB, 0xC0, 0x37, 0x42, 0x1F, 0x23, 0xE0, 0xFE,  // ..7B.#..
                                /* 0D88 */  0xFF, 0xCF, 0x5D, 0xE0, 0x3D, 0x05, 0x80, 0x57,  // ..].=..W
                                /* 0D90 */  0xD2, 0x21, 0x02, 0x35, 0x2E, 0x9F, 0xB6, 0x7C,  // .!.5...|
                                /* 0D98 */  0x88, 0xC0, 0x43, 0x3F, 0x16, 0x1E, 0xCB, 0xB3,  // ..C?....
                                /* 0DA0 */  0x35, 0x3B, 0x47, 0xF3, 0x73, 0x0D, 0x97, 0x77,  // 5;G.s..w
                                /* 0DA8 */  0x8A, 0x40, 0x09, 0x82, 0xA3, 0x20, 0x3E, 0x45,  // .@... >E
                                /* 0DB0 */  0xF8, 0x54, 0xE3, 0x53, 0x04, 0xDC, 0x70, 0xA7,  // .T.S..p.
                                /* 0DB8 */  0x08, 0x50, 0x88, 0x1C, 0x30, 0xC8, 0x2F, 0x91,  // .P..0./.
                                /* 0DC0 */  0x9E, 0x1E, 0x3B, 0x3F, 0x00, 0x4E, 0x42, 0x9D,  // ..;?.NB.
                                /* 0DC8 */  0x1F, 0xA0, 0xFC, 0xFF, 0xCF, 0x0F, 0x70, 0xED,  // ......p.
                                /* 0DD0 */  0x9C, 0x1F, 0x40, 0x37, 0x7E, 0xE0, 0x21, 0xF8,  // ..@7~.!.
                                /* 0DD8 */  0xE4, 0x80, 0x1A, 0xBB, 0x83, 0x9C, 0x1C, 0x10,  // ........
                                /* 0DE0 */  0xD7, 0x7A, 0x76, 0xE4, 0x3A, 0x84, 0x97, 0x84,  // .zv.:...
                                /* 0DE8 */  0xB3, 0x38, 0x9C, 0x9A, 0x81, 0x74, 0xE5, 0x62,  // .8...t.b
                                /* 0DF0 */  0x38, 0x51, 0x9E, 0x52, 0x7D, 0xEE, 0x32, 0x81,  // 8Q.R}.2.
                                /* 0DF8 */  0x0F, 0x5A, 0x3E, 0x3E, 0xF0, 0x23, 0x8D, 0x4F,  // .Z>>.#.O
                                /* 0E00 */  0xCD, 0x3E, 0x3E, 0x70, 0x69, 0x70, 0x14, 0xC4,  // .>>pip..
                                /* 0E08 */  0xC7, 0x07, 0xC7, 0x3E, 0x3E, 0x40, 0x8F, 0x79,  // ...>>@.y
                                /* 0E10 */  0x7C, 0x00, 0x85, 0xDC, 0xF1, 0x82, 0x6E, 0x8A,  // |.....n.
                                /* 0E18 */  0x78, 0xA4, 0x63, 0xC4, 0x02, 0x9D, 0x23, 0xE6,  // x.c...#.
                                /* 0E20 */  0x0C, 0x01, 0xDC, 0xFE, 0xFF, 0x67, 0x08, 0xF0,  // .....g..
                                /* 0E28 */  0xC6, 0x3B, 0x43, 0x80, 0x4E, 0xCF, 0x19, 0x02,  // .;C.N...
                                /* 0E30 */  0x74, 0x87, 0x00, 0xE0, 0x76, 0xCA, 0xC2, 0x71,  // t...v..q
                                /* 0E38 */  0xF8, 0xF0, 0x87, 0x19, 0x9E, 0x4F, 0x38, 0x46,  // .....O8F
                                /* 0E40 */  0x3E, 0x86, 0xB7, 0x0A, 0x4F, 0xEC, 0x48, 0x0E,  // >...O.H.
                                /* 0E48 */  0x21, 0xD0, 0x43, 0x04, 0x60, 0x68, 0x7A, 0xB8,  // !.C.`hz.
                                /* 0E50 */  0x4B, 0x08, 0x9F, 0x1F, 0x3F, 0xAC, 0x31, 0x68,  // K...?.1h
                                /* 0E58 */  0xCC, 0x21, 0x02, 0xF7, 0xFF, 0x3F, 0x44, 0x00,  // .!...?D.
                                /* 0E60 */  0xDE, 0xFC, 0x1C, 0x22, 0x80, 0xDE, 0x21, 0x00,  // ..."..!.
                                /* 0E68 */  0x5C, 0xF2, 0x0F, 0x11, 0xA8, 0x51, 0x39, 0xCE,  // \....Q9.
                                /* 0E70 */  0x91, 0x41, 0xB0, 0xE7, 0x71, 0xA2, 0x2F, 0xF6,  // .A..q./.
                                /* 0E78 */  0xB8, 0x29, 0x86, 0xF6, 0x2C, 0xC2, 0x1C, 0x43,  // .)..,..C
                                /* 0E80 */  0xA4, 0x08, 0x0F, 0x15, 0xC6, 0xEF, 0xF9, 0xF0,  // ........
                                /* 0E88 */  0xEC, 0x73, 0x04, 0xEA, 0x04, 0xE8, 0xB3, 0x84,  // .s......
                                /* 0E90 */  0xCF, 0x11, 0x5C, 0x22, 0x1C, 0x05, 0xF1, 0x39,  // ..\"...9
                                /* 0E98 */  0xC2, 0xF1, 0xCF, 0x11, 0xD0, 0xE3, 0x9E, 0x23,  // .......#
                                /* 0EA0 */  0x40, 0x31, 0x9D, 0x63, 0xC6, 0xFC, 0xFF, 0xC7,  // @1.c....
                                /* 0EA8 */  0x0C, 0x77, 0x72, 0x98, 0x75, 0x1E, 0x1D, 0xF6,  // .wr.u...
                                /* 0EB0 */  0x1E, 0x02, 0x03, 0x3F, 0xCE, 0xFB, 0xAD, 0x2F,  // ...?.../
                                /* 0EB8 */  0x24, 0x11, 0x63, 0xFA, 0x8E, 0xE4, 0x13, 0x20,  // $.c.... 
                                /* 0EC0 */  0xE0, 0xE5, 0x40, 0xE2, 0xB3, 0x04, 0xB8, 0xBE,  // ..@.....
                                /* 0EC8 */  0x09, 0x3E, 0x4B, 0x80, 0xEB, 0x20, 0x00, 0x5C,  // .>K.. .\
                                /* 0ED0 */  0xCF, 0xCB, 0xB8, 0x91, 0xF9, 0x2C, 0xEF, 0xE3,  // .....,..
                                /* 0ED8 */  0x3D, 0x3B, 0x4C, 0xC0, 0x3B, 0xD0, 0x63, 0xFF,  // =;L.;.c.
                                /* 0EE0 */  0xFF, 0xC7, 0x1C, 0xE0, 0x38, 0x1C, 0x43, 0xB3,  // ....8.C.
                                /* 0EE8 */  0x23, 0x09, 0x98, 0x46, 0xC8, 0x96, 0x79, 0xE4,  // #..F..y.
                                /* 0EF0 */  0x70, 0xCF, 0xF2, 0x80, 0xA3, 0x63, 0x0E, 0xF8,  // p....c..
                                /* 0EF8 */  0x0C, 0x1D, 0x73, 0x80, 0xD6, 0x21, 0x00, 0xDE,  // ..s..!..
                                /* 0F00 */  0xFF, 0xFF, 0x10, 0x00, 0xF7, 0x1C, 0x01, 0xE7,  // ........
                                /* 0F08 */  0xE0, 0xC3, 0xCE, 0x11, 0x80, 0x89, 0xD3, 0x17,  // ........
                                /* 0F10 */  0xB8, 0xCF, 0x11, 0x80, 0x6F, 0x45, 0xE7, 0x08,  // ....oE..
                                /* 0F18 */  0x28, 0xFF, 0xFF, 0xD3, 0x17, 0x70, 0x39, 0x04,  // (....p9.
                                /* 0F20 */  0x80, 0x4B, 0xF6, 0x39, 0x02, 0x25, 0x0D, 0x42,  // .K.9.%.B
                                /* 0F28 */  0x61, 0x4E, 0x5F, 0x90, 0x06, 0x7D, 0x00, 0xF1,  // aN_..}..
                                /* 0F30 */  0x8F, 0xF0, 0x58, 0x3C, 0x04, 0x6B, 0xBC, 0xF5,  // ..X<.k..
                                /* 0F38 */  0x20, 0x09, 0x7C, 0x9A, 0x07, 0xBC, 0x4C, 0x0F,  //  .|...L.
                                /* 0F40 */  0x7F, 0x49, 0x02, 0xCF, 0x51, 0x02, 0xF8, 0xFE,  // .I..Q...
                                /* 0F48 */  0xFF, 0x4F, 0xF3, 0xC0, 0xC9, 0xD1, 0x69, 0x1E,  // .O....i.
                                /* 0F50 */  0x68, 0x9D, 0x02, 0xC0, 0x2B, 0xFD, 0x2C, 0x81,  // h...+.,.
                                /* 0F58 */  0x92, 0x74, 0x88, 0xA6, 0x87, 0x1E, 0x76, 0x7B,  // .t....v{
                                /* 0F60 */  0xC5, 0x4F, 0x04, 0x73, 0xB2, 0x20, 0xE7, 0x08,  // .O.s. ..
                                /* 0F68 */  0xD4, 0x19, 0xC7, 0x72, 0xCF, 0x11, 0xA8, 0x33,  // ...r...3
                                /* 0F70 */  0xBD, 0x4F, 0xF5, 0xFC, 0x1C, 0xE1, 0xF0, 0xE7,  // .O......
                                /* 0F78 */  0x08, 0xE8, 0xE7, 0x7A, 0x9F, 0xBB, 0xE0, 0x0F,  // ...z....
                                /* 0F80 */  0xE7, 0x90, 0xC1, 0xE2, 0xFA, 0xAC, 0x0B, 0x61,  // .......a
                                /* 0F88 */  0xAC, 0x1E, 0x1E, 0x83, 0x89, 0x75, 0xD6, 0x11,  // .....u..
                                /* 0F90 */  0x82, 0xF8, 0x48, 0x62, 0x64, 0xDF, 0x47, 0xEC,  // ..Hbd.G.
                                /* 0F98 */  0x7D, 0xCE, 0x64, 0x0C, 0x47, 0xE2, 0x93, 0x04,  // }.d.G...
                                /* 0FA0 */  0xEE, 0xFF, 0x7F, 0x92, 0x00, 0x3C, 0x9C, 0x47,  // .....<.G
                                /* 0FA8 */  0x7C, 0x92, 0x00, 0xD7, 0x11, 0xC1, 0x27, 0x09,  // |.....'.
                                /* 0FB0 */  0x70, 0x81, 0x3D, 0x7A, 0x81, 0xED, 0x24, 0x00,  // p.=z..$.
                                /* 0FB8 */  0x46, 0xB0, 0x20, 0x31, 0x5E, 0x5B, 0x2D, 0xFE,  // F. 1^[-.
                                /* 0FC0 */  0x34, 0x01, 0x25, 0xCA, 0x09, 0x1F, 0xE2, 0x69,  // 4.%....i
                                /* 0FC8 */  0x02, 0x7B, 0x66, 0x05, 0xBE, 0xFF, 0xFF, 0xB3,  // .{f.....
                                /* 0FD0 */  0x25, 0x78, 0x4E, 0x4A, 0x7C, 0xD8, 0xF0, 0x61,  // %xNJ|..a
                                /* 0FD8 */  0xFB, 0x9A, 0x37, 0xE2, 0x04, 0x06, 0x38, 0x3A,  // ..7...8:
                                /* 0FE0 */  0xB3, 0x82, 0xCF, 0xD2, 0x99, 0x15, 0x68, 0x1D,  // ......h.
                                /* 0FE8 */  0x04, 0x80, 0x83, 0xE8, 0x05, 0xEA, 0x34, 0xC1,  // ......4.
                                /* 0FF0 */  0x45, 0x1D, 0xA9, 0xFD, 0x72, 0xD0, 0x31, 0x9F,  // E...r.1.
                                /* 0FF8 */  0x83, 0x1E, 0x8D, 0xD1, 0x0F, 0x84, 0x8D, 0xF8,  // ........
                                /* 1000 */  0xD5, 0xC7, 0x63, 0x88, 0xF1, 0xFF, 0x3F, 0x4D,  // ..c...?M
                                /* 1008 */  0x5F, 0xC1, 0x7C, 0xB8, 0xF0, 0x39, 0xC2, 0xC7,  // _.|..9..
                                /* 1010 */  0x08, 0x8B, 0xA6, 0x90, 0xAC, 0xE3, 0x04, 0x4A,  // .......J
                                /* 1018 */  0xC8, 0x71, 0x82, 0x82, 0x18, 0xD0, 0x29, 0x8F,  // .q....).
                                /* 1020 */  0x13, 0xE8, 0x23, 0x0E, 0x1B, 0xC2, 0xE3, 0x86,  // ..#.....
                                /* 1028 */  0x73, 0x9D, 0x26, 0xE8, 0x58, 0x3D, 0x72, 0xAE,  // s.&.X=r.
                                /* 1030 */  0xE1, 0xA8, 0x83, 0x80, 0x7D, 0x41, 0x3B, 0x68,  // ....}A;h
                                /* 1038 */  0xB0, 0x4C, 0x0E, 0xBF, 0xCB, 0x13, 0xF0, 0xD8,  // .L......
                                /* 1040 */  0x3C, 0x13, 0xAB, 0xB9, 0x1B, 0xA0, 0xE6, 0xE1,  // <.......
                                /* 1048 */  0x2B, 0x04, 0x46, 0xD7, 0x11, 0x02, 0x64, 0xFA,  // +.F...d.
                                /* 1050 */  0x6E, 0x10, 0x20, 0x47, 0xE7, 0x07, 0x39, 0x8F,  // n. G..9.
                                /* 1058 */  0x9D, 0xCB, 0x19, 0x3B, 0x05, 0xF1, 0xD8, 0x1D,  // ...;....
                                /* 1060 */  0x75, 0xEC, 0x68, 0x29, 0x20, 0x1A, 0xAC, 0xEF,  // u.h) ...
                                /* 1068 */  0x03, 0x58, 0x82, 0xB1, 0xCE, 0x26, 0xA0, 0x90,  // .X...&..
                                /* 1070 */  0x77, 0xC2, 0x01, 0xD1, 0x40, 0xD8, 0xA1, 0xCB,  // w...@...
                                /* 1078 */  0x13, 0xE1, 0xE7, 0x11, 0x78, 0xFF, 0xFF, 0xB1,  // ....x...
                                /* 1080 */  0xF9, 0x3C, 0x02, 0xBC, 0xC3, 0x9D, 0x47, 0x40,  // .<....G@
                                /* 1088 */  0xA7, 0xE9, 0x3C, 0x02, 0x3A, 0xB1, 0xE7, 0x11,  // ..<.:...
                                /* 1090 */  0xD0, 0x9D, 0x26, 0x60, 0x5C, 0x0D, 0xF8, 0x15,  // ..&`\...
                                /* 1098 */  0x00, 0x77, 0xB8, 0xD4, 0x39, 0x09, 0x7D, 0x3A,  // .w..9.}:
                                /* 10A0 */  0xF2, 0x51, 0x04, 0xD6, 0x8D, 0xD3, 0x07, 0x84,  // .Q......
                                /* 10A8 */  0xB3, 0x32, 0x81, 0x65, 0x9E, 0x93, 0x50, 0xC7,  // .2.e..P.
                                /* 10B0 */  0x37, 0xCB, 0x3B, 0x3E, 0xA0, 0x04, 0xC1, 0x51,  // 7.;>...Q
                                /* 10B8 */  0x10, 0x1F, 0x1F, 0x7C, 0x78, 0xF3, 0x39, 0x09,  // ...|x.9.
                                /* 10C0 */  0xEE, 0xF8, 0x7D, 0x78, 0x80, 0x2F, 0x72, 0xC0,  // ..}x./r.
                                /* 10C8 */  0xA0, 0xF8, 0xFF, 0x9F, 0x45, 0x60, 0xCD, 0xD5,  // ....E`..
                                /* 10D0 */  0xC3, 0xC3, 0x1C, 0x8F, 0x00, 0x27, 0xC1, 0xCE,  // .....'..
                                /* 10D8 */  0x0F, 0xA0, 0xF3, 0x74, 0x7E, 0x00, 0xDD, 0x80,  // ...t~...
                                /* 10E0 */  0x9E, 0x1F, 0xC0, 0x7F, 0x02, 0xC0, 0x8A, 0x3C,  // .......<
                                /* 10E8 */  0x3D, 0xA0, 0x38, 0x2C, 0xFF, 0xB0, 0x0B, 0x69,  // =.8,...i
                                /* 10F0 */  0x0E, 0x81, 0xC2, 0xBF, 0xB6, 0xF8, 0x40, 0x4E,  // ......@N
                                /* 10F8 */  0x0E, 0x0F, 0xA8, 0xF3, 0xB7, 0x0F, 0x10, 0x3E,  // .......>
                                /* 1100 */  0x3C, 0x70, 0x61, 0x70, 0x14, 0xC4, 0x87, 0x07,  // <pap....
                                /* 1108 */  0x87, 0x3E, 0x3C, 0x40, 0x0F, 0x79, 0x78, 0x80,  // .><@.yx.
                                /* 1110 */  0xF6, 0xFF, 0x3F, 0x3C, 0xE0, 0x0E, 0x1F, 0xE0,  // ..?<....
                                /* 1118 */  0x19, 0x1D, 0x76, 0x8E, 0x67, 0xD7, 0xD6, 0xF0,  // ..v.g...
                                /* 1120 */  0x10, 0xA7, 0x52, 0xFC, 0x01, 0x02, 0xF0, 0x72,  // ..R....r
                                /* 1128 */  0x9E, 0x01, 0xDF, 0x21, 0xCC, 0xE7, 0x19, 0xE0,  // ...!....
                                /* 1130 */  0x74, 0x06, 0x00, 0x9F, 0xB8, 0x23, 0x04, 0x5A,  // t....#.Z
                                /* 1138 */  0xFA, 0x79, 0x06, 0x71, 0x7E, 0xC0, 0x80, 0x3C,  // .y.q~..<
                                /* 1140 */  0xB6, 0x61, 0x4F, 0xDD, 0x3E, 0x42, 0x70, 0x91,  // .aO.>Bp.
                                /* 1148 */  0x14, 0x3A, 0x40, 0xFA, 0x08, 0xC1, 0xFF, 0xFF,  // .:@.....
                                /* 1150 */  0xA2, 0xE0, 0x28, 0x88, 0x8F, 0x10, 0x0E, 0x7C,  // ..(....|
                                /* 1158 */  0x84, 0x80, 0x7E, 0x66, 0xF6, 0x11, 0x02, 0xFE,  // ..~f....
                                /* 1160 */  0xF9, 0x03, 0x7C, 0xA3, 0xC5, 0xCE, 0x0F, 0x77,  // ..|....w
                                /* 1168 */  0xA0, 0x01, 0x4C, 0x9A, 0x3A, 0xD0, 0x00, 0xBD,  // ..L.:...
                                /* 1170 */  0x13, 0x00, 0xFC, 0xE3, 0x03, 0x9C, 0xB3, 0xAE,  // ........
                                /* 1178 */  0xFF, 0xFF, 0xC7, 0x07, 0xE0, 0x7F, 0xE0, 0xC6,  // ........
                                /* 1180 */  0x8D, 0x16, 0x3C, 0x27, 0x63, 0x7E, 0x7C, 0x00,  // ..<'c~|.
                                /* 1188 */  0x1C, 0xAB, 0x3A, 0x3E, 0x00, 0xAD, 0x13, 0x00,  // ..:>....
                                /* 1190 */  0xFF, 0xFF, 0x9F, 0x00, 0xE0, 0x4B, 0x3D, 0xEB,  // .....K=.
                                /* 1198 */  0xA1, 0x23, 0x1C, 0xAF, 0x20, 0xE1, 0x3C, 0x6E,  // .#.. .<n
                                /* 11A0 */  0x1B, 0xC5, 0x07, 0xD5, 0x87, 0x3F, 0x1F, 0xAF,  // .....?..
                                /* 11A8 */  0xD9, 0xF9, 0x81, 0x1F, 0x21, 0x7C, 0xC0, 0xF2,  // ....!|..
                                /* 11B0 */  0xF9, 0x81, 0x4B, 0x83, 0xA3, 0x20, 0x3E, 0x3F,  // ..K.. >?
                                /* 11B8 */  0x38, 0xF6, 0xF9, 0x01, 0xFA, 0xC9, 0xD8, 0xA7,  // 8.......
                                /* 11C0 */  0x19, 0xF8, 0x72, 0x0F, 0x43, 0xA0, 0x9D, 0x1E,  // ..r.C...
                                /* 11C8 */  0x06, 0xE6, 0xF8, 0xD8, 0x6D, 0x08, 0xC6, 0x11,  // ....m...
                                /* 11D0 */  0x02, 0x70, 0x12, 0xEF, 0x08, 0x01, 0x3A, 0x57,  // .p....:W
                                /* 11D8 */  0x47, 0x08, 0x68, 0xFF, 0xFF, 0x23, 0x04, 0xBC,  // G.h..#..
                                /* 11E0 */  0x43, 0x00, 0x70, 0x3B, 0xD3, 0xC0, 0x3C, 0x42,  // C.p;..<B
                                /* 11E8 */  0xE0, 0x87, 0xF8, 0x36, 0xCA, 0xCF, 0x34, 0x80,  // ...6..4.
                                /* 11F0 */  0x9F, 0xE1, 0xC2, 0x99, 0x1F, 0xE6, 0x4C, 0x03,  // ......L.
                                /* 11F8 */  0x98, 0xF9, 0xFF, 0x9F, 0x20, 0xC0, 0x05, 0xEA,  // .... ...
                                /* 1200 */  0x33, 0x0D, 0x70, 0x3B, 0x01, 0xC0, 0x3F, 0xEF,  // 3.p;..?.
                                /* 1208 */  0xC1, 0x3C, 0x3E, 0x00, 0xFB, 0xF3, 0x1E, 0xB8,  // .<>.....
                                /* 1210 */  0x8F, 0x0F, 0xC0, 0xFF, 0xFF, 0x7F, 0x7C, 0x00,  // ......|.
                                /* 1218 */  0x8E, 0x17, 0xA9, 0xE7, 0x3D, 0x60, 0x77, 0x02,  // ....=`w.
                                /* 1220 */  0x80, 0x2F, 0xF6, 0xF8, 0x80, 0x3A, 0xA2, 0xFA,  // ./...:..
                                /* 1228 */  0x84, 0xE5, 0xE3, 0x03, 0xAC, 0x2B, 0x05, 0x9B,  // .....+..
                                /* 1230 */  0x88, 0x61, 0x7A, 0x3E, 0x11, 0x03, 0x72, 0xC6,  // .az>..r.
                                /* 1238 */  0x0B, 0x67, 0x7E, 0xD8, 0x23, 0x04, 0x58, 0xFE,  // .g~.#.X.
                                /* 1240 */  0xFF, 0x47, 0x08, 0xE0, 0x7E, 0x08, 0xF1, 0x11,  // .G..~...
                                /* 1248 */  0x02, 0x5C, 0xBA, 0x8E, 0x10, 0xA0, 0x13, 0x7C,  // .\.....|
                                /* 1250 */  0x84, 0x00, 0x0A, 0xA7, 0x00, 0xB8, 0xA7, 0x74,  // .......t
                                /* 1258 */  0xDC, 0x31, 0xC2, 0x01, 0x8E, 0x11, 0x88, 0xE9,  // .1......
                                /* 1260 */  0xC6, 0xEC, 0x1D, 0x45, 0x63, 0x38, 0xEA, 0x13,  // ...Ec8..
                                /* 1268 */  0x3C, 0x0A, 0xC3, 0xC7, 0x79, 0xAA, 0x40, 0x1E,  // <...y.@.
                                /* 1270 */  0x23, 0x50, 0xA7, 0x08, 0x9F, 0x6B, 0x7C, 0x8C,  // #P...k|.
                                /* 1278 */  0xE0, 0xB2, 0xE0, 0x28, 0x88, 0x8F, 0x11, 0x8E,  // ...(....
                                /* 1280 */  0x7C, 0x8C, 0x80, 0x1E, 0xF1, 0x18, 0x01, 0x8A,  // |.......
                                /* 1288 */  0x03, 0xC1, 0x31, 0xC3, 0xFA, 0xFF, 0x8F, 0x19,  // ..1.....
                                /* 1290 */  0xDE, 0x04, 0x31, 0x30, 0x47, 0x88, 0x9B, 0x30,  // ..10G..0
                                /* 1298 */  0xEE, 0x14, 0x01, 0x38, 0x89, 0x76, 0x8A, 0x00,  // ...8.v..
                                /* 12A0 */  0x9D, 0xAF, 0x53, 0x04, 0xE8, 0x8E, 0x00, 0xC0,  // ..S.....
                                /* 12A8 */  0xE9, 0x08, 0x81, 0xE3, 0xB0, 0xFC, 0x23, 0x04,  // ......#.
                                /* 12B0 */  0x0A, 0x37, 0xA6, 0x8F, 0x08, 0x27, 0x12, 0xE7,  // .7...'..
                                /* 12B8 */  0xB0, 0x4E, 0xE3, 0x19, 0x30, 0xD0, 0x63, 0x0D,  // .N..0.c.
                                /* 12C0 */  0x70, 0xF9, 0xFF, 0x1F, 0x6B, 0x80, 0x17, 0xC8,  // p...k...
                                /* 12C8 */  0x71, 0xBC, 0x0C, 0xF8, 0xF6, 0xC1, 0x86, 0x88,  // q.......
                                /* 12D0 */  0x05, 0x3A, 0x45, 0xCC, 0x09, 0x02, 0x70, 0x12,  // .:E...p.
                                /* 12D8 */  0xEE, 0x04, 0x01, 0xBA, 0xA1, 0xF9, 0x04, 0x01,  // ........
                                /* 12E0 */  0xAE, 0x33, 0x00, 0xF0, 0x3A, 0x6A, 0xE1, 0x86,  // .3..:j..
                                /* 12E8 */  0xE1, 0x43, 0x8D, 0xCF, 0xC6, 0x30, 0x7C, 0x5E,  // .C...0|^
                                /* 12F0 */  0x04, 0x88, 0xE8, 0x93, 0x03, 0xFD, 0xFF, 0x43,  // .......C
                                /* 12F8 */  0xF8, 0x0C, 0xE1, 0x43, 0x8D, 0x0F, 0x10, 0x5C,  // ...C...\
                                /* 1300 */  0x1E, 0x1C, 0x05, 0xF1, 0x01, 0xC2, 0xD1, 0x0F,  // ........
                                /* 1308 */  0x10, 0xD0, 0xA3, 0x1E, 0x20, 0x40, 0x31, 0x5E,  // .... @1^
                                /* 1310 */  0x8F, 0x16, 0x1C, 0xF3, 0xAA, 0xFD, 0xEE, 0x41,  // .......A
                                /* 1318 */  0x11, 0xC3, 0x19, 0xC7, 0x17, 0x58, 0x3C, 0x50,  // .....X<P
                                /* 1320 */  0xF0, 0x38, 0xB1, 0x43, 0x54, 0x8C, 0xA8, 0x93,  // .8.CT...
                                /* 1328 */  0x40, 0x88, 0x68, 0x2F, 0xD8, 0xCF, 0x10, 0x80,  // @.h/....
                                /* 1330 */  0x95, 0x73, 0x91, 0xCF, 0x10, 0xE0, 0x32, 0x76,  // .s....2v
                                /* 1338 */  0x86, 0x00, 0xDD, 0x31, 0x00, 0xFC, 0xFF, 0xFF,  // ...1....
                                /* 1340 */  0x63, 0x00, 0x38, 0x8E, 0xA3, 0xB8, 0x91, 0x58,  // c.8....X
                                /* 1348 */  0xF8, 0xC1, 0x06, 0x71, 0x86, 0xF0, 0xE9, 0x1D,  // ...q....
                                /* 1350 */  0x77, 0xCC, 0x02, 0x0C, 0x0D, 0x19, 0xD6, 0x5D,  // w......]
                                /* 1358 */  0xDF, 0x23, 0xC4, 0x1C, 0xB3, 0x00, 0x87, 0xF3,  // .#......
                                /* 1360 */  0xF1, 0x11, 0x02, 0x1C, 0xFF, 0xFF, 0x63, 0x16,  // ......c.
                                /* 1368 */  0x78, 0x8F, 0x00, 0xE0, 0x38, 0x3E, 0xC0, 0x39,  // x...8>.9
                                /* 1370 */  0x04, 0xB2, 0xE3, 0x03, 0xB0, 0x3E, 0xA8, 0xE3,  // .....>..
                                /* 1378 */  0x06, 0x0B, 0x9E, 0x73, 0x35, 0x3F, 0x3E, 0x00,  // ...s5?>.
                                /* 1380 */  0x5E, 0xFF, 0xFF, 0xC7, 0x07, 0xFC, 0x80, 0x1E,  // ^.......
                                /* 1388 */  0x1F, 0x80, 0xD5, 0x11, 0x00, 0x5C, 0x52, 0x8F,  // .....\R.
                                /* 1390 */  0x0F, 0xA8, 0x31, 0x39, 0xC4, 0xF1, 0x01, 0x31,  // ..19...1
                                /* 1398 */  0xDE, 0xC8, 0x4F, 0x5C, 0x07, 0x17, 0xE5, 0x90,  // ..O\....
                                /* 13A0 */  0x0F, 0xC3, 0x20, 0xCF, 0x5C, 0x9E, 0xD6, 0x59,  // .. .\..Y
                                /* 13A8 */  0x3C, 0x09, 0xC6, 0x39, 0x0C, 0x9F, 0xFB, 0x80,  // <..9....
                                /* 13B0 */  0xE7, 0x19, 0x02, 0x77, 0x48, 0x03, 0xCF, 0x88,  // ...wH...
                                /* 13B8 */  0xF9, 0x0C, 0x31, 0xA7, 0x46, 0x0F, 0x11, 0x37,  // ..1.F..7
                                /* 13C0 */  0x70, 0x4F, 0x11, 0x73, 0x88, 0x00, 0x8E, 0xFF,  // pO.s....
                                /* 13C8 */  0xFF, 0x73, 0x1F, 0xF0, 0x93, 0x76, 0xEE, 0x03,  // .s...v..
                                /* 13D0 */  0x5A, 0x67, 0x00, 0xF0, 0x9D, 0x8D, 0xE1, 0x8C,  // Zg......
                                /* 13D8 */  0x80, 0x4D, 0xE4, 0x99, 0xC6, 0x87, 0x08, 0xB8,  // .M......
                                /* 13E0 */  0xE7, 0x1A, 0xC0, 0xCF, 0x04, 0xD9, 0x19, 0x02,  // ........
                                /* 13E8 */  0xAC, 0xFF, 0xFF, 0x73, 0x0D, 0xE0, 0xCA, 0xDA,  // ...s....
                                /* 13F0 */  0xB9, 0x06, 0xE8, 0x1D, 0x01, 0xC0, 0x91, 0x62,  // .......b
                                /* 13F8 */  0x69, 0x3A, 0x42, 0x70, 0x49, 0x10, 0x4A, 0xF5,  // i:BpI.J.
                                /* 1400 */  0x5A, 0xD0, 0x49, 0xD4, 0xE3, 0x3C, 0x0E, 0x43,  // Z.I..<.C
                                /* 1408 */  0x3F, 0x89, 0x1A, 0x25, 0xF2, 0x11, 0xD4, 0x7A,  // ?..%...z
                                /* 1410 */  0x59, 0x10, 0xFE, 0x4B, 0xCE, 0xC3, 0x3A, 0xCB,  // Y..K..:.
                                /* 1418 */  0x00, 0xAA, 0xA3, 0x83, 0x4F, 0x0E, 0x56, 0x4F,  // ....O.VO
                                /* 1420 */  0x21, 0x5D, 0x27, 0x08, 0x94, 0x92, 0x13, 0x04,  // !]'.....
                                /* 1428 */  0x05, 0x31, 0xA0, 0x63, 0x9E, 0x20, 0xD0, 0x07,  // .1.c. ..
                                /* 1430 */  0x07, 0x36, 0xCB, 0xE2, 0x41, 0x14, 0xEC, 0x00,  // .6..A...
                                /* 1438 */  0x41, 0x07, 0xE9, 0x21, 0x73, 0x0D, 0x07, 0x08,  // A..!s...
                                /* 1440 */  0x04, 0x6C, 0x91, 0xA3, 0x05, 0xCD, 0xC0, 0x8E,  // .l......
                                /* 1448 */  0xDE, 0x13, 0xFB, 0xFF, 0x3F, 0xE9, 0xFB, 0x26,  // ....?..&
                                /* 1450 */  0x60, 0xB0, 0x98, 0x0F, 0x8D, 0xC6, 0x0A, 0xF5,  // `.......
                                /* 1458 */  0x10, 0x92, 0xA0, 0x9A, 0x53, 0x01, 0x6A, 0x20,  // ....S.j 
                                /* 1460 */  0x3E, 0x3C, 0x60, 0x74, 0xDD, 0x1D, 0x40, 0xA6,  // ><`t..@.
                                /* 1468 */  0xEF, 0xEC, 0x00, 0x72, 0x74, 0x7E, 0x83, 0x04,  // ...rt~..
                                /* 1470 */  0x3C, 0xDC, 0x14, 0x18, 0xCC, 0x73, 0x83, 0x8F,  // <....s..
                                /* 1478 */  0x57, 0x46, 0x09, 0x19, 0xE3, 0x09, 0xEB, 0x55,  // WF.....U
                                /* 1480 */  0x81, 0x5F, 0x00, 0x70, 0x97, 0x11, 0x78, 0xF7,  // ._.p..x.
                                /* 1488 */  0x29, 0x72, 0x19, 0x01, 0xDA, 0xD7, 0x08, 0x5F,  // )r....._
                                /* 1490 */  0x46, 0xB0, 0xFF, 0xFF, 0xCB, 0x08, 0x6C, 0x6D,  // F.....lm
                                /* 1498 */  0x97, 0x11, 0xD0, 0x61, 0xBD, 0x41, 0x82, 0x6D,  // ...a.A.m
                                /* 14A0 */  0x2E, 0x9E, 0x3D, 0xEE, 0x12, 0x60, 0x98, 0x18,  // ..=..`..
                                /* 14A8 */  0xEF, 0x01, 0xBE, 0x83, 0x60, 0x2E, 0x24, 0x9E,  // ....`.$.
                                /* 14B0 */  0xEA, 0xA3, 0x00, 0x8E, 0xC0, 0xF7, 0x48, 0x1C,  // ......H.
                                /* 14B8 */  0x87, 0x6F, 0xB5, 0x98, 0xE9, 0x9E, 0x85, 0xD1,  // .o......
                                /* 14C0 */  0x0F, 0x2C, 0xB0, 0x67, 0x79, 0x90, 0x86, 0x66,  // .,.gy..f
                                /* 14C8 */  0x77, 0x36, 0x5F, 0x91, 0xB8, 0x44, 0x0A, 0x09,  // w6_..D..
                                /* 14D0 */  0x3C, 0x46, 0xA0, 0x24, 0xC1, 0x51, 0x10, 0x1F,  // <F.$.Q..
                                /* 14D8 */  0x23, 0x1C, 0xF7, 0x18, 0x01, 0x3D, 0xDE, 0x31,  // #....=.1
                                /* 14E0 */  0x02, 0x14, 0xF7, 0x82, 0xC7, 0x08, 0x30, 0x8D,  // ......0.
                                /* 14E8 */  0xCD, 0x43, 0x3C, 0x3E, 0x8F, 0xD6, 0xE3, 0x63,  // .C<>...c
                                /* 14F0 */  0x40, 0xE7, 0x87, 0xB9, 0x20, 0x01, 0xAB, 0xFF,  // @... ...
                                /* 14F8 */  0xFF, 0x05, 0x09, 0xD8, 0x7A, 0xBB, 0xD5, 0x02,  // ....z...
                                /* 1500 */  0xBD, 0x23, 0x00, 0x38, 0x8E, 0x0F, 0xB8, 0x53,  // .#.8...S
                                /* 1508 */  0x80, 0xEF, 0x69, 0x1E, 0x00, 0x53, 0x38, 0x26,  // ..i..S8&
                                /* 1510 */  0x5D, 0x25, 0x4E, 0xF4, 0x5D, 0xC2, 0xC0, 0x98,  // ]%N.]...
                                /* 1518 */  0x3B, 0x3F, 0xBF, 0x3D, 0xF2, 0xE3, 0x8C, 0x4F,  // ;?.=...O
                                /* 1520 */  0x0F, 0x5C, 0x08, 0x1C, 0x05, 0xF1, 0xE9, 0xC1,  // .\......
                                /* 1528 */  0x77, 0x47, 0x9F, 0x1E, 0xE0, 0x86, 0x3A, 0x3D,  // wG....:=
                                /* 1530 */  0x80, 0x42, 0xDC, 0x25, 0x1D, 0x44, 0xA7, 0x0E,  // .B.%.D..
                                /* 1538 */  0x1F, 0x1C, 0xC0, 0xFF, 0xFF, 0x3F, 0xCC, 0x00,  // .....?..
                                /* 1540 */  0x36, 0xC6, 0xEB, 0xC3, 0x0C, 0x70, 0x1C, 0x3F,  // 6....p.?
                                /* 1548 */  0x43, 0x7D, 0x4C, 0x7B, 0xD2, 0x37, 0x70, 0xAC,  // C}L{.7p.
                                /* 1550 */  0x27, 0x5A, 0x2C, 0xCE, 0x43, 0x98, 0x31, 0x5E,  // 'Z,.C.1^
                                /* 1558 */  0x1A, 0x38, 0x81, 0x6F, 0xB5, 0x78, 0xC9, 0x17,  // .8.o.x..
                                /* 1560 */  0x48, 0x04, 0xE4, 0x59, 0xB1, 0x39, 0x3D, 0xFD,  // H..Y.9=.
                                /* 1568 */  0xFB, 0x86, 0x73, 0x66, 0x0C, 0xEE, 0x14, 0x2A,  // ..sf...*
                                /* 1570 */  0x3E, 0x4E, 0xE0, 0x8E, 0x10, 0xA8, 0x13, 0x84,  // >N......
                                /* 1578 */  0x45, 0x1D, 0x21, 0x50, 0x32, 0xE0, 0x28, 0x88,  // E.!P2.(.
                                /* 1580 */  0x8F, 0x10, 0x3E, 0x5D, 0xF9, 0x08, 0x01, 0x37,  // ..>]...7
                                /* 1588 */  0xD2, 0x0D, 0x12, 0x14, 0xD7, 0x51, 0x8F, 0x1B,  // .....Q..
                                /* 1590 */  0x0C, 0xFF, 0x7F, 0x82, 0xB7, 0x80, 0x07, 0x1F,  // ........
                                /* 1598 */  0xCC, 0x09, 0x02, 0x70, 0x72, 0x24, 0xF2, 0x09,  // ...pr$..
                                /* 15A0 */  0x02, 0x5C, 0xE6, 0x4E, 0x10, 0xA0, 0x93, 0x7F,  // .\.N....
                                /* 15A8 */  0x73, 0x04, 0xDD, 0x09, 0x82, 0x23, 0x3E, 0x28,  // s....#>(
                                /* 15B0 */  0x84, 0x7C, 0x92, 0xF1, 0x20, 0x0C, 0xF4, 0x08,  // .|.. ...
                                /* 15B8 */  0xC0, 0xCF, 0x0F, 0xFC, 0xD6, 0x00, 0xEB, 0x72,  // .......r
                                /* 15C0 */  0x82, 0x3B, 0x45, 0xC0, 0x3A, 0x5B, 0xB0, 0x53,  // .;E.:[.S
                                /* 15C8 */  0x04, 0xF0, 0xFC, 0xFF, 0x9F, 0x22, 0xC0, 0x70,  // .....".p
                                /* 15D0 */  0xAE, 0xC1, 0x9D, 0x22, 0x00, 0xEF, 0xEA, 0x4E,  // ..."...N
                                /* 15D8 */  0x11, 0x40, 0xEB, 0x58, 0x83, 0x3F, 0x45, 0x00,  // .@.X.?E.
                                /* 15E0 */  0x07, 0xB1, 0xA7, 0x08, 0x94, 0x3C, 0x08, 0x89,  // .....<..
                                /* 15E8 */  0x3F, 0x45, 0x20, 0xCE, 0xAD, 0xAF, 0x0A, 0xC7,  // ?E .....
                                /* 15F0 */  0x11, 0xF4, 0x6D, 0x27, 0x88, 0x91, 0xCE, 0xC1,  // ..m'....
                                /* 15F8 */  0xFF, 0xFF, 0xBB, 0x60, 0xF4, 0xB7, 0x08, 0xCF,  // ...`....
                                /* 1600 */  0x2A, 0xC2, 0xBB, 0xA0, 0x31, 0x1F, 0x6F, 0x9F,  // *...1.o.
                                /* 1608 */  0xFF, 0x3C, 0xB7, 0x23, 0xE3, 0x07, 0x2E, 0xC0,  // .<.#....
                                /* 1610 */  0xCB, 0x9D, 0xF1, 0xD0, 0xB0, 0x07, 0x2E, 0xC0,  // ........
                                /* 1618 */  0xA1, 0xBB, 0x03, 0x17, 0xD0, 0x1B, 0xCB, 0x0B,  // ........
                                /* 1620 */  0x03, 0x16, 0xE9, 0xFF, 0xFF, 0x18, 0xE1, 0x13,  // ........
                                /* 1628 */  0x83, 0x0F, 0x5C, 0xBE, 0x31, 0xE0, 0xEE, 0xA2,  // ..\.1...
                                /* 1630 */  0x3E, 0x08, 0x60, 0x0F, 0xA3, 0x78, 0xC1, 0xC7,  // >.`..x..
                                /* 1638 */  0x08, 0xC4, 0xAC, 0x63, 0x87, 0xAF, 0x71, 0x12,  // ...c..q.
                                /* 1640 */  0xC4, 0xF8, 0xC1, 0x94, 0x00, 0x1F, 0x51, 0xF3,  // ......Q.
                                /* 1648 */  0x47, 0x00, 0x9F, 0x1F, 0x50, 0xD2, 0x28, 0x74,  // G...P.(t
                                /* 1650 */  0x80, 0xF0, 0xF9, 0x81, 0x4B, 0x81, 0xA3, 0x20,  // ....K.. 
                                /* 1658 */  0xBE, 0x6D, 0xC3, 0x39, 0x3F, 0xE0, 0x63, 0x9D,  // .m.9?.c.
                                /* 1660 */  0x1F, 0x40, 0x71, 0xD8, 0xF0, 0xA0, 0xC1, 0x31,  // .@q....1
                                /* 1668 */  0xD9, 0x63, 0x83, 0x71, 0x80, 0x00, 0x9C, 0x9C,  // .c.q....
                                /* 1670 */  0x8E, 0x7C, 0x80, 0x00, 0xD7, 0x80, 0x7D, 0x80,  // .|....}.
                                /* 1678 */  0x00, 0x17, 0xC8, 0xFF, 0xFF, 0x01, 0x02, 0x6C,  // .......l
                                /* 1680 */  0x57, 0x05, 0x76, 0xB4, 0xF1, 0xB5, 0x98, 0x4F,  // W.v....O
                                /* 1688 */  0xFB, 0xCD, 0xC6, 0x17, 0x83, 0xE7, 0xFA, 0x37,  // .......7
                                /* 1690 */  0x64, 0xDF, 0x02, 0x60, 0x10, 0x94, 0x7B, 0x7C,  // d..`..{|
                                /* 1698 */  0x40, 0x1D, 0x01, 0x7C, 0xA8, 0xC1, 0x8C, 0xF9,  // @..|....
                                /* 16A0 */  0xDD, 0xD4, 0xD0, 0x61, 0xDF, 0x28, 0x7C, 0xC7,  // ...a.(|.
                                /* 16A8 */  0x39, 0xE7, 0x30, 0x0F, 0xCC, 0xC6, 0x39, 0x37,  // 9.0...97
                                /* 16B0 */  0x8F, 0xE5, 0x35, 0xC1, 0x83, 0xF3, 0x81, 0x9D,  // ..5.....
                                /* 16B8 */  0x1D, 0x21, 0xF8, 0xA1, 0xC6, 0xC7, 0x2D, 0x1F,  // .!....-.
                                /* 16C0 */  0x21, 0xB8, 0x1C, 0x38, 0x0A, 0xE2, 0x23, 0x84,  // !..8..#.
                                /* 16C8 */  0xA3, 0x1E, 0x21, 0xA0, 0x9F, 0x6E, 0x7D, 0x84,  // ..!..n}.
                                /* 16D0 */  0x80, 0x7F, 0x5D, 0xF0, 0xB0, 0xC1, 0x01, 0x73,  // ..]....s
                                /* 16D8 */  0x72, 0xB8, 0x61, 0xB3, 0xD1, 0xF1, 0x43, 0x04,  // r.a...C.
                                /* 16E0 */  0xE0, 0x24, 0xE8, 0x21, 0x02, 0xC2, 0xFF, 0xFF,  // .$.!....
                                /* 16E8 */  0x10, 0x01, 0xDB, 0xDE, 0x21, 0x02, 0x74, 0x60,  // ....!.t`
                                /* 16F0 */  0x0F, 0x11, 0x60, 0x1B, 0x59, 0xA0, 0xC7, 0x02,  // ..`.Y...
                                /* 16F8 */  0x5F, 0x8C, 0x3D, 0x7E, 0xCC, 0x8D, 0x9D, 0x1F,  // _.=~....
                                /* 1700 */  0x1C, 0xF0, 0x48, 0x2F, 0x0E, 0xD8, 0x63, 0x83,  // ..H/..c.
                                /* 1708 */  0xCE, 0xC8, 0x68, 0xD1, 0x27, 0x06, 0x0D, 0xEC,  // ..h.'...
                                /* 1710 */  0x64, 0x4E, 0xF8, 0xB4, 0x1F, 0x6A, 0x9E, 0x53,  // dN...j.S
                                /* 1718 */  0x8D, 0xF1, 0x6A, 0xE1, 0xC3, 0xAA, 0x09, 0x2C,  // ..j....,
                                /* 1720 */  0xF3, 0x08, 0x81, 0x3A, 0xD7, 0xF8, 0x0C, 0xE1,  // ...:....
                                /* 1728 */  0x23, 0x04, 0x17, 0x04, 0x47, 0x41, 0x7C, 0x84,  // #...GA|.
                                /* 1730 */  0x70, 0xD8, 0x23, 0x04, 0xF4, 0x70, 0x47, 0x08,  // p.#..pG.
                                /* 1738 */  0x50, 0x5C, 0xC6, 0x0E, 0x1A, 0x2C, 0x83, 0xF3,  // P\...,..
                                /* 1740 */  0x84, 0x7D, 0x63, 0x33, 0x46, 0xD7, 0x17, 0x7E,  // .}c3F..~
                                /* 1748 */  0xC4, 0x14, 0x0E, 0xF5, 0x19, 0x02, 0xD8, 0xFD,  // ........
                                /* 1750 */  0xFF, 0xCF, 0x59, 0xC0, 0x54, 0xDF, 0x39, 0x0B,  // ..Y.T.9.
                                /* 1758 */  0x68, 0x0D, 0xEF, 0xEC, 0x31, 0x47, 0x40, 0x3E,  // h...1G@>
                                /* 1760 */  0xBB, 0x33, 0x78, 0x33, 0x88, 0xE9, 0x13, 0x96,  // .3x3....
                                /* 1768 */  0xC1, 0x7C, 0xA6, 0x89, 0x13, 0xCD, 0xE7, 0x07,  // .|......
                                /* 1770 */  0x5F, 0x24, 0x7C, 0xDA, 0x32, 0x9A, 0xAF, 0x0D,  // _$|.2...
                                /* 1778 */  0x4C, 0xD8, 0x11, 0x02, 0x25, 0xE9, 0x08, 0x81,  // L...%...
                                /* 1780 */  0xBA, 0xF6, 0x61, 0x91, 0x1E, 0x2F, 0xCE, 0xFA,  // ..a../..
                                /* 1788 */  0x21, 0xE0, 0x5D, 0x10, 0x23, 0xF1, 0x10, 0x81,  // !.].#...
                                /* 1790 */  0x3A, 0xD5, 0xF8, 0xA4, 0xE5, 0x43, 0x04, 0x17,  // :....C..
                                /* 1798 */  0x03, 0x47, 0x41, 0x7C, 0x88, 0xF0, 0x79, 0xC4,  // .GA|..y.
                                /* 17A0 */  0x87, 0x08, 0xB8, 0xC1, 0x0E, 0x11, 0xA0, 0x38,  // .......8
                                /* 17A8 */  0x1F, 0xE0, 0x46, 0x0D, 0x77, 0x6A, 0xFC, 0x02,  // ..F.wj..
                                /* 17B0 */  0x89, 0xC1, 0x7C, 0x26, 0x85, 0xF5, 0xFF, 0x3F,  // ..|&...?
                                /* 17B8 */  0x42, 0x00, 0x06, 0x0E, 0x45, 0x3E, 0x42, 0x80,  // B...E>B.
                                /* 17C0 */  0xCB, 0xDF, 0x11, 0x02, 0x74, 0xA3, 0x39, 0x7A,  // ....t.9z
                                /* 17C8 */  0xF0, 0x1C, 0xD7, 0x7D, 0xE3, 0xC3, 0x5F, 0x01,  // ...}.._.
                                /* 17D0 */  0x60, 0x1C, 0x43, 0xC9, 0xE1, 0x01, 0x2D, 0xFD,  // `.C...-.
                                /* 17D8 */  0x78, 0x8C, 0x3A, 0x39, 0x60, 0xC7, 0xFA, 0x16,  // x.:9`...
                                /* 17E0 */  0x8F, 0x21, 0x28, 0xF4, 0xF0, 0x80, 0x3A, 0x3F,  // .!(...:?
                                /* 17E8 */  0xF8, 0x44, 0xE3, 0xC3, 0x03, 0x97, 0x04, 0x47,  // .D.....G
                                /* 17F0 */  0x41, 0x7C, 0x78, 0xF0, 0xC9, 0xD6, 0x87, 0x07,  // A|x.....
                                /* 17F8 */  0xB8, 0xF1, 0x0E, 0x0F, 0xA0, 0xB8, 0x12, 0x1C,  // ........
                                /* 1800 */  0x2F, 0xFC, 0xFF, 0xFF, 0xE1, 0x01, 0x3F, 0x3C,  // /.....?<
                                /* 1808 */  0x8E, 0x72, 0x7A, 0xD8, 0xF3, 0x03, 0x60, 0x71,  // .rz...`q
                                /* 1810 */  0x38, 0x3E, 0x3F, 0x00, 0xA7, 0x43, 0x16, 0x3F,  // 8>?..C.?
                                /* 1818 */  0x02, 0x80, 0x43, 0xE2, 0xD2, 0x74, 0x7E, 0xC0,  // ..C..t~.
                                /* 1820 */  0xC5, 0x78, 0x2B, 0xE8, 0x1C, 0xCF, 0xCE, 0x0F,  // .x+.....
                                /* 1828 */  0xB0, 0x45, 0x83, 0xEA, 0xE0, 0xE0, 0x73, 0x83,  // .E....s.
                                /* 1830 */  0x4F, 0x81, 0x3E, 0x3A, 0xF8, 0xFC, 0xC0, 0x45,  // O.>:...E
                                /* 1838 */  0x9C, 0x1F, 0x28, 0x88, 0x01, 0x9D, 0xF0, 0xFC,  // ..(.....
                                /* 1840 */  0x80, 0x56, 0x71, 0x2A, 0x47, 0x5E, 0xD5, 0xF9,  // .Vq*G^..
                                /* 1848 */  0x24, 0xFD, 0xFF, 0x9F, 0x32, 0xD7, 0x00, 0xA1,  // $...2...
                                /* 1850 */  0x9B, 0x98, 0x81, 0x7D, 0x03, 0x05, 0xCF, 0x5C,  // ...}...\
                                /* 1858 */  0x61, 0x10, 0x54, 0x73, 0x25, 0x40, 0x8D, 0xC2,  // a.Ts%@..
                                /* 1860 */  0x37, 0x07, 0x8C, 0xAE, 0x93, 0x03, 0xC8, 0xEE,  // 7.......
                                /* 1868 */  0x4E, 0xBE, 0x38, 0x80, 0x19, 0x9D, 0x1F, 0x8A,  // N.8.....
                                /* 1870 */  0x00, 0x0F, 0x77, 0x34, 0x1F, 0x11, 0x7C, 0xC6,  // ..w4..|.
                                /* 1878 */  0xF3, 0x55, 0x8F, 0xCD, 0x9D, 0x9D, 0x42, 0xE0,  // .U....B.
                                /* 1880 */  0x9D, 0xC5, 0xC9, 0x29, 0x04, 0x48, 0xFE, 0xFF,  // ...).H..
                                /* 1888 */  0x4F, 0x21, 0x30, 0xEE, 0x0D, 0x3E, 0x85, 0x80,  // O!0..>..
                                /* 1890 */  0x6B, 0x0A, 0x4F, 0x21, 0x60, 0x3B, 0x87, 0x82,  // k.O!`;..
                                /* 1898 */  0xE7, 0xD4, 0xC1, 0x4E, 0x21, 0x70, 0x4E, 0xFA,  // ...N!pN.
                                /* 18A0 */  0x3A, 0x81, 0xA0, 0xA3, 0x3C, 0x12, 0x34, 0xE6,  // :...<.4.
                                /* 18A8 */  0x67, 0x48, 0xE3, 0xBF, 0xA6, 0x3D, 0xAB, 0x1D,  // gH...=..
                                /* 18B0 */  0x45, 0x68, 0x76, 0x1E, 0xC1, 0x0B, 0x3F, 0x81,  // Ehv...?.
                                /* 18B8 */  0xA0, 0x24, 0x53, 0xE8, 0x8C, 0x0F, 0x37, 0xE5,  // .$S...7.
                                /* 18C0 */  0xC1, 0x01, 0xAD, 0x03, 0x44, 0x33, 0x38, 0x08,  // ....D38.
                                /* 18C8 */  0xDC, 0x1D, 0x9F, 0x1F, 0x41, 0xE0, 0xDD, 0x1B,  // ....A...
                                /* 18D0 */  0xC0, 0x33, 0x37, 0x7E, 0x9F, 0xF2, 0x40, 0x70,  // .37~..@p
                                /* 18D8 */  0x67, 0x10, 0xE0, 0xF8, 0xFF, 0x3F, 0x83, 0x00,  // g....?..
                                /* 18E0 */  0xEC, 0x1A, 0xAE, 0xCF, 0x20, 0xE0, 0x52, 0x78,  // .... .Rx
                                /* 18E8 */  0x06, 0x01, 0xDD, 0x80, 0x8E, 0x1E, 0x2C, 0xE7,  // ......,.
                                /* 18F0 */  0x0E, 0xDC, 0xE8, 0x1F, 0x26, 0x30, 0x73, 0xFB,  // ....&0s.
                                /* 18F8 */  0xFF, 0x3F, 0x78, 0x60, 0x65, 0x1D, 0x82, 0xD1,  // .?x`e...
                                /* 1900 */  0xB2, 0x8F, 0x9C, 0xF4, 0x24, 0x6A, 0xD0, 0x27,  // ....$j.'
                                /* 1908 */  0x62, 0x8F, 0xC7, 0xB3, 0x3F, 0xE3, 0x83, 0x08,  // b...?...
                                /* 1910 */  0xF3, 0x90, 0x07, 0xB8, 0x39, 0x23, 0xFA, 0x10,  // ....9#..
                                /* 1918 */  0xEC, 0xD9, 0x61, 0x80, 0x0E, 0xEF, 0x29, 0xDA,  // ..a...).
                                /* 1920 */  0xD3, 0x63, 0x87, 0x3C, 0xC0, 0x4A, 0xAC, 0xC3,  // .c.<.J..
                                /* 1928 */  0x03, 0xE8, 0xCE, 0xB7, 0x3E, 0x3C, 0x80, 0xEB,  // ....><..
                                /* 1930 */  0x00, 0x00, 0xE3, 0xFF, 0x7F, 0x00, 0x00, 0xDF,  // ........
                                /* 1938 */  0x30, 0x1E, 0x00, 0xB8, 0xB8, 0xB3, 0x03, 0x6A,  // 0......j
                                /* 1940 */  0x0C, 0x16, 0x7E, 0xE2, 0x44, 0x1C, 0x24, 0xF8,  // ..~.D.$.
                                /* 1948 */  0x7D, 0xFB, 0xF0, 0x0E, 0x8D, 0x89, 0x3D, 0x3A,  // }.....=:
                                /* 1950 */  0xA0, 0x4E, 0xE4, 0x16, 0x79, 0x74, 0x40, 0x9D,  // .N..yt@.
                                /* 1958 */  0x88, 0x0C, 0x66, 0x10, 0x1F, 0x1D, 0x1C, 0x79,  // ..f....y
                                /* 1960 */  0x64, 0xA8, 0xA3, 0x03, 0x9C, 0x88, 0x47, 0x07,  // d.....G.
                                /* 1968 */  0x50, 0x1C, 0x0F, 0xC1, 0x77, 0xE9, 0xC0, 0x8C,  // P...w...
                                /* 1970 */  0xEE, 0x65, 0xDE, 0xA3, 0xEB, 0x1D, 0x84, 0x1C,  // .e......
                                /* 1978 */  0x10, 0x7D, 0x6C, 0xE0, 0x87, 0x07, 0x70, 0x1F,  // .}l...p.
                                /* 1980 */  0x93, 0x3C, 0x1E, 0x9F, 0x01, 0x7C, 0xE0, 0x04,  // .<...|..
                                /* 1988 */  0xEE, 0x93, 0xF3, 0xE1, 0x01, 0xFB, 0xFF, 0x3F,  // .......?
                                /* 1990 */  0x70, 0x02, 0x9B, 0x23, 0x00, 0x2C, 0x88, 0x57,  // p..#.,.W
                                /* 1998 */  0x00, 0x5C, 0xBC, 0xF7, 0x81, 0x09, 0x24, 0xFE,  // .\....$.
                                /* 19A0 */  0xB0, 0xA0, 0x40, 0x30, 0xA8, 0x8B, 0x96, 0x4F,  // ..@0...O
                                /* 19A8 */  0x09, 0xF8, 0x21, 0x1E, 0x61, 0xEC, 0x63, 0x62,  // ..!.a.cb
                                /* 19B0 */  0x47, 0x35, 0xC3, 0xF1, 0xD1, 0x7B, 0x0C, 0xCF,  // G5...{..
                                /* 19B8 */  0x38, 0xC7, 0x73, 0x1E, 0xA7, 0xEA, 0x49, 0x85,  // 8.s...I.
                                /* 19C0 */  0x64, 0xD2, 0x06, 0x87, 0x92, 0x72, 0xB0, 0xF1,  // d....r..
                                /* 19C8 */  0x74, 0x34, 0xB1, 0xDA, 0x11, 0x75, 0x72, 0x32,  // t4...ur2
                                /* 19D0 */  0x4C, 0x02, 0x8F, 0x9B, 0xA1, 0x71, 0x68, 0xEC,  // L....qh.
                                /* 19D8 */  0x30, 0x7C, 0x71, 0xF1, 0x20, 0x0E, 0xE3, 0xA4,  // 0|q. ...
                                /* 19E0 */  0x4D, 0xE0, 0x09, 0x3D, 0x0D, 0x94, 0x7B, 0x51,  // M..=..{Q
                                /* 19E8 */  0x90, 0x78, 0x54, 0x61, 0x34, 0x07, 0x45, 0x80,  // .xTa4.E.
                                /* 19F0 */  0x0E, 0x1B, 0x2C, 0x07, 0x80, 0xB7, 0x00, 0x5F,  // ..,...._
                                /* 19F8 */  0xE7, 0x8D, 0xF6, 0x28, 0xC4, 0xA6, 0xCC, 0xAE,  // ...(....
                                /* 1A00 */  0x21, 0x38, 0x9C, 0x10, 0x87, 0xF4, 0x3A, 0xC0,  // !8....:.
                                /* 1A08 */  0xFE, 0x20, 0x3E, 0xEE, 0xE3, 0xCE, 0x1B, 0x86,  // . >.....
                                /* 1A10 */  0x8C, 0x7D, 0x80, 0x26, 0xB0, 0xFB, 0x8B, 0x93,  // .}.&....
                                /* 1A18 */  0x34, 0xCE, 0x45, 0x53, 0x7A, 0x9C, 0x09, 0x51,  // 4.ESz..Q
                                /* 1A20 */  0x9C, 0x00, 0x63, 0x02, 0x6C, 0xDD, 0x1B, 0x74,  // ..c.l..t
                                /* 1A28 */  0x6C, 0x88, 0xF0, 0x4A, 0x13, 0x25, 0x52, 0x6B,  // l..J.%Rk
                                /* 1A30 */  0x13, 0x13, 0x14, 0xC3, 0x88, 0xD2, 0x1B, 0x0A,  // ........
                                /* 1A38 */  0x01, 0x0E, 0x5D, 0x1B, 0xAC, 0xA0, 0x0D, 0xF8,  // ..].....
                                /* 1A40 */  0x22, 0x11, 0x22, 0x52, 0x9C, 0xF6, 0x07, 0x41,  // "."R...A
                                /* 1A48 */  0x44, 0x39, 0xF8, 0xFF, 0x1F, 0x07, 0xD8, 0x69,  // D9.....i
                                /* 1A50 */  0xD1, 0xA7, 0x11, 0xDC, 0x91, 0xC0, 0xC7, 0x81,  // ........
                                /* 1A58 */  0x93, 0x7A, 0xA8, 0x63, 0x20, 0x07, 0x77, 0x60,  // .z.c .w`
                                /* 1A60 */  0x0F, 0x3B, 0xCF, 0x02, 0x1E, 0x35, 0x3B, 0x8A,  // .;...5;.
                                /* 1A68 */  0xF8, 0x30, 0xE1, 0xC3, 0x01, 0xDE, 0x35, 0xA0,  // .0....5.
                                /* 1A70 */  0x6E, 0x05, 0xCF, 0x04, 0x6C, 0x8C, 0x86, 0xE3,  // n...l...
                                /* 1A78 */  0x43, 0xF4, 0x74, 0x3D, 0x81, 0x43, 0x64, 0x80,  // C.t=.Cd.
                                /* 1A80 */  0x3E, 0x7D, 0x80, 0x4F, 0xFE, 0x20, 0x50, 0x23,  // >}.O. P#
                                /* 1A88 */  0x33, 0xB4, 0xE7, 0x79, 0x5A, 0xEF, 0x02, 0x3E,  // 3..yZ..>
                                /* 1A90 */  0x00, 0x98, 0xC0, 0x62, 0xCF, 0x89, 0x74, 0x3C,  // ...b..t<
                                /* 1A98 */  0xE0, 0x57, 0x7C, 0x40, 0x10, 0xC2, 0x0B, 0x83,  // .W|@....
                                /* 1AA0 */  0xE7, 0xEB, 0xA3, 0x1E, 0x3B, 0x5F, 0xE1, 0xCE,  // ....;_..
                                /* 1AA8 */  0x14, 0x3E, 0x27, 0xF0, 0x73, 0x17, 0x0E, 0xFE,  // .>'.s...
                                /* 1AB0 */  0x15, 0x81, 0x1F, 0x46, 0x58, 0xE0, 0xB3, 0x0D,  // ...FX...
                                /* 1AB8 */  0x15, 0x75, 0x30, 0x41, 0x1D, 0x2B, 0x7C, 0xA2,  // .u0A.+|.
                                /* 1AC0 */  0x60, 0xB7, 0x1C, 0x0E, 0xCB, 0x4E, 0x3C, 0x1E,  // `....N<.
                                /* 1AC8 */  0x1E, 0x7C, 0xC1, 0xC7, 0x09, 0x20, 0xF4, 0xFF,  // .|... ..
                                /* 1AD0 */  0x9F, 0x1B, 0x3B, 0x48, 0xF0, 0x61, 0xC3, 0xBF,  // ..;H.a..
                                /* 1AD8 */  0x52, 0x18, 0xD8, 0xC7, 0x2D, 0x7E, 0xE4, 0xC0,  // R...-~..
                                /* 1AE0 */  0x1D, 0x71, 0xE0, 0xA1, 0x44, 0x7F, 0x7E, 0xE8,  // .q..D.~.
                                /* 1AE8 */  0x53, 0x80, 0x56, 0x08, 0xA1, 0x3D, 0xB8, 0xBC,  // S.V..=..
                                /* 1AF0 */  0xE3, 0x30, 0xB5, 0x38, 0xC2, 0x0A, 0x12, 0xE9,  // .0.8....
                                /* 1AF8 */  0x31, 0xC7, 0x48, 0x07, 0x12, 0x25, 0x48, 0xC8,  // 1.H..%H.
                                /* 1B00 */  0xB0, 0xBE, 0xCD, 0xF8, 0xE4, 0xA4, 0xB1, 0xA2,  // ........
                                /* 1B08 */  0xC7, 0xC1, 0x01, 0x4F, 0x80, 0x8D, 0xE3, 0xBD,  // ...O....
                                /* 1B10 */  0xC7, 0x53, 0x39, 0x2C, 0x9F, 0x51, 0x7C, 0xD1,  // .S9,.Q|.
                                /* 1B18 */  0xF3, 0xA0, 0x1E, 0x55, 0x7C, 0xD3, 0x3B, 0xD2,  // ...U|.;.
                                /* 1B20 */  0x53, 0x7B, 0x3F, 0x78, 0xB3, 0xF0, 0x61, 0x16,  // S{?x..a.
                                /* 1B28 */  0x7B, 0xB8, 0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x6D,  // {......m
                                /* 1B30 */  0xCE, 0xD2, 0xA7, 0xA0, 0x73, 0xC3, 0x9D, 0x66,  // ....s..f
                                /* 1B38 */  0xF8, 0x15, 0x01, 0x73, 0x18, 0xC2, 0xC5, 0x3D,  // ...s...=
                                /* 1B40 */  0xDC, 0xD0, 0x00, 0x6F, 0x03, 0x05, 0x84, 0x41,  // ...o...A
                                /* 1B48 */  0x9D, 0x6F, 0x00, 0x57, 0x57, 0x05, 0x1F, 0x03,  // .o.WW...
                                /* 1B50 */  0x30, 0xFF, 0xFF, 0x53, 0x12, 0x5C, 0x9C, 0x37,  // 0..S.\.7
                                /* 1B58 */  0x80, 0x37, 0x87, 0x27, 0x1C, 0xE0, 0x8C, 0xF6,  // .7.'....
                                /* 1B60 */  0x84, 0x03, 0x26, 0x81, 0x27, 0x1C, 0x80, 0x26,  // ..&.'..&
                                /* 1B68 */  0xA2, 0x4E, 0x38, 0xE8, 0x23, 0x9B, 0x4F, 0x0A,  // .N8.#.O.
                                /* 1B70 */  0xFF, 0xFF, 0x27, 0x05, 0x5F, 0x71, 0xC0, 0x41,  // ..'._q.A
                                /* 1B78 */  0x30, 0xF4, 0x19, 0x07, 0xE8, 0x8C, 0xE5, 0x91,  // 0.......
                                /* 1B80 */  0x02, 0xD8, 0x9D, 0x72, 0xC0, 0x7B, 0xF0, 0xC0,  // ...r.{..
                                /* 1B88 */  0x9D, 0x72, 0xC0, 0x7B, 0xE3, 0x63, 0xE7, 0x1C,  // .r.{.c..
                                /* 1B90 */  0xC0, 0xD1, 0xFF, 0x7F, 0x00, 0x98, 0x28, 0x87,  // ......(.
                                /* 1B98 */  0x1C, 0x2A, 0xFD, 0x7D, 0x20, 0xF1, 0x30, 0xA8,  // .*.} .0.
                                /* 1BA0 */  0x73, 0x0E, 0xE0, 0xEA, 0xFC, 0xE1, 0x53, 0x04,  // s.....S.
                                /* 1BA8 */  0x38, 0x8E, 0x06, 0x87, 0xFD, 0xEC, 0xF0, 0xE2,  // 8.......
                                /* 1BB0 */  0xF1, 0xF2, 0x6A, 0x84, 0x50, 0xC6, 0x09, 0xF8,  // ..j.P...
                                /* 1BB8 */  0x10, 0x61, 0xDC, 0x08, 0xEF, 0xBA, 0xEC, 0x0A,  // .a......
                                /* 1BC0 */  0x81, 0x39, 0xE4, 0xC0, 0x9F, 0xC9, 0x01, 0xBD,  // .9......
                                /* 1BC8 */  0xD7, 0xBC, 0x3F, 0x1C, 0x51, 0x10, 0x5F, 0x6D,  // ..?.Q._m
                                /* 1BD0 */  0x5E, 0x6E, 0x5E, 0x6F, 0xE2, 0xBC, 0xE8, 0xF8,  // ^n^o....
                                /* 1BD8 */  0x90, 0xC3, 0x8E, 0x38, 0x46, 0x89, 0x17, 0xC1,  // ...8F...
                                /* 1BE0 */  0x58, 0xA1, 0x7C, 0xBE, 0x79, 0x97, 0x88, 0xF5,  // X.|.y...
                                /* 1BE8 */  0xB4, 0x63, 0x94, 0x70, 0x31, 0x82, 0x05, 0x09,  // .c.p1...
                                /* 1BF0 */  0xFA, 0x90, 0xC3, 0x24, 0x1C, 0x72, 0x80, 0xEC,  // ...$.r..
                                /* 1BF8 */  0xFF, 0xFF, 0x90, 0x03, 0x98, 0x0B, 0x7F, 0x88,  // ........
                                /* 1C00 */  0x47, 0x0F, 0xD7, 0xC7, 0x04, 0x1F, 0x08, 0xDE,  // G.......
                                /* 1C08 */  0x12, 0x30, 0xA7, 0x91, 0x87, 0x07, 0x03, 0x9D,  // .0......
                                /* 1C10 */  0x92, 0x43, 0x1E, 0x70, 0x80, 0xCE, 0x09, 0x05,  // .C.p....
                                /* 1C18 */  0x7F, 0x96, 0x00, 0xD7, 0x39, 0x02, 0x77, 0xB0,  // ....9.w.
                                /* 1C20 */  0x01, 0xDF, 0x49, 0x03, 0x77, 0xB0, 0x01, 0xEF,  // ..I.w...
                                /* 1C28 */  0xA8, 0x7C, 0xAA, 0x61, 0xFF, 0xFF, 0x53, 0x0D,  // .|.a..S.
                                /* 1C30 */  0x60, 0x27, 0xDA, 0x91, 0x06, 0x15, 0xE6, 0x54,  // `'.....T
                                /* 1C38 */  0x03, 0xE8, 0xBD, 0xE4, 0xBD, 0xA5, 0xB0, 0x9B,  // ........
                                /* 1C40 */  0x06, 0x3B, 0x89, 0xB0, 0xAB, 0xC3, 0x73, 0x40,  // .;....s@
                                /* 1C48 */  0x14, 0x43, 0x44, 0x7E, 0xD3, 0x7A, 0xAA, 0x01,  // .CD~.z..
                                /* 1C50 */  0xD7, 0x8D, 0xE3, 0x4D, 0xE0, 0xF9, 0xEF, 0xE5,  // ...M....
                                /* 1C58 */  0xE1, 0x51, 0xE0, 0x94, 0x5E, 0x1F, 0x9E, 0x63,  // .Q..^..c
                                /* 1C60 */  0xDE, 0x66, 0x9E, 0x65, 0x0C, 0xF5, 0x2E, 0xE8,  // .f.e....
                                /* 1C68 */  0x1B, 0xA0, 0xE1, 0x42, 0x19, 0xF3, 0xFF, 0x1F,  // ...B....
                                /* 1C70 */  0x2E, 0xD8, 0xBB, 0xA0, 0x67, 0x15, 0x2F, 0xCE,  // ....g./.
                                /* 1C78 */  0x3B, 0x8D, 0xD1, 0x02, 0xC6, 0x0E, 0x13, 0x22,  // ;......"
                                /* 1C80 */  0xE2, 0x09, 0x3E, 0xD5, 0x30, 0x49, 0xA7, 0x1A,  // ..>.0I..
                                /* 1C88 */  0x80, 0x26, 0x22, 0x4E, 0x82, 0x68, 0x68, 0x5F,  // .&"N.hh_
                                /* 1C90 */  0x01, 0xF1, 0x91, 0x8F, 0x34, 0x40, 0xE7, 0x90,  // ....4@..
                                /* 1C98 */  0x0A, 0x9E, 0x83, 0x04, 0xAC, 0xFF, 0x3F, 0xD0,  // ......?.
                                /* 1CA0 */  0xF9, 0xF1, 0xB3, 0x04, 0xDC, 0x93, 0x0D, 0xF8,  // ........
                                /* 1CA8 */  0xCE, 0x89, 0xB8, 0x93, 0x0D, 0x78, 0x07, 0x17,  // .....x..
                                /* 1CB0 */  0x29, 0x4A, 0x68, 0x23, 0x45, 0x88, 0x7B, 0x32,  // )Jh#E.{2
                                /* 1CB8 */  0x71, 0x62, 0xBE, 0xDD, 0x60, 0x4F, 0x37, 0x80,  // qb..`O7.
                                /* 1CC0 */  0x93, 0xA8, 0xC7, 0x66, 0x54, 0xB8, 0x93, 0x33,  // ...fT..3
                                /* 1CC8 */  0x20, 0xE8, 0xFF, 0x7F, 0x72, 0x06, 0xBB, 0xCB,  //  ...r...
                                /* 1CD0 */  0x23, 0x0A, 0x39, 0x3B, 0x1C, 0xC3, 0x51, 0xF8,  // #.9;..Q.
                                /* 1CD8 */  0x96, 0x12, 0xE5, 0x95, 0x85, 0xDD, 0x4B, 0x8D,  // ......K.
                                /* 1CE0 */  0xF2, 0x5C, 0x0A, 0x93, 0xC0, 0x07, 0x1C, 0xD8,  // .\......
                                /* 1CE8 */  0xA7, 0x3F, 0x1F, 0x97, 0x7D, 0x1C, 0x78, 0x09,  // .?..}.x.
                                /* 1CF0 */  0x3C, 0x9F, 0xB3, 0x7A, 0xC0, 0x31, 0xD0, 0x93,  // <..z.1..
                                /* 1CF8 */  0x8D, 0x4F, 0x81, 0xEC, 0x2C, 0xE8, 0x6B, 0xB3,  // .O..,.k.
                                /* 1D00 */  0x0F, 0x13, 0xC1, 0x9E, 0x9C, 0x0D, 0x1C, 0x35,  // .......5
                                /* 1D08 */  0xE8, 0x03, 0x45, 0x8C, 0x37, 0x67, 0x63, 0x46,  // ..E.7gcF
                                /* 1D10 */  0x88, 0x61, 0xAC, 0x07, 0x1C, 0x26, 0xEE, 0x80,  // .a...&..
                                /* 1D18 */  0x03, 0x10, 0xE3, 0xFF, 0x7F, 0xC0, 0xC1, 0x4A,  // .......J
                                /* 1D20 */  0x39, 0xE0, 0xA0, 0x87, 0xEB, 0x93, 0x02, 0xBB,  // 9.......
                                /* 1D28 */  0x3D, 0xB0, 0xE1, 0x3E, 0x3B, 0x3C, 0x28, 0xB0,  // =..>;<(.
                                /* 1D30 */  0x21, 0xB1, 0x33, 0x0E, 0xF0, 0x3E, 0x4E, 0x80,  // !.3..>N.
                                /* 1D38 */  0xFB, 0x8C, 0x03, 0xBE, 0xE1, 0x3C, 0xE3, 0x00,  // .....<..
                                /* 1D40 */  0x83, 0xC1, 0xC5, 0x38, 0x90, 0x98, 0x8F, 0x83,  // ...8....
                                /* 1D48 */  0x86, 0x79, 0x8C, 0xF1, 0x60, 0x42, 0x86, 0x78,  // .y..`B.x
                                /* 1D50 */  0x8F, 0x89, 0xF2, 0x48, 0x08, 0xEC, 0xFF, 0xFF,  // ...H....
                                /* 1D58 */  0xA7, 0x1C, 0xB0, 0x84, 0xB2, 0x00, 0xC2, 0xE4,  // ........
                                /* 1D60 */  0xBF, 0x10, 0x14, 0x03, 0x06, 0x75, 0xCA, 0x01,  // .....u..
                                /* 1D68 */  0x5C, 0x09, 0x3E, 0x47, 0x80, 0x06, 0xFD, 0x58,  // \.>G...X
                                /* 1D70 */  0x4E, 0x21, 0x56, 0xA4, 0xD7, 0x87, 0xA7, 0x2F,  // N!V..../
                                /* 1D78 */  0x06, 0x12, 0x29, 0xDC, 0x39, 0xF9, 0x1A, 0x01,  // ..).9...
                                /* 1D80 */  0xF7, 0xE4, 0x0C, 0xFF, 0x10, 0xE1, 0x31, 0x85,  // ......1.
                                /* 1D88 */  0x78, 0xB0, 0x39, 0xA8, 0x37, 0x81, 0x97, 0x9B,  // x.9.7...
                                /* 1D90 */  0x20, 0xE7, 0xF1, 0x94, 0xE3, 0x43, 0x8E, 0xCF,  //  ....C..
                                /* 1D98 */  0xCC, 0x3E, 0xE4, 0x18, 0xEA, 0x5D, 0x27, 0xD6,  // .>...]'.
                                /* 1DA0 */  0xBB, 0x8E, 0x41, 0x42, 0x45, 0x78, 0x2B, 0xF4,  // ..ABEx+.
                                /* 1DA8 */  0xD5, 0xD9, 0x27, 0x68, 0xDF, 0x71, 0x62, 0x84,  // ..'h.qb.
                                /* 1DB0 */  0x7B, 0xC8, 0x61, 0x42, 0x5E, 0x23, 0xF2, 0x70,  // {.aB^#.p
                                /* 1DB8 */  0xC8, 0x01, 0x12, 0xFF, 0xFF, 0x43, 0x0E, 0x60,  // .....C.`
                                /* 1DC0 */  0xF7, 0x35, 0xE3, 0x43, 0x0E, 0x6E, 0x14, 0x3E,  // .5.C.n.>
                                /* 1DC8 */  0x23, 0x70, 0x02, 0x07, 0x3E, 0xE0, 0x00, 0x9D,  // #p..>...
                                /* 1DD0 */  0x93, 0x04, 0xB8, 0x87, 0xF8, 0x24, 0x01, 0x86,  // .....$..
                                /* 1DD8 */  0xF3, 0x0D, 0xF8, 0x62, 0x9F, 0xBC, 0xD1, 0xD0,  // ...b....
                                /* 1DE0 */  0x9E, 0x83, 0xA7, 0x73, 0x56, 0xC7, 0xC4, 0xFE,  // ...sV...
                                /* 1DE8 */  0xFF, 0xC7, 0x6E, 0xB0, 0x9D, 0x0C, 0xC0, 0x71,  // ..n....q
                                /* 1DF0 */  0xEC, 0x06, 0xCF, 0x90, 0xB0, 0xB3, 0x88, 0xF1,  // ........
                                /* 1DF8 */  0x80, 0x73, 0xCE, 0x3E, 0x5C, 0x74, 0x25, 0xC0,  // .s.>\t%.
                                /* 1E00 */  0xE8, 0xD1, 0x08, 0x68, 0x43, 0x06, 0x0A, 0xF5,  // ...hC...
                                /* 1E08 */  0xDA, 0x73, 0x26, 0x0F, 0x94, 0x18, 0xA4, 0x78,  // .s&....x
                                /* 1E10 */  0x47, 0x18, 0xCF, 0x47, 0x23, 0xC0, 0x50, 0xE0,  // G..G#.P.
                                /* 1E18 */  0xC3, 0x24, 0x8D, 0xF1, 0xB6, 0x50, 0x44, 0x18,  // .$...PD.
                                /* 1E20 */  0xD4, 0xD1, 0x08, 0xE6, 0xFF, 0xFF, 0x68, 0x04,  // ......h.
                                /* 1E28 */  0x18, 0x39, 0x22, 0xE0, 0x4E, 0x20, 0xE0, 0x03,  // .9".N ..
                                /* 1E30 */  0x0D, 0x1B, 0x28, 0xA4, 0xEF, 0xB9, 0xEC, 0x78,  // ..(....x
                                /* 1E38 */  0x04, 0x1C, 0x2F, 0xE1, 0x3E, 0x1E, 0x81, 0xE7,  // ../.>...
                                /* 1E40 */  0x48, 0x09, 0x18, 0xF9, 0xFF, 0x1F, 0x8F, 0x00,  // H.......
                                /* 1E48 */  0x2B, 0x42, 0x8E, 0x47, 0xD0, 0x83, 0x1F, 0x8F,  // +B.G....
                                /* 1E50 */  0x80, 0xCE, 0x69, 0x02, 0xDC, 0x50, 0x4F, 0x13,  // ..i..PO.
                                /* 1E58 */  0x60, 0x3C, 0xE7, 0x80, 0x0F, 0xDA, 0xE7, 0x1C,  // `<......
                                /* 1E60 */  0xE0, 0x04, 0xF5, 0xFF, 0x8F, 0x16, 0x28, 0xC2,  // ......(.
                                /* 1E68 */  0x73, 0x38, 0xE0, 0x29, 0xE8, 0x29, 0x87, 0x46,  // s8.).).F
                                /* 1E70 */  0x78, 0x25, 0x28, 0x1A, 0x0C, 0xEA, 0xA0, 0x03,  // x%(.....
                                /* 1E78 */  0xB8, 0x3A, 0xF7, 0xE3, 0xCE, 0x12, 0x70, 0x67,  // .:....pg
                                /* 1E80 */  0xF2, 0x7A, 0x70, 0x30, 0x07, 0xEE, 0xF3, 0xC3,  // .zp0....
                                /* 1E88 */  0x89, 0xBF, 0x13, 0x3C, 0x1F, 0xF8, 0x64, 0x10,  // ...<..d.
                                /* 1E90 */  0xE8, 0xD5, 0xCD, 0x97, 0x2A, 0x06, 0xE6, 0x8B,  // ....*...
                                /* 1E98 */  0x04, 0xEE, 0x60, 0x85, 0x3D, 0xE6, 0x80, 0xE5,  // ..`.=...
                                /* 1EA0 */  0xFF, 0x7F, 0xA8, 0x04, 0xCF, 0x49, 0xFC, 0x31,  // .....I.1
                                /* 1EA8 */  0x07, 0xAE, 0xB0, 0x63, 0x0E, 0x40, 0x13, 0x11,  // ...c.@..
                                /* 1EB0 */  0xC7, 0x1C, 0xE8, 0xA1, 0x8F, 0x39, 0x40, 0xE7,  // .....9@.
                                /* 1EB8 */  0x2C, 0x01, 0x86, 0xFF, 0xFF, 0x59, 0x02, 0x58,  // ,....Y.X
                                /* 1EC0 */  0x1C, 0x72, 0x80, 0xF3, 0xE8, 0x30, 0xE0, 0x1E,  // .r...0..
                                /* 1EC8 */  0x1D, 0xE6, 0x72, 0x08, 0xEF, 0x90, 0x03, 0x38,  // ..r....8
                                /* 1ED0 */  0x09, 0x7F, 0xC2, 0xA1, 0xA1, 0xDE, 0x08, 0x8A,  // ........
                                /* 1ED8 */  0x0B, 0x83, 0x3A, 0xE4, 0x00, 0xD3, 0xFF, 0xFF,  // ..:.....
                                /* 1EE0 */  0x21, 0x07, 0x18, 0xC4, 0x38, 0x49, 0x80, 0xE6,  // !...8I..
                                /* 1EE8 */  0xEC, 0x12, 0xE3, 0x35, 0xF5, 0x00, 0x42, 0x1D,  // ...5..B.
                                /* 1EF0 */  0xC4, 0x23, 0x8B, 0x0F, 0x5E, 0x1E, 0xC6, 0xC1,  // .#..^...
                                /* 1EF8 */  0xF9, 0xAE, 0xF2, 0xDE, 0x85, 0x93, 0x85, 0x23,  // .......#
                                /* 1F00 */  0x30, 0x1F, 0x25, 0x1E, 0x26, 0x1E, 0xC5, 0x0C,  // 0.%.&...
                                /* 1F08 */  0x7C, 0x5E, 0x3E, 0x11, 0x44, 0x3A, 0x23, 0xDF,  // |^>.D:#.
                                /* 1F10 */  0xC2, 0xE0, 0x9E, 0x76, 0x80, 0x0F, 0xCA, 0xD3,  // ...v....
                                /* 1F18 */  0x0E, 0x5C, 0x69, 0xA7, 0x1D, 0x40, 0xE2, 0xFF,  // .\i..@..
                                /* 1F20 */  0xFF, 0xB4, 0x03, 0x0C, 0x25, 0x9C, 0x76, 0xD0,  // ....%.v.
                                /* 1F28 */  0xD0, 0xBE, 0x73, 0x60, 0xCE, 0x38, 0xEC, 0x48,  // ..s`.8.H
                                /* 1F30 */  0x0E, 0xBC, 0x0F, 0x1A, 0x8F, 0x12, 0x60, 0x3D,  // ......`=
                                /* 1F38 */  0xEC, 0x80, 0xEF, 0x40, 0xE0, 0xC3, 0x0E, 0xF8,  // ...@....
                                /* 1F40 */  0x01, 0x8F, 0x24, 0xD6, 0x1B, 0xCE, 0x03, 0xA2,  // ..$.....
                                /* 1F48 */  0x67, 0xF2, 0x26, 0x13, 0xEC, 0x95, 0x22, 0x52,  // g.&..."R
                                /* 1F50 */  0x6C, 0x1F, 0x78, 0xF8, 0x09, 0xD1, 0x47, 0x6B,  // l.x...Gk
                                /* 1F58 */  0xF0, 0xFD, 0xFF, 0x8F, 0x3B, 0xC0, 0x3A, 0xE0,  // ....;.:.
                                /* 1F60 */  0xB9, 0x1A, 0x15, 0xE9, 0x68, 0x0D, 0xE8, 0xBD,  // ....h...
                                /* 1F68 */  0x11, 0x3C, 0x42, 0x1C, 0x8E, 0xAF, 0xAF, 0x1E,  // .<B.....
                                /* 1F70 */  0xC4, 0x4B, 0x98, 0x0F, 0xAE, 0x7C, 0xF2, 0x6F,  // .K...|.o
                                /* 1F78 */  0x17, 0x86, 0xC2, 0x1E, 0xAD, 0x81, 0xD9, 0x39,  // .......9
                                /* 1F80 */  0x07, 0x0B, 0xF1, 0x9C, 0xC3, 0xFE, 0xFF, 0xE7,  // ........
                                /* 1F88 */  0x1C, 0x58, 0x62, 0xCE, 0x39, 0x00, 0x4D, 0xC2,  // .Xb.9.M.
                                /* 1F90 */  0x43, 0xE8, 0x90, 0x08, 0x37, 0xEC, 0x31, 0x07,  // C...7.1.
                                /* 1F98 */  0xE8, 0x0C, 0xD1, 0xA7, 0x09, 0x60, 0xF3, 0xFF,  // .....`..
                                /* 1FA0 */  0x1F, 0x1A, 0x3B, 0xE4, 0x80, 0xEF, 0x4C, 0x81,  // ..;...L.
                                /* 1FA8 */  0x3B, 0xE4, 0x80, 0x77, 0x1E, 0xAF, 0x35, 0x6F,  // ;..w..5o
                                /* 1FB0 */  0x2F, 0xBE, 0x55, 0x1B, 0xF6, 0xED, 0x10, 0xDE,  // /.U.....
                                /* 1FB8 */  0x01, 0x07, 0xB0, 0x22, 0x52, 0x1E, 0x08, 0x13,  // ..."R...
                                /* 1FC0 */  0xFF, 0x3A, 0xD0, 0x91, 0xCD, 0x30, 0xFC, 0x80,  // .:...0..
                                /* 1FC8 */  0x03, 0xB8, 0x02, 0x0A, 0xED, 0xFF, 0xFF, 0xC9,  // ........
                                /* 1FD0 */  0x0B, 0x1C, 0x47, 0x04, 0xDC, 0x59, 0xC0, 0x07,  // ..G..Y..
                                /* 1FD8 */  0x04, 0x5F, 0x0E, 0xD8, 0xFD, 0xDD, 0x07, 0x83,  // ._......
                                /* 1FE0 */  0xC7, 0x03, 0xDF, 0x11, 0xD9, 0x64, 0x4E, 0x20,  // .....dN 
                                /* 1FE8 */  0xC2, 0xB3, 0x0D, 0xFC, 0xA1, 0xBC, 0xCA, 0x84,  // ........
                                /* 1FF0 */  0x88, 0xF3, 0x60, 0x10, 0xE1, 0x25, 0x24, 0xC4,  // ..`..%$.
                                /* 1FF8 */  0x3B, 0x4D, 0x9C, 0x47, 0x9A, 0xD7, 0x88, 0x08,  // ;M.G....
                                /* 2000 */  0xCF, 0x36, 0x46, 0x8A, 0x10, 0xE8, 0xD9, 0x86,  // .6F.....
                                /* 2008 */  0x81, 0xBE, 0xDD, 0x78, 0x1A, 0x31, 0x1E, 0xA8,  // ...x.1..
                                /* 2010 */  0x63, 0x45, 0x0A, 0x71, 0x22, 0xE1, 0x42, 0x46,  // cE.q".BF
                                /* 2018 */  0x8A, 0x16, 0xE3, 0xD9, 0x86, 0xC5, 0x3B, 0x0E,  // ......;.
                                /* 2020 */  0xE8, 0x24, 0xE2, 0xB3, 0x0D, 0xC0, 0x8F, 0xCB,  // .$......
                                /* 2028 */  0xC1, 0xD3, 0x09, 0x9C, 0xFF, 0xFF, 0xE9, 0x04,  // ........
                                /* 2030 */  0xEE, 0x59, 0x01, 0xDE, 0xA9, 0x04, 0x98, 0x7C,  // .Y.....|
                                /* 2038 */  0x29, 0xAC, 0x65, 0xAC, 0x5E, 0xAC, 0x6C, 0x2C,  // ).e.^.l,
                                /* 2040 */  0xD6, 0x67, 0x0C, 0x2A, 0xF3, 0x94, 0xA0, 0x09,  // .g.*....
                                /* 2048 */  0x1C, 0x9E, 0x91, 0xC3, 0xBE, 0xBF, 0x18, 0x24,  // .......$
                                /* 2050 */  0xF2, 0xB3, 0x89, 0xE1, 0x9F, 0x2B, 0x22, 0x1C,  // .....+".
                                /* 2058 */  0xC4, 0x59, 0x04, 0x62, 0xE7, 0x04, 0x43, 0xC4,  // .Y.b..C.
                                /* 2060 */  0x7A, 0x9B, 0xF0, 0x98, 0x04, 0xAE, 0x23, 0x90,  // z.....#.
                                /* 2068 */  0x21, 0x2C, 0x83, 0x42, 0x87, 0x71, 0x8F, 0xCB,  // !,.B.q..
                                /* 2070 */  0x70, 0x8E, 0x0D, 0x46, 0x41, 0x7C, 0x10, 0xF0,  // p..FA|..
                                /* 2078 */  0xE1, 0xC1, 0xE7, 0x23, 0xDC, 0x7E, 0x3C, 0x10,  // ...#.~<.
                                /* 2080 */  0xF8, 0xA7, 0x35, 0x9F, 0x1E, 0xE0, 0x00, 0x47,  // ..5....G
                                /* 2088 */  0x3C, 0x49, 0x4F, 0xC5, 0x70, 0x3E, 0x2B, 0x71,  // <IO.p>+q
                                /* 2090 */  0x38, 0xDF, 0x0A, 0x4E, 0xDE, 0x04, 0xEC, 0x28,  // 8..N...(
                                /* 2098 */  0x04, 0x3E, 0x81, 0xA7, 0x03, 0x50, 0x00, 0xF9,  // .>...P..
                                /* 20A0 */  0x2E, 0xE0, 0x03, 0xCE, 0xF3, 0x00, 0x9B, 0xC3,  // ........
                                /* 20A8 */  0x33, 0x8E, 0x4F, 0x38, 0xEC, 0x30, 0x88, 0x18,  // 3.O8.0..
                                /* 20B0 */  0x15, 0x3D, 0x07, 0x1F, 0x17, 0xE6, 0x78, 0xE0,  // .=....x.
                                /* 20B8 */  0x23, 0xCC, 0xFF, 0xFF, 0x11, 0xC6, 0xD8, 0xEF,  // #.......
                                /* 20C0 */  0x01, 0xBE, 0x3C, 0x3D, 0x34, 0xF9, 0x4C, 0x85,  // ..<=4.L.
                                /* 20C8 */  0x81, 0xF5, 0x48, 0x39, 0xAC, 0xD1, 0xC2, 0x1E,  // ..H9....
                                /* 20D0 */  0xF0, 0x43, 0x84, 0x2F, 0x20, 0x9E, 0x99, 0x4F,  // .C./ ..O
                                /* 20D8 */  0x28, 0x3E, 0x8C, 0x82, 0xED, 0x88, 0xC0, 0xAE,  // (>......
                                /* 20E0 */  0x02, 0xCF, 0x09, 0x18, 0x98, 0xA7, 0x01, 0x2C,  // .......,
                                /* 20E8 */  0xD0, 0x13, 0x5D, 0xA0, 0x77, 0x13, 0x63, 0xF3,  // ..].w.c.
                                /* 20F0 */  0xEB, 0x00, 0x39, 0x38, 0xA0, 0x4E, 0x40, 0x96,  // ..98.N@.
                                /* 20F8 */  0x75, 0x70, 0x80, 0x78, 0x38, 0xC0, 0x1E, 0x18,  // up.x8...
                                /* 2100 */  0x7C, 0x68, 0xE0, 0xF1, 0x0F, 0x67, 0xF4, 0xD0,  // |h...g..
                                /* 2108 */  0xC0, 0xE3, 0x82, 0x51, 0x10, 0x1F, 0x1A, 0x1C,  // ...Q....
                                /* 2110 */  0xE5, 0xD0, 0x80, 0x3E, 0x0C, 0xF8, 0xC0, 0x00,  // ...>....
                                /* 2118 */  0x18, 0xFE, 0xFF, 0x1F, 0x18, 0x60, 0x0D, 0xDA,  // .....`..
                                /* 2120 */  0x07, 0x06, 0xE0, 0x79, 0x58, 0x80, 0x71, 0x6A,  // ...yX.qj
                                /* 2128 */  0xF0, 0x71, 0x00, 0x7B, 0x60, 0x80, 0x0F, 0xFC,  // .q.{`...
                                /* 2130 */  0xC0, 0x00, 0xEC, 0x6F, 0x07, 0x3E, 0x16, 0xF1,  // ...o.>..
                                /* 2138 */  0x03, 0x03, 0x60, 0xEB, 0xFF, 0x7F, 0x60, 0x80,  // ..`...`.
                                /* 2140 */  0x05, 0xCB, 0x0F, 0x0C, 0xC0, 0xE7, 0x68, 0xC0,  // ......h.
                                /* 2148 */  0x0E, 0x0C, 0x60, 0x14, 0x72, 0x60, 0x40, 0xDD,  // ..`.r`@.
                                /* 2150 */  0xD8, 0x12, 0x94, 0x77, 0x60, 0x81, 0x76, 0xDC,  // ...w`.v.
                                /* 2158 */  0xB3, 0x77, 0x10, 0x82, 0xEF, 0x99, 0x79, 0x18,  // .w....y.
                                /* 2160 */  0xCF, 0x68, 0xEF, 0x57, 0x3E, 0x6B, 0x62, 0x0E,  // .h.W>kb.
                                /* 2168 */  0xF5, 0x3E, 0x35, 0xF0, 0x43, 0x83, 0xA3, 0x9F,  // .>5.C...
                                /* 2170 */  0x1A, 0x50, 0x87, 0x53, 0x83, 0x19, 0xC4, 0xA7,  // .P.S....
                                /* 2178 */  0x06, 0x07, 0x39, 0xA8, 0x42, 0x3F, 0xB4, 0x00,  // ..9.B?..
                                /* 2180 */  0x06, 0xFF, 0xFF, 0x87, 0x06, 0xB0, 0x1C, 0x04,  // ........
                                /* 2188 */  0x7D, 0x68, 0x01, 0x9E, 0x27, 0x04, 0x06, 0xE2,  // }h..'...
                                /* 2190 */  0x13, 0x02, 0xEE, 0x70, 0x8B, 0x3D, 0x34, 0xC0,  // ...p.=4.
                                /* 2198 */  0x3F, 0xB4, 0xF0, 0x43, 0x03, 0xE0, 0xE1, 0xE0,  // ?..C....
                                /* 21A0 */  0x02, 0x98, 0xF9, 0xFF, 0x1F, 0x1A, 0xC0, 0x6A,  // .......j
                                /* 21A8 */  0xE1, 0xE0, 0x02, 0x54, 0x0F, 0x0D, 0xE0, 0x08,  // ...T....
                                /* 21B0 */  0xB4, 0x3A, 0x1D, 0x1A, 0xF8, 0x59, 0xDC, 0x71,  // .:...Y.q
                                /* 21B8 */  0xDF, 0x06, 0x3A, 0xB8, 0xC0, 0x81, 0x3A, 0xB3,  // ..:...:.
                                /* 21C0 */  0x10, 0x41, 0x1E, 0x5B, 0x7D, 0xA5, 0x3C, 0x80,  // .A.[}.<.
                                /* 21C8 */  0x04, 0x8E, 0x06, 0xAB, 0x03, 0x03, 0x0F, 0x05,  // ........
                                /* 21D0 */  0xA3, 0x48, 0x10, 0x3A, 0x30, 0xF0, 0x10, 0x70,  // .H.:0..p
                                /* 21D8 */  0x14, 0xC4, 0xA3, 0xF5, 0x81, 0x01, 0xCE, 0x20,  // ....... 
                                /* 21E0 */  0x0E, 0xE1, 0x18, 0xDF, 0x4E, 0x7D, 0x68, 0x01,  // ....N}h.
                                /* 21E8 */  0xC6, 0x83, 0x82, 0x89, 0x7C, 0x50, 0x60, 0xF9,  // ....|P`.
                                /* 21F0 */  0xFF, 0x0F, 0x0A, 0xE6, 0x70, 0x3D, 0x28, 0xE0,  // ....p=(.
                                /* 21F8 */  0x70, 0x4A, 0x08, 0x59, 0xFD, 0x81, 0x40, 0x13,  // pJ.Y..@.
                                /* 2200 */  0xF7, 0xA0, 0xC0, 0x7D, 0x20, 0xF1, 0xA0, 0x80,  // ...} ...
                                /* 2208 */  0xCB, 0xC4, 0x3D, 0x28, 0x70, 0x43, 0xF9, 0x70,  // ..=(pC.p
                                /* 2210 */  0x02, 0xBC, 0x83, 0x1D, 0x4E, 0x40, 0x77, 0xAC,  // ....N@w.
                                /* 2218 */  0xF7, 0xE1, 0x04, 0xD6, 0xFF, 0xFF, 0x70, 0x02,  // ......p.
                                /* 2220 */  0x6B, 0x40, 0x0F, 0x48, 0x60, 0x3E, 0x89, 0x30,  // k@.H`>.0
                                /* 2228 */  0x90, 0x27, 0x11, 0xDC, 0xC1, 0x04, 0xFE, 0xE1,  // .'......
                                /* 2230 */  0x88, 0x1F, 0x4C, 0x80, 0xF7, 0xC1, 0x08, 0x78,  // ..L....x
                                /* 2238 */  0x1D, 0x4C, 0xC0, 0x3B, 0x28, 0x70, 0x1C, 0x4C,  // .L.;(p.L
                                /* 2240 */  0x80, 0xC5, 0xFF, 0xFF, 0x60, 0x02, 0x96, 0x41,  // ....`..A
                                /* 2248 */  0x81, 0xE3, 0x60, 0x02, 0x5C, 0x07, 0x05, 0x8E,  // ..`.\...
                                /* 2250 */  0x83, 0x09, 0xE0, 0xCA, 0xC3, 0xC1, 0x04, 0x68,  // .......h
                                /* 2258 */  0x1D, 0xC2, 0xE0, 0x1C, 0x4C, 0xB0, 0xFF, 0xFF,  // ....L...
                                /* 2260 */  0x93, 0x08, 0x0B, 0x77, 0x08, 0x44, 0x89, 0x3C,  // ...w.D.<
                                /* 2268 */  0x98, 0xF8, 0x20, 0x0A, 0x0D, 0x24, 0xD4, 0x39,  // .. ..$.9
                                /* 2270 */  0x19, 0xE5, 0x78, 0x8F, 0xE4, 0x9C, 0x82, 0xBC,  // ..x.....
                                /* 2278 */  0x9F, 0x06, 0x3D, 0x93, 0x20, 0x27, 0x14, 0xE8,  // ..=. '..
                                /* 2280 */  0x84, 0x0E, 0xCE, 0x88, 0x2F, 0x82, 0xBE, 0x69,  // ..../..i
                                /* 2288 */  0x30, 0x02, 0x47, 0x39, 0x08, 0xA2, 0x42, 0x50,  // 0.G9..BP
                                /* 2290 */  0x28, 0x02, 0x84, 0x0E, 0x28, 0x5C, 0x34, 0x1C,  // (...(\4.
                                /* 2298 */  0x05, 0xF1, 0xD0, 0x7D, 0x10, 0x03, 0xF8, 0x71,  // ...}...q
                                /* 22A0 */  0xB0, 0x00, 0x1E, 0x21, 0x0F, 0x16, 0x88, 0xFF,  // ...!....
                                /* 22A8 */  0xFF, 0xC1, 0x02, 0x2C, 0xE0, 0x3E, 0x58, 0x80,  // ...,.>X.
                                /* 22B0 */  0x0B, 0xFE, 0x01, 0x0A, 0xCC, 0x27, 0x09, 0x8E,  // .....'..
                                /* 22B8 */  0xF2, 0x24, 0xC1, 0x2E, 0xCE, 0x3E, 0x49, 0x18,  // .$...>I.
                                /* 22C0 */  0xE4, 0x49, 0x02, 0x7B, 0xBC, 0x00, 0xC7, 0x31,  // .I.{...1
                                /* 22C8 */  0x8A, 0x1F, 0x2F, 0x00, 0x2F, 0xC7, 0x29, 0xC0,  // .././.).
                                /* 22D0 */  0xC0, 0xFF, 0xFF, 0x38, 0x05, 0x2C, 0x8F, 0x17,  // ...8.,..
                                /* 22D8 */  0xC0, 0xDB, 0xC4, 0xF1, 0x02, 0x68, 0x1D, 0x83,  // .....h..
                                /* 22E0 */  0xE0, 0x1C, 0x2F, 0xC0, 0x15, 0xF6, 0xD0, 0x87,  // ../.....
                                /* 22E8 */  0x3A, 0x03, 0x38, 0xFE, 0xE1, 0x16, 0xDA, 0xF1,  // :.8.....
                                /* 22F0 */  0x02, 0x1E, 0x81, 0x63, 0x1E, 0xFB, 0x50, 0x01,  // ...c..P.
                                /* 22F8 */  0x61, 0x14, 0xEF, 0xD8, 0x87, 0x0A, 0x04, 0x47,  // a......G
                                /* 2300 */  0x41, 0x7C, 0xEC, 0x73, 0x9C, 0x43, 0x03, 0x7A,  // A|.s.C.z
                                /* 2308 */  0x9C, 0x3E, 0x0F, 0xBC, 0x19, 0x1C, 0xE6, 0xFF,  // .>......
                                /* 2310 */  0x3F, 0xC2, 0x11, 0xB3, 0x61, 0x60, 0x4E, 0x42,  // ?...a`NB
                                /* 2318 */  0xC0, 0x37, 0xCA, 0xB8, 0xD0, 0xD0, 0x9E, 0x6B,  // .7.....k
                                /* 2320 */  0xED, 0x02, 0x3C, 0x8F, 0x0A, 0x68, 0x1C, 0x2E,  // ..<..h..
                                /* 2328 */  0xC0, 0x39, 0x2A, 0x38, 0xC0, 0xCF, 0x04, 0xC5,  // .9*8....
                                /* 2330 */  0x8F, 0x0A, 0x68, 0x9C, 0xFD, 0xC0, 0x39, 0x2A,  // ..h...9*
                                /* 2338 */  0x58, 0x90, 0x1E, 0x15, 0xB8, 0xFF, 0xFF, 0x87,  // X.......
                                /* 2340 */  0x3F, 0xC0, 0xC2, 0x31, 0x05, 0x7C, 0x2A, 0x8E,  // ?..1.|*.
                                /* 2348 */  0x29, 0x80, 0x16, 0x31, 0x87, 0x2A, 0x94, 0xBC,  // )..1.*..
                                /* 2350 */  0x81, 0xFB, 0x08, 0x08, 0xA2, 0xDB, 0xA6, 0x2F,  // ......./
                                /* 2358 */  0x1B, 0x87, 0x16, 0xCF, 0xD7, 0x7C, 0x8C, 0x84,  // .....|..
                                /* 2360 */  0x13, 0x15, 0x2A, 0x3C, 0x84, 0xA2, 0x9F, 0x04,  // ..*<....
                                /* 2368 */  0xE8, 0x09, 0x86, 0x80, 0x51, 0x10, 0x1F, 0x22,  // ....Q.."
                                /* 2370 */  0x7C, 0x5A, 0x82, 0x33, 0x92, 0x27, 0x7F, 0xCC,  // |Z.3.'..
                                /* 2378 */  0xB9, 0x01, 0xD6, 0xFF, 0xFF, 0x98, 0x02, 0xCC,  // ........
                                /* 2380 */  0xCE, 0x0D, 0xC0, 0x23, 0xE2, 0xB9, 0x01, 0x74,  // ...#...t
                                /* 2388 */  0xE3, 0xF4, 0xB9, 0x01, 0x5C, 0x07, 0x3D, 0x7E,  // ....\.=~
                                /* 2390 */  0xB6, 0x03, 0x16, 0x47, 0x04, 0x0C, 0xCC, 0x23,  // ...G...#
                                /* 2398 */  0x02, 0xE6, 0xD8, 0x00, 0xFF, 0x68, 0x07, 0xF3,  // .....h..
                                /* 23A0 */  0xD8, 0x00, 0xFC, 0xFE, 0xFF, 0xE7, 0x3A, 0x60,  // ......:`
                                /* 23A8 */  0x7C, 0x6C, 0x00, 0xDE, 0xC3, 0xF5, 0xB1, 0x01,  // |l......
                                /* 23B0 */  0x38, 0x9D, 0x5E, 0xC0, 0x72, 0x6C, 0x80, 0x25,  // 8.^.rl.%
                                /* 23B8 */  0xED, 0xC8, 0x86, 0x3A, 0x36, 0x58, 0xEE, 0x91,  // ...:6X..
                                /* 23C0 */  0x0D, 0x44, 0x93, 0x0E, 0x12, 0xC9, 0x73, 0x7A,  // .D....sz
                                /* 23C8 */  0xF7, 0xC7, 0x09, 0x3A, 0xB5, 0xA1, 0xA4, 0xC0,  // ...:....
                                /* 23D0 */  0x48, 0xC8, 0xA9, 0x0D, 0x15, 0xFD, 0xF4, 0x40,  // H......@
                                /* 23D8 */  0x41, 0x2C, 0xE1, 0xD8, 0x80, 0xF8, 0xFF, 0x9F,  // A,......
                                /* 23E0 */  0xC7, 0xF1, 0x73, 0x39, 0x95, 0xA3, 0x78, 0x68,  // ..s9..xh
                                /* 23E8 */  0xF1, 0xE1, 0x05, 0xF8, 0xC6, 0x18, 0x14, 0x1A,  // ........
                                /* 23F0 */  0xDE, 0xA0, 0x11, 0x1F, 0x09, 0x7C, 0x60, 0x03,  // .....|`.
                                /* 23F8 */  0xBE, 0xE3, 0x86, 0x03, 0xFD, 0xE8, 0xE0, 0x79,  // .......y
                                /* 2400 */  0xFB, 0xBC, 0x06, 0x8C, 0x4F, 0x1F, 0xC0, 0xEC,  // ....O...
                                /* 2408 */  0xFF, 0x7F, 0xFA, 0x80, 0x6D, 0xE3, 0x0C, 0x04,  // ....m...
                                /* 2410 */  0xE4, 0x4F, 0x1A, 0x98, 0xBB, 0x3D, 0xEE, 0xF4,  // .O...=..
                                /* 2418 */  0x01, 0xFF, 0x0C, 0x04, 0xF3, 0xF4, 0x01, 0xCC,  // ........
                                /* 2420 */  0xCF, 0x40, 0xC0, 0xEB, 0xF4, 0x01, 0xCE, 0x31,  // .@.....1
                                /* 2428 */  0x61, 0xFF, 0xFF, 0xA7, 0x0F, 0xC0, 0xC0, 0xA0,  // a.......
                                /* 2430 */  0xC0, 0x71, 0xFA, 0x00, 0x5C, 0xE9, 0x38, 0x4A,  // .q..\.8J
                                /* 2438 */  0x01, 0xF9, 0xD3, 0x07, 0xB4, 0x03, 0x1D, 0xEA,  // ........
                                /* 2440 */  0x12, 0x60, 0x91, 0x07, 0x3A, 0xC4, 0xFF, 0xFF,  // .`..:...
                                /* 2448 */  0x28, 0x05, 0x7F, 0xEE, 0x4F, 0x39, 0x9E, 0x9C,  // (...O9..
                                /* 2450 */  0x71, 0xA2, 0xF4, 0x8E, 0xA2, 0xF3, 0x07, 0xEE,  // q.......
                                /* 2458 */  0x48, 0x07, 0xFE, 0x79, 0x7A, 0x30, 0x3E, 0x58,  // H..yz0>X
                                /* 2460 */  0x02, 0xEE, 0x06, 0xEA, 0x83, 0x03, 0xB8, 0x7C,  // .......|
                                /* 2468 */  0x1C, 0x1C, 0x40, 0x77, 0x9A, 0x7E, 0x0A, 0x02,  // ..@w.~..
                                /* 2470 */  0x2E, 0x87, 0x04, 0xFC, 0xFF, 0x1F, 0xE5, 0xE9,  // ........
                                /* 2478 */  0x01, 0xBC, 0x47, 0x21, 0x98, 0xA7, 0x07, 0xC0,  // ..G!....
                                /* 2480 */  0xC0, 0xF9, 0x12, 0xF0, 0x73, 0x7A, 0x00, 0xDF,  // ....sz..
                                /* 2488 */  0x58, 0x7C, 0x7A, 0x00, 0x4E, 0xB3, 0xFA, 0xFF,  // X|z.N...
                                /* 2490 */  0x3F, 0x3D, 0x00, 0x9B, 0xD7, 0x81, 0x4F, 0x0F,  // ?=....O.
                                /* 2498 */  0xFC, 0x1C, 0x60, 0x69, 0x47, 0x19, 0x68, 0xD7,  // ..`iG.h.
                                /* 24A0 */  0x6F, 0xEC, 0x35, 0x17, 0x77, 0xDA, 0x06, 0x58,  // o.5.w..X
                                /* 24A8 */  0x10, 0xEE, 0xE0, 0x00, 0x3A, 0x23, 0x07, 0x07,  // ....:#..
                                /* 24B0 */  0xD0, 0x89, 0x1D, 0x0B, 0xE2, 0xFF, 0x7F, 0x8A,  // ........
                                /* 24B8 */  0x01, 0xE3, 0xF9, 0x00, 0x7B, 0xC7, 0xC5, 0x1D,  // ....{...
                                /* 24C0 */  0x18, 0xC0, 0x70, 0x7A, 0xE1, 0x07, 0x06, 0xE0,  // ..pz....
                                /* 24C8 */  0x7F, 0x70, 0x01, 0xFC, 0x1C, 0x18, 0xC0, 0xA7,  // .p......
                                /* 24D0 */  0xE4, 0xC0, 0x00, 0xE2, 0xFF, 0xFF, 0xC1, 0x05,  // ........
                                /* 24D8 */  0x8C, 0x07, 0x06, 0x70, 0x1F, 0xE5, 0xB0, 0x27,  // ...p...'
                                /* 24E0 */  0x12, 0x9F, 0x1A, 0x7C, 0x89, 0x39, 0x89, 0x28,  // ...|.9.(
                                /* 24E8 */  0xE7, 0x73, 0x92, 0x0F, 0x2C, 0x00, 0x6F, 0x46,  // .s..,.oF
                                /* 24F0 */  0xEC, 0x03, 0x03, 0x58, 0xFF, 0xFF, 0xA7, 0x38,  // ...X...8
                                /* 24F8 */  0xF0, 0x1E, 0x00, 0x7C, 0xCB, 0xF7, 0xF9, 0x00,  // ...|....
                                /* 2500 */  0x7B, 0x60, 0x01, 0xCF, 0x81, 0x01, 0xF8, 0x1F,  // {`......
                                /* 2508 */  0x58, 0x00, 0x9F, 0x52, 0x0E, 0x0C, 0x20, 0xFE,  // X..R.. .
                                /* 2510 */  0xFF, 0x1F, 0xDC, 0xC0, 0x7B, 0x60, 0x80, 0x15,  // ....{`..
                                /* 2518 */  0xE6, 0x5C, 0x8E, 0xE2, 0x70, 0xD4, 0x73, 0x39,  // .\..p.s9
                                /* 2520 */  0xFA, 0xC0, 0xC2, 0x27, 0x18, 0xEB, 0x68, 0x4F,  // ...'..hO
                                /* 2528 */  0x37, 0x81, 0xA3, 0x1D, 0xC8, 0x51, 0xA1, 0x60,  // 7....Q.`
                                /* 2530 */  0x14, 0xE9, 0x40, 0x8E, 0x0A, 0x01, 0x47, 0x41,  // ..@...GA
                                /* 2538 */  0x6C, 0xE1, 0xB0, 0x00, 0x6D, 0x0A, 0xC7, 0x76,  // l...m..v
                                /* 2540 */  0x7C, 0x27, 0xE9, 0xC3, 0x0A, 0x30, 0x1E, 0x14,  // |'...0..
                                /* 2548 */  0x4C, 0xE4, 0x83, 0x02, 0xFF, 0x89, 0x1C, 0x78,  // L......x
                                /* 2550 */  0x9C, 0x0C, 0x42, 0x56, 0x7F, 0x1C, 0xD0, 0xC4,  // ..BV....
                                /* 2558 */  0x3D, 0x28, 0x18, 0xFF, 0xFF, 0x41, 0x81, 0xE9,  // =(...A..
                                /* 2560 */  0x44, 0x0E, 0xCE, 0x41, 0xC1, 0x9D, 0xB8, 0x07,  // D..A....
                                /* 2568 */  0x05, 0x6E, 0x28, 0x1F, 0x4C, 0x80, 0x77, 0xB0,  // .n(.L.w.
                                /* 2570 */  0x83, 0x09, 0xE8, 0xAC, 0x1C, 0x4C, 0x40, 0x37,  // .....L@7
                                /* 2578 */  0xA0, 0x07, 0x23, 0x30, 0x9F, 0x43, 0x38, 0xCA,  // ..#0.C8.
                                /* 2580 */  0xF1, 0xFA, 0x58, 0xCA, 0x8E, 0x25, 0x30, 0xFF,  // ..X..%0.
                                /* 2588 */  0xFF, 0xC7, 0x22, 0xEC, 0xB1, 0x04, 0xF8, 0x1E,  // ..".....
                                /* 2590 */  0x89, 0x80, 0xD7, 0xB1, 0x04, 0xBC, 0x83, 0x02,  // ........
                                /* 2598 */  0xC7, 0xB1, 0x04, 0xB8, 0x0E, 0x0A, 0x1C, 0xC7,  // ........
                                /* 25A0 */  0x12, 0xB0, 0xFF, 0xFF, 0x8F, 0x25, 0x60, 0x1B,  // .....%`.
                                /* 25A8 */  0x14, 0x38, 0x8E, 0x25, 0x80, 0x2B, 0x2D, 0xC7,  // .8.%.+-.
                                /* 25B0 */  0x12, 0xA0, 0x75, 0xFC, 0x82, 0x73, 0x2C, 0x81,  // ..u..s,.
                                /* 25B8 */  0x23, 0xD3, 0xC3, 0x18, 0x58, 0x88, 0x57, 0x84,  // #...X.W.
                                /* 25C0 */  0x84, 0xC1, 0xA0, 0x34, 0x9C, 0x07, 0xA0, 0x8C,  // ...4....
                                /* 25C8 */  0xF0, 0x04, 0x8E, 0xEB, 0x90, 0x98, 0x24, 0x38,  // ......$8
                                /* 25D0 */  0xD4, 0xE0, 0x3D, 0xA4, 0x57, 0xD2, 0xA3, 0x78,  // ..=.W..x
                                /* 25D8 */  0x2C, 0xF3, 0x38, 0xCE, 0x29, 0x24, 0x93, 0x36,  // ,.8.)$.6
                                /* 25E0 */  0x36, 0xD4, 0xC1, 0xCD, 0xF3, 0x39, 0xB3, 0xA3,  // 6....9..
                                /* 25E8 */  0xA9, 0xFD, 0x94, 0x4E, 0x8E, 0xE7, 0x26, 0xF0,  // ...N..&.
                                /* 25F0 */  0x28, 0xFE, 0xFF, 0x91, 0x8D, 0xC6, 0xA1, 0xB1,  // (.......
                                /* 25F8 */  0xC3, 0xF0, 0x7D, 0x20, 0xD8, 0x41, 0x1C, 0xC6,  // ..} .A..
                                /* 2600 */  0x39, 0x9B, 0xC0, 0x13, 0x3A, 0xCD, 0x72, 0xEF,  // 9...:.r.
                                /* 2608 */  0x09, 0x3A, 0xC8, 0x47, 0x8D, 0xD1, 0x1C, 0x14,  // .:.G....
                                /* 2610 */  0x81, 0x3B, 0x6A, 0xB0, 0x80, 0x79, 0xB6, 0xC7,  // .;j..y..
                                /* 2618 */  0xEB, 0xCB, 0x9B, 0xB1, 0xD8, 0x98, 0x63, 0x84,  // ......c.
                                /* 2620 */  0x8A, 0x51, 0xE3, 0xD0, 0xC9, 0xC8, 0x0D, 0x72,  // .Q.....r
                                /* 2628 */  0x1C, 0x8F, 0x71, 0x46, 0x8F, 0xFB, 0x38, 0x60,  // ..qF..8`
                                /* 2630 */  0x98, 0x03, 0x79, 0x98, 0xF5, 0x9D, 0xC9, 0x63,  // ..y....c
                                /* 2638 */  0xC1, 0x9E, 0x2E, 0xEC, 0xF9, 0x0A, 0x41, 0xEE,  // ......A.
                                /* 2640 */  0x05, 0x26, 0xE8, 0x7E, 0x34, 0x3A, 0x44, 0x84,  // .&.~4:D.
                                /* 2648 */  0xE8, 0x6D, 0x04, 0x42, 0xAF, 0x58, 0x80, 0x38,  // .m.B.X.8
                                /* 2650 */  0x01, 0xB6, 0x66, 0x26, 0xA0, 0x43, 0xAB, 0x0D,  // ..f&.C..
                                /* 2658 */  0x85, 0x60, 0x1E, 0x9D, 0x51, 0x82, 0x9D, 0xCC,  // .`..Q...
                                /* 2660 */  0xDB, 0xC4, 0xF1, 0x45, 0x89, 0xD1, 0x18, 0x84,  // ...E....
                                /* 2668 */  0x70, 0x03, 0xC6, 0x8C, 0x10, 0x30, 0x7A, 0xC4,  // p....0z.
                                /* 2670 */  0x38, 0x11, 0xDA, 0x1F, 0x04, 0x09, 0xF5, 0xCC,  // 8.......
                                /* 2678 */  0xD1, 0x58, 0x1C, 0x69, 0x34, 0xA8, 0x63, 0x85,  // .X.i4.c.
                                /* 2680 */  0x8F, 0x05, 0xBE, 0xEC, 0x7B, 0x54, 0x9E, 0x9D,  // ....{T..
                                /* 2688 */  0xD1, 0xCF, 0xA5, 0xCE, 0xD3, 0x3F, 0x25, 0xF0,  // .....?%.
                                /* 2690 */  0xD4, 0x7C, 0xFE, 0x80, 0xE3, 0x1A, 0x50, 0x37,  // .|....P7
                                /* 2698 */  0x83, 0xE7, 0x02, 0x76, 0x22, 0x32, 0x1C, 0x1F,  // ...v"2..
                                /* 26A0 */  0xA2, 0xC7, 0x1E, 0xEE, 0x04, 0x0E, 0x91, 0x01,  // ........
                                /* 26A8 */  0xFA, 0x00, 0x02, 0x7F, 0x3C, 0x3E, 0x08, 0x78,  // ....<>.x
                                /* 26B0 */  0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A,  // >'......
                                /* 26B8 */  0x99, 0xA1, 0x7D, 0xF3, 0x38, 0xAD, 0x47, 0x01,  // ..}.8.G.
                                /* 26C0 */  0x1F, 0x13, 0x0E, 0x8B, 0x1D, 0x65, 0x7C, 0x76,  // .....e|v
                                /* 26C8 */  0xF1, 0x78, 0xB0, 0xFF, 0xFF, 0xF1, 0x80, 0xF1,  // .x......
                                /* 26D0 */  0x1A, 0xF0, 0x74, 0x10, 0xE1, 0xA5, 0xC1, 0xF3,  // ..t.....
                                /* 26D8 */  0xF5, 0x99, 0x94, 0x1D, 0xE8, 0x3D, 0x1E, 0xDC,  // .....=..
                                /* 26E0 */  0x21, 0x81, 0x1D, 0x4E, 0xDE, 0x44, 0xD8, 0x19,  // !..N.D..
                                /* 26E8 */  0x4A, 0xC7, 0x54, 0x43, 0x48, 0xD4, 0xB1, 0x04,  // J.TCH...
                                /* 26F0 */  0x75, 0xAA, 0xF0, 0x81, 0x82, 0x5D, 0x1B, 0xE2,  // u....]..
                                /* 26F8 */  0x3E, 0x03, 0x18, 0x97, 0x1D, 0x84, 0x3C, 0x32,  // >.....<2
                                /* 2700 */  0xF8, 0x27, 0x84, 0xA7, 0x09, 0xB0, 0x1C, 0x23,  // .'.....#
                                /* 2708 */  0xF8, 0xB9, 0xC6, 0xBA, 0xCE, 0x2A, 0xF4, 0x58,  // .....*.X
                                /* 2710 */  0x03, 0x8E, 0x81, 0x38, 0xF0, 0x30, 0xD1, 0x83,  // ...8.0..
                                /* 2718 */  0xF3, 0x30, 0x39, 0xC8, 0xFB, 0xB6, 0xCF, 0x03,  // .09.....
                                /* 2720 */  0xEC, 0x6C, 0xEA, 0x71, 0x82, 0xE7, 0x40, 0x00,  // .l.q..@.
                                /* 2728 */  0x0E, 0x79, 0xE3, 0x04, 0xDD, 0x98, 0xF8, 0x40,  // .y.....@
                                /* 2730 */  0xC1, 0x27, 0xE5, 0x29, 0xA0, 0xE3, 0xFB, 0xFF,  // .'.)....
                                /* 2738 */  0xFF, 0x40, 0x31, 0x03, 0xF4, 0x40, 0xF9, 0xD9,  // .@1..@..
                                /* 2740 */  0x84, 0xC1, 0x04, 0x3E, 0x8E, 0xB8, 0x6F, 0x25,  // ...>..o%
                                /* 2748 */  0xEC, 0x54, 0x82, 0x39, 0x2D, 0xB0, 0xD1, 0x82,  // .T.9-...
                                /* 2750 */  0x07, 0xD0, 0xA3, 0x85, 0x7F, 0xA8, 0x05, 0xCF,  // ........
                                /* 2758 */  0x68, 0xF9, 0xC0, 0xB0, 0xC7, 0x17, 0x38, 0x73,  // h.....8s
                                /* 2760 */  0xF6, 0x19, 0x03, 0x0C, 0x56, 0x81, 0x74, 0x3E,  // ....V.t>
                                /* 2768 */  0x09, 0xF4, 0xC8, 0xF2, 0xC4, 0x72, 0x84, 0x64,  // .....r.d
                                /* 2770 */  0xD4, 0x50, 0xE1, 0xCF, 0xE5, 0xA0, 0x4E, 0xCF,  // .P....N.
                                /* 2778 */  0x17, 0x00, 0x8F, 0x1A, 0xEC, 0xA0, 0x1E, 0x35,  // .......5
                                /* 2780 */  0xF0, 0x19, 0x18, 0x76, 0xD4, 0xE0, 0xF9, 0xFF,  // ...v....
                                /* 2788 */  0x8F, 0x1A, 0x0C, 0x43, 0xC2, 0x9D, 0xCB, 0xE0,  // ...C....
                                /* 2790 */  0xA1, 0x44, 0x0F, 0xDD, 0xA7, 0x00, 0xAD, 0x10,  // .D......
                                /* 2798 */  0xBA, 0x77, 0x18, 0x2C, 0xCE, 0x3B, 0xA4, 0x41,  // .w.,.;.A
                                /* 27A0 */  0xE2, 0xBF, 0x47, 0x7A, 0x1A, 0x46, 0x38, 0xC1,  // ..Gz.F8.
                                /* 27A8 */  0xD7, 0x08, 0x43, 0x1D, 0x47, 0x88, 0x04, 0x45,  // ..C.G..E
                                /* 27B0 */  0x0E, 0x14, 0x3D, 0x0C, 0x8E, 0xFE, 0xA0, 0xC6,  // ..=.....
                                /* 27B8 */  0xB0, 0x8D, 0x72, 0x26, 0x47, 0xE5, 0x83, 0x95,  // ..r&G...
                                /* 27C0 */  0x11, 0xCE, 0xF2, 0x79, 0xEA, 0xF9, 0xCA, 0xD7,  // ...y....
                                /* 27C8 */  0x05, 0xCC, 0x79, 0x0D, 0x27, 0xFF, 0x2D, 0x60,  // ..y.'.-`
                                /* 27D0 */  0x02, 0x05, 0x38, 0x21, 0x48, 0x30, 0x0C, 0xEA,  // ..8!H0..
                                /* 27D8 */  0x0C, 0x06, 0xB8, 0xBA, 0x2F, 0xF8, 0x0C, 0x06,  // ..../...
                                /* 27E0 */  0x3C, 0x6E, 0x02, 0x41, 0x9E, 0x8D, 0xCE, 0xC5,  // <n.A....
                                /* 27E8 */  0x27, 0x30, 0xB8, 0xFF, 0xFF, 0x13, 0x18, 0xFE,  // '0......
                                /* 27F0 */  0xDA, 0xF2, 0xC6, 0x75, 0x06, 0xC1, 0x1F, 0xBB,  // ...u....
                                /* 27F8 */  0x18, 0xD6, 0x9B, 0x57, 0x88, 0x50, 0x07, 0x16,  // ...W.P..
                                /* 2800 */  0xE8, 0x09, 0xCC, 0x28, 0xE7, 0x10, 0x30, 0xCA,  // ...(..0.
                                /* 2808 */  0xB9, 0x05, 0x0A, 0xF5, 0x22, 0xC6, 0xAC, 0x21,  // ...."..!
                                /* 2810 */  0xE9, 0x02, 0x66, 0x90, 0xE0, 0x21, 0x82, 0xC4,  // ..f..!..
                                /* 2818 */  0x8A, 0xEC, 0x13, 0x18, 0x0B, 0xFC, 0x06, 0xD1,  // ........
                                /* 2820 */  0xE0, 0x7D, 0x02, 0x03, 0xF8, 0x11, 0xF7, 0x50,  // .}.....P
                                /* 2828 */  0x8A, 0x3E, 0x81, 0xC1, 0x39, 0x4A, 0x81, 0xEB,  // .>..9J..
                                /* 2830 */  0x04, 0x06, 0xA6, 0xFF, 0xFF, 0x09, 0x0C, 0x8C,  // ........
                                /* 2838 */  0xE7, 0x54, 0xF0, 0x85, 0x1F, 0x27, 0xFA, 0x94,  // .T...'..
                                /* 2840 */  0xE0, 0x51, 0xB0, 0x8B, 0x05, 0x66, 0xA6, 0xEF,  // .Q...f..
                                /* 2848 */  0x1D, 0x8F, 0x37, 0x26, 0x70, 0xC8, 0x43, 0x18,  // ..7&p.C.
                                /* 2850 */  0xD0, 0x39, 0xCA, 0xE0, 0x87, 0x0A, 0xFF, 0xF8,  // .9......
                                /* 2858 */  0x81, 0x9B, 0x15, 0x3B, 0xFE, 0x80, 0x65, 0xB8,  // ...;..e.
                                /* 2860 */  0x78, 0x71, 0x67, 0x28, 0x9F, 0xC6, 0xE9, 0x70,  // xqg(...p
                                /* 2868 */  0x61, 0x0E, 0x92, 0x8F, 0x43, 0xC0, 0x3A, 0x83,  // a...C.:.
                                /* 2870 */  0xFB, 0x14, 0x06, 0x3C, 0x86, 0x0B, 0x96, 0xFF,  // ...<....
                                /* 2878 */  0xFF, 0x70, 0x61, 0xCD, 0x85, 0x4F, 0xD7, 0xE7,  // .pa..O..
                                /* 2880 */  0x62, 0xDC, 0xA0, 0x30, 0x77, 0x67, 0x3E, 0xA8,  // b..0wg>.
                                /* 2888 */  0xA3, 0x78, 0x48, 0x80, 0x3D, 0x7C, 0xF0, 0x1C,  // .xH.=|..
                                /* 2890 */  0xA6, 0x78, 0xE8, 0xC3, 0x03, 0x7A, 0x34, 0x3E,  // .x...z4>
                                /* 2898 */  0x04, 0xFB, 0xEE, 0xE2, 0xC9, 0x9D, 0xDF, 0x4B,  // .......K
                                /* 28A0 */  0x87, 0xAF, 0xD2, 0x0E, 0x78, 0x18, 0x03, 0x3A,  // ....x..:
                                /* 28A8 */  0x43, 0xC5, 0x9D, 0x93, 0xE1, 0x8F, 0x89, 0xDF,  // C.......
                                /* 28B0 */  0x3A, 0x30, 0x07, 0x07, 0x30, 0xBE, 0x4C, 0x3C,  // :0..0.L<
                                /* 28B8 */  0x54, 0xDC, 0xC0, 0x3C, 0x0E, 0xDC, 0x1D, 0x00,  // T..<....
                                /* 28C0 */  0x4E, 0xCC, 0xD1, 0x82, 0xEA, 0x0C, 0xE1, 0xD1,  // N.......
                                /* 28C8 */  0xC2, 0x1F, 0xC6, 0xFF, 0xFF, 0x68, 0xC1, 0x79,  // .....h.y
                                /* 28D0 */  0xF1, 0x80, 0x35, 0x60, 0xF0, 0xC9, 0x3C, 0x78,  // ..5`..<x
                                /* 28D8 */  0xA0, 0x8F, 0x64, 0x1E, 0x30, 0xBC, 0x9B, 0x07,  // ..d.0...
                                /* 28E0 */  0xE6, 0x64, 0xC8, 0x8E, 0x1E, 0xE0, 0x39, 0xAF,  // .d....9.
                                /* 28E8 */  0x79, 0xC4, 0xF0, 0x4F, 0xE9, 0xE0, 0x1A, 0x31,  // y..O...1
                                /* 28F0 */  0xAC, 0xBB, 0x07, 0x6E, 0x00, 0x3E, 0x7C, 0x80,  // ...n.>|.
                                /* 28F8 */  0xE1, 0xA8, 0x00, 0xFF, 0xF4, 0x01, 0x3E, 0x59,  // ......>Y
                                /* 2900 */  0xA3, 0xD6, 0xD9, 0x16, 0x77, 0x4E, 0xF2, 0x48,  // ....wN.H
                                /* 2908 */  0x8E, 0xCA, 0x03, 0x89, 0xF1, 0x54, 0x18, 0xF6,  // .....T..
                                /* 2910 */  0x40, 0x1E, 0xBF, 0x5E, 0x13, 0x0F, 0xB2, 0x77,  // @..^...w
                                /* 2918 */  0x28, 0x32, 0xDF, 0xD7, 0xAC, 0x10, 0x55, 0x0F,  // (2....U.
                                /* 2920 */  0x41, 0xFF, 0xFF, 0x1B, 0x97, 0xAF, 0x63, 0x41,  // A.....cA
                                /* 2928 */  0x8E, 0xEC, 0x88, 0x5E, 0xF1, 0xD8, 0x71, 0xD7,  // ...^..q.
                                /* 2930 */  0x27, 0x09, 0xF0, 0x7C, 0xEE, 0x7D, 0x10, 0x80,  // '..|.}..
                                /* 2938 */  0x7F, 0xCA, 0x03, 0xCF, 0xE0, 0x30, 0x93, 0x38,  // .....0.8
                                /* 2940 */  0x35, 0x1C, 0x6C, 0xA0, 0x73, 0xC3, 0xE1, 0x1C,  // 5.l.s...
                                /* 2948 */  0x1C, 0xEE, 0x34, 0xC0, 0x8E, 0xBB, 0xE0, 0x92,  // ..4.....
                                /* 2950 */  0x34, 0x76, 0xF4, 0xD1, 0xD0, 0x90, 0xF1, 0x4E,  // 4v.....N
                                /* 2958 */  0xE4, 0xD0, 0xC1, 0x76, 0x3A, 0xF3, 0xD0, 0xC1,  // ...v:...
                                /* 2960 */  0x33, 0x2E, 0x0F, 0x1D, 0xBE, 0xE0, 0xA1, 0x83,  // 3.......
                                /* 2968 */  0x66, 0x6C, 0x6C, 0xE4, 0xC0, 0xE3, 0xFF, 0x7F,  // fll.....
                                /* 2970 */  0x6E, 0x06, 0xD3, 0x41, 0x16, 0x7B, 0x59, 0x62,  // n..A.{Yb
                                /* 2978 */  0x37, 0x5E, 0x18, 0x47, 0x5E, 0xB0, 0x99, 0x38,  // 7^.G^..8
                                /* 2980 */  0xF2, 0x02, 0x95, 0x03, 0x2F, 0xFE, 0x98, 0xC5,  // ..../...
                                /* 2988 */  0x8F, 0xBC, 0xE0, 0x3D, 0x89, 0xE0, 0x8F, 0x0F,  // ...=....
                                /* 2990 */  0xF8, 0x01, 0x78, 0x4C, 0x0C, 0xF4, 0x05, 0xF2,  // ..xL....
                                /* 2998 */  0x98, 0xF9, 0x6C, 0xD8, 0x58, 0x30, 0xE7, 0x10,  // ..l.X0..
                                /* 29A0 */  0x30, 0xAB, 0x38, 0x87, 0x00, 0x2D, 0xC8, 0x50,  // 0.8..-.P
                                /* 29A8 */  0x8F, 0x0F, 0xB1, 0x9E, 0x1F, 0xD8, 0xFF, 0xFF,  // ........
                                /* 29B0 */  0xFC, 0x00, 0xFF, 0xF8, 0x00, 0x36, 0x09, 0x23,  // .....6.#
                                /* 29B8 */  0x47, 0x8F, 0xD3, 0x4A, 0x47, 0x45, 0xC6, 0xE0,  // G..JGE..
                                /* 29C0 */  0x1B, 0xA8, 0xC7, 0xC7, 0xCE, 0x1F, 0xE0, 0x1A,  // ........
                                /* 29C8 */  0xB0, 0xCF, 0x1F, 0xC0, 0x67, 0xC4, 0xC0, 0xED,  // ....g...
                                /* 29D0 */  0xFC, 0x01, 0x26, 0x68, 0x9F, 0x3F, 0xC0, 0x3C,  // ..&h.?.<
                                /* 29D8 */  0x64, 0x9F, 0x3F, 0x80, 0xC1, 0xFF, 0xFF, 0xFC,  // d.?.....
                                /* 29E0 */  0x01, 0x7F, 0x64, 0x3E, 0x7F, 0x00, 0x83, 0x13,  // ..d>....
                                /* 29E8 */  0xAB, 0x47, 0x8D, 0x3B, 0x73, 0x62, 0xA6, 0x81,  // .G.;sb..
                                /* 29F0 */  0x39, 0x59, 0x18, 0x24, 0xCE, 0x13, 0x2B, 0xF8,  // 9Y.$..+.
                                /* 29F8 */  0x6C, 0x9C, 0x39, 0x81, 0xD2, 0xAC, 0x30, 0x30,  // l.9...00
                                /* 2A00 */  0x1E, 0x16, 0x3B, 0xE9, 0x81, 0x6B, 0xB8, 0x5C,  // ..;..k.\
                                /* 2A08 */  0xCC, 0x99, 0x01, 0x7D, 0x84, 0xF0, 0xE9, 0x87,  // ...}....
                                /* 2A10 */  0x5F, 0xD8, 0x70, 0x30, 0x87, 0x79, 0x32, 0x86,  // _.p0.y2.
                                /* 2A18 */  0x39, 0x4D, 0x9F, 0x09, 0x7C, 0x98, 0x66, 0x87,  // 9M..|.f.
                                /* 2A20 */  0x06, 0x70, 0xE9, 0x38, 0x34, 0x80, 0xF4, 0xFF,  // .p.84...
                                /* 2A28 */  0x3F, 0x64, 0x58, 0xA7, 0x1F, 0xCC, 0x69, 0x0F,  // ?dX...i.
                                /* 2A30 */  0x3B, 0x34, 0x38, 0xC3, 0x06, 0x26, 0x87, 0x0E,  // ;48..&..
                                /* 2A38 */  0x36, 0x6C, 0xE0, 0xE3, 0x63, 0xD8, 0x40, 0xE6,  // 6l..c.@.
                                /* 2A40 */  0xD0, 0xC1, 0x87, 0x0D, 0x4C, 0x27, 0x0D, 0x86,  // ....L'..
                                /* 2A48 */  0xEB, 0x07, 0x66, 0xD8, 0xE0, 0x1A, 0x94, 0xC7,  // ..f.....
                                /* 2A50 */  0xF7, 0xFF, 0x7F, 0x78, 0x00, 0x2C, 0x9D, 0x4C,  // ...x.,.L
                                /* 2A58 */  0x71, 0xC0, 0x1E, 0xB7, 0xEF, 0x9E, 0x11, 0x82,  // q.......
                                /* 2A60 */  0xBF, 0x7C, 0x3E, 0x1E, 0x9D, 0x4D, 0x84, 0x67,  // .|>..M.g
                                /* 2A68 */  0x5C, 0xA3, 0xBF, 0x1D, 0x3D, 0x21, 0xD6, 0x0A,  // \...=!..
                                /* 2A70 */  0x21, 0xB4, 0x57, 0x94, 0x60, 0x71, 0x82, 0x1C,  // !.W.`q..
                                /* 2A78 */  0x45, 0x90, 0x0A, 0xE1, 0xC8, 0x0D, 0xD6, 0x30,  // E......0
                                /* 2A80 */  0x81, 0x7C, 0x68, 0x81, 0x31, 0x08, 0x8E, 0x1C,  // .|h.1...
                                /* 2A88 */  0xEF, 0x90, 0xC2, 0x1E, 0xC4, 0xC9, 0x44, 0x39,  // ......D9
                                /* 2A90 */  0x8F, 0x63, 0xF2, 0xE8, 0xCE, 0x31, 0xC2, 0x31,  // .c...1.1
                                /* 2A98 */  0x95, 0x3B, 0x6C, 0xCD, 0xAF, 0xE6, 0x29, 0x6A,  // .;l...)j
                                /* 2AA0 */  0x5E, 0x6F, 0x8E, 0x81, 0x12, 0x78, 0x04, 0x5C,  // ^o...x.\
                                /* 2AA8 */  0xC2, 0x23, 0xC7, 0x04, 0x92, 0x7E, 0x40, 0x90,  // .#...~@.
                                /* 2AB0 */  0xAC, 0xE7, 0x00, 0x85, 0xF1, 0x81, 0xD6, 0x6C,  // .......l
                                /* 2AB8 */  0x3E, 0x09, 0x70, 0x60, 0x9F, 0x09, 0x4E, 0xE4,  // >.p`..N.
                                /* 2AC0 */  0x5C, 0x1F, 0x04, 0xD8, 0x69, 0xD7, 0x70, 0x7C,  // \...i.p|
                                /* 2AC8 */  0x98, 0x9E, 0xD8, 0xFB, 0xE4, 0xE1, 0x9E, 0xC8,  // ........
                                /* 2AD0 */  0xBB, 0x81, 0x6F, 0x02, 0x21, 0xD9, 0xC1, 0xD2,  // ..o.!...
                                /* 2AD8 */  0x87, 0x58, 0xDC, 0xB4, 0x4E, 0xCA, 0x67, 0xB0,  // .X..N.g.
                                /* 2AE0 */  0x88, 0x07, 0xE5, 0x7B, 0x95, 0x0F, 0x0A, 0x1C,  // ...{....
                                /* 2AE8 */  0x8D, 0x43, 0x63, 0x87, 0xE1, 0x01, 0x07, 0x3B,  // .Cc....;
                                /* 2AF0 */  0x88, 0xC3, 0x78, 0x93, 0x35, 0x81, 0x27, 0x74,  // ..x.5.'t
                                /* 2AF8 */  0xA2, 0x07, 0xF9, 0x46, 0xF0, 0x74, 0xF0, 0xFF,  // ...F.t..
                                /* 2B00 */  0x8F, 0x1A, 0xA3, 0x39, 0x28, 0x72, 0x56, 0x00,  // ...9(rV.
                                /* 2B08 */  0xCF, 0x51, 0x00, 0xD6, 0xEC, 0x7D, 0x0E, 0x78,  // .Q...}.x
                                /* 2B10 */  0x0C, 0x08, 0x15, 0xFC, 0x75, 0x21, 0xF6, 0xA9,  // ....u!..
                                /* 2B18 */  0x9C, 0x4B, 0xFC, 0x67, 0x5D, 0xA3, 0x1C, 0x06,  // .K.g]...
                                /* 2B20 */  0xE6, 0x24, 0xE1, 0xB3, 0xDF, 0x7B, 0x82, 0x4F,  // .$...{.O
                                /* 2B28 */  0x12, 0xCC, 0xFD, 0x78, 0x74, 0x67, 0x6E, 0x6D,  // ...xtgnm
                                /* 2B30 */  0x46, 0x02, 0x89, 0xC1, 0x6C, 0x61, 0xE8, 0x36,  // F...la.6
                                /* 2B38 */  0x76, 0x9A, 0x46, 0xF1, 0x5D, 0xE0, 0xBC, 0x5E,  // v.F.]..^
                                /* 2B40 */  0x18, 0xA2, 0x1C, 0xC3, 0x49, 0x44, 0x09, 0x14,  // ....ID..
                                /* 2B48 */  0x25, 0x48, 0xB4, 0x37, 0xB1, 0x88, 0xD1, 0x62,  // %H.7...b
                                /* 2B50 */  0xC4, 0x0D, 0x11, 0x35, 0x4C, 0xBC, 0x08, 0xED,  // ...5L...
                                /* 2B58 */  0x0F, 0x82, 0x84, 0x3B, 0x0D, 0xE8, 0xC0, 0xE1,  // ...;....
                                /* 2B60 */  0x48, 0xA3, 0x41, 0x1D, 0xA6, 0xF8, 0x69, 0xE0,  // H.A...i.
                                /* 2B68 */  0xB5, 0xC2, 0x07, 0x0E, 0x83, 0x9C, 0x81, 0x67,  // .......g
                                /* 2B70 */  0xF7, 0x28, 0xE0, 0x41, 0xB3, 0x3B, 0x82, 0x7F,  // .(.A.;..
                                /* 2B78 */  0x07, 0x3E, 0x1B, 0xE0, 0x5D, 0x03, 0xEA, 0x52,  // .>..]..R
                                /* 2B80 */  0xF0, 0x48, 0xC0, 0xCE, 0x1E, 0xF0, 0x4F, 0x19,  // .H....O.
                                /* 2B88 */  0xF0, 0xC7, 0xE3, 0x33, 0x80, 0xE7, 0x73, 0xC2,  // ...3..s.
                                /* 2B90 */  0x09, 0x2C, 0x7F, 0x10, 0xA8, 0x91, 0x19, 0xDA,  // .,......
                                /* 2B98 */  0x67, 0x80, 0xD3, 0x7A, 0x15, 0xF0, 0xD5, 0xCF,  // g..z....
                                /* 2BA0 */  0xA7, 0x02, 0xAE, 0xE0, 0x68, 0x02, 0x8A, 0xF1,  // ....h...
                                /* 2BA8 */  0xC0, 0x1F, 0xF9, 0x13, 0x86, 0xEF, 0x0B, 0x9E,  // ........
                                /* 2BB0 */  0xAF, 0x0F, 0x1C, 0xB8, 0xFF, 0xFF, 0x21, 0x04,  // ......!.
                                /* 2BB8 */  0x7C, 0x47, 0x05, 0xDC, 0x11, 0x04, 0x98, 0x44,  // |G.....D
                                /* 2BC0 */  0xA4, 0xD7, 0x99, 0xD5, 0xC1, 0x0F, 0x08, 0xB2,  // ........
                                /* 2BC8 */  0x71, 0x6A, 0xA7, 0xE7, 0x0E, 0x1F, 0xB3, 0x7D,  // qj.....}
                                /* 2BD0 */  0x2A, 0x63, 0xA3, 0xE8, 0x11, 0x5B, 0xB8, 0xA7,  // *c...[..
                                /* 2BD8 */  0x64, 0x70, 0x23, 0xBC, 0xFE, 0xE1, 0x44, 0x80,  // dp#...D.
                                /* 2BE0 */  0x8A, 0x41, 0x10, 0x24, 0xFE, 0x61, 0x8E, 0x8E,  // .A.$.a..
                                /* 2BE8 */  0xC9, 0x67, 0x49, 0x0E, 0x66, 0x10, 0x9F, 0x01,  // .gI.f...
                                /* 2BF0 */  0x1C, 0xE5, 0x38, 0x00, 0xE5, 0xE0, 0xC9, 0x2E,  // ..8.....
                                /* 2BF8 */  0x36, 0xBE, 0x5C, 0x98, 0xE0, 0x19, 0xC8, 0x87,  // 6.\.....
                                /* 2C00 */  0x06, 0x38, 0x03, 0x8C, 0x78, 0x72, 0x9E, 0x86,  // .8..xr..
                                /* 2C08 */  0xE1, 0x7C, 0x12, 0xE2, 0x70, 0xBE, 0x0C, 0x9C,  // .|..p...
                                /* 2C10 */  0xB4, 0x09, 0xD8, 0xA1, 0x00, 0x7C, 0x02, 0x0F,  // .....|..
                                /* 2C18 */  0x05, 0xA0, 0x00, 0xF2, 0x1D, 0xC0, 0x87, 0xD0,  // ........
                                /* 2C20 */  0xE7, 0x00, 0x36, 0x87, 0x10, 0x61, 0xA2, 0x19,  // ..6..a..
                                /* 2C28 */  0x1E, 0x13, 0x6C, 0x54, 0xF4, 0xF8, 0xE4, 0x71,  // ..lT...q
                                /* 2C30 */  0xF1, 0x63, 0x81, 0x0F, 0x2E, 0x0C, 0xFB, 0x05,  // .c......
                                /* 2C38 */  0xC0, 0xA2, 0xA7, 0xA3, 0xD1, 0x3F, 0x31, 0xB1,  // .....?1.
                                /* 2C40 */  0x61, 0xFF, 0xFF, 0xC3, 0xB2, 0x91, 0x72, 0x58,  // a.....rX
                                /* 2C48 */  0xA3, 0x3D, 0x1D, 0x79, 0x5C, 0xBE, 0x77, 0xF8,  // .=.y\.w.
                                /* 2C50 */  0x46, 0xE4, 0x93, 0x00, 0x3B, 0xFB, 0x83, 0xEB,  // F...;...
                                /* 2C58 */  0x6C, 0xC0, 0x8E, 0x90, 0x98, 0xD3, 0x01, 0xBF,  // l.......
                                /* 2C60 */  0x06, 0x62, 0x0F, 0x0B, 0xB0, 0xCF, 0x50, 0x3E,  // .b....P>
                                /* 2C68 */  0x2C, 0x00, 0xFF, 0xBB, 0x89, 0x4F, 0x22, 0xFC,  // ,....O".
                                /* 2C70 */  0xB0, 0x00, 0x38, 0x1C, 0xB4, 0x0F, 0x0B, 0xD8,  // ..8.....
                                /* 2C78 */  0xFF, 0xFF, 0x61, 0x01, 0x58, 0x9C, 0x0D, 0xD8,  // ..a.X...
                                /* 2C80 */  0x61, 0x01, 0x0C, 0x19, 0x57, 0xA6, 0xC3, 0x02,  // a...W...
                                /* 2C88 */  0x4E, 0x01, 0x90, 0x0E, 0x2A, 0xF8, 0x53, 0x3C,  // N...*.S<
                                /* 2C90 */  0x9C, 0xBC, 0xCB, 0xD3, 0x29, 0xC1, 0x03, 0x74,  // ....)..t
                                /* 2C98 */  0x52, 0x0A, 0xA5, 0x3E, 0x2C, 0xA0, 0x72, 0x1E,  // R..>,.r.
                                /* 2CA0 */  0x16, 0x28, 0x88, 0x01, 0x1D, 0x02, 0x42, 0x27,  // .(....B'
                                /* 2CA8 */  0x6A, 0xDC, 0xB1, 0xD3, 0x23, 0xE1, 0xA7, 0x03,  // j...#...
                                /* 2CB0 */  0x76, 0x9E, 0x39, 0x77, 0x36, 0x49, 0x4F, 0x99,  // v.9w6IO.
                                /* 2CB8 */  0x5F, 0xCD, 0x7C, 0x57, 0x60, 0xC8, 0xD5, 0xDC,  // _.|W`...
                                /* 2CC0 */  0x01, 0x50, 0x60, 0xBE, 0x2A, 0x60, 0x8E, 0xCC,  // .P`.*`..
                                /* 2CC8 */  0xE0, 0xD2, 0x77, 0x52, 0x00, 0x39, 0x3A, 0x8F,  // ..wR.9:.
                                /* 2CD0 */  0xBC, 0x4D, 0x4D, 0x95, 0x87, 0xBC, 0x6D, 0x50,  // .MM...mP
                                /* 2CD8 */  0x10, 0x0F, 0xCC, 0x37, 0x2D, 0x3B, 0x99, 0x2A,  // ...7-;.*
                                /* 2CE0 */  0xEA, 0x19, 0xE0, 0x73, 0x34, 0x3F, 0x01, 0x60,  // ...s4?.`
                                /* 2CE8 */  0x51, 0x0E, 0xAB, 0xFA, 0x53, 0x14, 0xB9, 0x6A,  // Q...S..j
                                /* 2CF0 */  0xE0, 0xFF, 0xFF, 0xD7, 0x1C, 0x70, 0x8D, 0xC7,  // .....p..
                                /* 2CF8 */  0xD7, 0x43, 0xF0, 0x38, 0x3B, 0xA6, 0xE9, 0x4E,  // .C.8;..N
                                /* 2D00 */  0xC2, 0x8D, 0x5C, 0x16, 0xE8, 0xC8, 0x7C, 0x1A,  // ..\...|.
                                /* 2D08 */  0xF0, 0xC8, 0x60, 0xDD, 0x31, 0xD8, 0xFD, 0xCC,  // ..`.1...
                                /* 2D10 */  0xE3, 0x82, 0x3B, 0x25, 0xDF, 0xF9, 0x70, 0x57,  // ..;%..pW
                                /* 2D18 */  0x0D, 0x36, 0x50, 0x3E, 0xA6, 0x87, 0x14, 0x8F,  // .6P>....
                                /* 2D20 */  0x18, 0xFE, 0x40, 0xE1, 0xDD, 0x3B, 0xF8, 0x45,  // ..@..;.E
                                /* 2D28 */  0x01, 0x3C, 0x37, 0x14, 0xE0, 0x0D, 0xCB, 0x6F,  // .<7....o
                                /* 2D30 */  0x28, 0xC0, 0xE1, 0xFF, 0x7F, 0x3B, 0x82, 0x7B,  // (....;.{
                                /* 2D38 */  0x4B, 0xC5, 0x9C, 0x50, 0x70, 0x07, 0x00, 0x2D,  // K..Pp..-
                                /* 2D40 */  0x5D, 0x37, 0x14, 0x9C, 0xD8, 0xDB, 0x11, 0x94,  // ]7......
                                /* 2D48 */  0x1B, 0x0A, 0x1C, 0x69, 0xB7, 0x23, 0x94, 0x28,  // ...i.#.(
                                /* 2D50 */  0x0A, 0x49, 0x3A, 0x67, 0xA0, 0x2E, 0x49, 0x1C,  // .I:g..I.
                                /* 2D58 */  0xC4, 0x47, 0x02, 0x07, 0x3C, 0x3E, 0xA0, 0x87,  // .G..<>..
                                /* 2D60 */  0xE2, 0x63, 0x02, 0xAC, 0x4B, 0x40, 0xA0, 0x07,  // .c..K@..
                                /* 2D68 */  0xA1, 0xD7, 0x4C, 0x7E, 0x5F, 0xF1, 0x09, 0x02,  // ..L~_...
                                /* 2D70 */  0xCE, 0x15, 0x09, 0xEE, 0x24, 0xD8, 0xB1, 0x03,  // ....$...
                                /* 2D78 */  0x73, 0x53, 0x82, 0x77, 0x6E, 0x00, 0x1C, 0x8D,  // sS.wn...
                                /* 2D80 */  0xD7, 0xE7, 0x06, 0x70, 0xFD, 0xFF, 0x2F, 0x4A,  // ...p../J
                                /* 2D88 */  0xE0, 0x3D, 0x37, 0xC0, 0x93, 0xB6, 0x20, 0x9D,  // .=7... .
                                /* 2D90 */  0x1B, 0xF8, 0x19, 0xC0, 0xE2, 0x2F, 0x4A, 0x50,  // ...../JP
                                /* 2D98 */  0x2E, 0x07, 0x38, 0xB9, 0x80, 0xBA, 0x26, 0x71,  // ..8...&q
                                /* 2DA0 */  0xA1, 0x30, 0xBA, 0xFD, 0xFA, 0xD4, 0xC0, 0x8F,  // .0......
                                /* 2DA8 */  0x11, 0x86, 0x33, 0x88, 0xC7, 0xEB, 0x0C, 0xD7,  // ..3.....
                                /* 2DB0 */  0x24, 0xF4, 0x95, 0xD3, 0xE3, 0x60, 0xC7, 0x24,  // $....`.$
                                /* 2DB8 */  0xE0, 0x1A, 0x63, 0x46, 0xE8, 0xC3, 0xB9, 0x8F,  // ..cF....
                                /* 2DC0 */  0xDB, 0xB8, 0x31, 0x81, 0xFB, 0x50, 0xC8, 0x4F,  // ..1..P.O
                                /* 2DC8 */  0x52, 0xC0, 0xF4, 0xFF, 0x4F, 0xE0, 0xB0, 0xA7,  // R...O...
                                /* 2DD0 */  0x01, 0x54, 0xBC, 0xD3, 0x00, 0x05, 0xF1, 0xC0,  // .T......
                                /* 2DD8 */  0x1C, 0xE8, 0x24, 0x85, 0x3E, 0x25, 0xF8, 0x34,  // ..$.>%.4
                                /* 2DE0 */  0xC0, 0x6E, 0x08, 0x98, 0x6B, 0x10, 0xE6, 0x20,  // .n..k.. 
                                /* 2DE8 */  0x05, 0xF6, 0x13, 0x83, 0x0F, 0x52, 0xE0, 0x8B,  // .....R..
                                /* 2DF0 */  0x7A, 0x74, 0x41, 0x9F, 0x9A, 0x3C, 0x30, 0x3C,  // ztA..<0<
                                /* 2DF8 */  0x81, 0x63, 0x9D, 0xA3, 0x40, 0x71, 0x3A, 0xC1,  // .c..@q:.
                                /* 2E00 */  0x9D, 0xA3, 0x60, 0x8F, 0x17, 0xD6, 0x30, 0xE1,  // ..`...0.
                                /* 2E08 */  0x1D, 0x50, 0xF8, 0xF9, 0x05, 0xF8, 0x86, 0x3A,  // .P.....:
                                /* 2E10 */  0xBF, 0x80, 0xE2, 0xFF, 0x7F, 0x7E, 0xC1, 0x59,  // .....~.Y
                                /* 2E18 */  0x38, 0xBF, 0x80, 0xEE, 0xBE, 0x8C, 0x3F, 0x46,  // 8.....?F
                                /* 2E20 */  0x81, 0x67, 0xFE, 0x98, 0xE7, 0x01, 0x8B, 0x7F,  // .g......
                                /* 2E28 */  0x63, 0x45, 0x9D, 0x00, 0x2C, 0xF0, 0x10, 0x05,  // cE..,...
                                /* 2E30 */  0xE5, 0x8E, 0x80, 0x3B, 0x3E, 0xF9, 0x08, 0xC5,  // ...;>...
                                /* 2E38 */  0xC5, 0x50, 0x48, 0xCA, 0x01, 0x03, 0x75, 0x65,  // .PH...ue
                                /* 2E40 */  0x35, 0x98, 0x41, 0x7C, 0x88, 0xF0, 0x01, 0xC8,  // 5.A|....
                                /* 2E48 */  0x07, 0x07, 0x70, 0x1C, 0x9F, 0xC0, 0x7D, 0x38,  // ..p...}8
                                /* 2E50 */  0xF0, 0xF1, 0x09, 0xF0, 0x71, 0x5E, 0x00, 0xCF,  // ....q^..
                                /* 2E58 */  0xFF, 0xFF, 0xBC, 0xC0, 0x4F, 0x34, 0x3E, 0x2F,  // ....O4>/
                                /* 2E60 */  0x00, 0xA7, 0xE3, 0x13, 0xFE, 0xBC, 0x80, 0x0F,  // ........
                                /* 2E68 */  0x7F, 0x86, 0x43, 0x9D, 0x57, 0x2C, 0x0C, 0x48,  // ..C.W,.H
                                /* 2E70 */  0x87, 0x27, 0xEC, 0x74, 0x0F, 0xFC, 0x2C, 0x5E,  // .'.t..,^
                                /* 2E78 */  0xF6, 0x3D, 0x21, 0xC3, 0xB1, 0x63, 0x1C, 0xF6,  // .=!..c..
                                /* 2E80 */  0xA9, 0xE0, 0x13, 0x14, 0x8F, 0x4E, 0xA2, 0xD0,  // .....N..
                                /* 2E88 */  0xF7, 0x56, 0x54, 0xCC, 0x43, 0x03, 0x05, 0x31,  // .VT.C..1
                                /* 2E90 */  0xA0, 0x4F, 0x50, 0x80, 0x85, 0xE3, 0x11, 0xB0,  // .OP.....
                                /* 2E98 */  0x38, 0xFB, 0x79, 0xA8, 0x3C, 0xF6, 0x50, 0x29,  // 8.y.<.P)
                                /* 2EA0 */  0x88, 0x87, 0xEA, 0x73, 0xAB, 0xAF, 0x55, 0x3E,  // ...s..U>
                                /* 2EA8 */  0xB7, 0xE2, 0xAE, 0x00, 0x70, 0xFE, 0xFF, 0x57,  // ....p..W
                                /* 2EB0 */  0x00, 0xDC, 0xB9, 0x15, 0x78, 0x1A, 0x13, 0xA0,  // ....x...
                                /* 2EB8 */  0x0D, 0x92, 0x9C, 0x35, 0x80, 0x47, 0xB4, 0xB3,  // ...5.G..
                                /* 2EC0 */  0x06, 0xE8, 0x3C, 0x9C, 0x35, 0x40, 0x37, 0x9A,  // ..<.5@7.
                                /* 2EC8 */  0x47, 0x1D, 0xB0, 0x1D, 0x05, 0xB0, 0xE7, 0x0D,  // G.......
                                /* 2ED0 */  0xCC, 0x59, 0x00, 0xA7, 0xED, 0xCA, 0x8D, 0x1A,  // .Y......
                                /* 2ED8 */  0xB2, 0xD5, 0x1E, 0x37, 0xA0, 0x5F, 0xE4, 0x70,  // ...7._.p
                                /* 2EE0 */  0x83, 0x3A, 0x33, 0x8F, 0xC1, 0x30, 0x6F, 0xF8,  // .:3..0o.
                                /* 2EE8 */  0x0C, 0xD3, 0x04, 0xD5, 0x1C, 0x39, 0x50, 0x3A,  // .....9P:
                                /* 2EF0 */  0x28, 0x94, 0xFB, 0xC8, 0x81, 0x4A, 0x7A, 0x32,  // (....Jz2
                                /* 2EF8 */  0xA0, 0x20, 0x06, 0xF4, 0x0D, 0x8F, 0xFF, 0xFF,  // . ......
                                /* 2F00 */  0x6F, 0x78, 0xC0, 0xE9, 0xCE, 0x01, 0xAC, 0xE5,  // ox......
                                /* 2F08 */  0xDC, 0x39, 0x50, 0x5B, 0xF5, 0x5C, 0x4D, 0xE1,  // .9P[.\M.
                                /* 2F10 */  0xB9, 0x3A, 0xDC, 0x9D, 0x03, 0x2D, 0xED, 0xCE,  // .:...-..
                                /* 2F18 */  0x01, 0xE1, 0x20, 0x00, 0x8E, 0x8B, 0x07, 0x60,  // .. ....`
                                /* 2F20 */  0x2E, 0xE4, 0xC5, 0x03, 0xE2, 0xFF, 0xFF, 0xE2,  // ........
                                /* 2F28 */  0x01, 0x0B, 0xDC, 0x17, 0x0F, 0x70, 0xC1, 0xBF,  // .....p..
                                /* 2F30 */  0x78, 0x80, 0xFD, 0x3E, 0x80, 0x3B, 0x39, 0xF9,  // x..>.;9.
                                /* 2F38 */  0x40, 0x00, 0xE7, 0xED, 0xE1, 0x38, 0x77, 0x27,  // @....8w'
                                /* 2F40 */  0x74, 0xD4, 0xAB, 0x1B, 0x84, 0xBB, 0x13, 0x18,  // t.......
                                /* 2F48 */  0x22, 0xDD, 0xDF, 0x50, 0x61, 0x28, 0x14, 0xE5,  // "..Pa(..
                                /* 2F50 */  0xF8, 0x80, 0x12, 0x0F, 0x47, 0x41, 0x3C, 0x74,  // ....GA<t
                                /* 2F58 */  0xDF, 0x3C, 0xF0, 0x77, 0x27, 0xFC, 0x9C, 0x1F,  // .<.w'...
                                /* 2F60 */  0x1A, 0x60, 0xDD, 0xDE, 0xE0, 0x5E, 0xDB, 0xC0,  // .`...^..
                                /* 2F68 */  0x7B, 0x49, 0x02, 0x2E, 0x03, 0xC3, 0xFC, 0xFF,  // {I......
                                /* 2F70 */  0x2F, 0x49, 0x80, 0x45, 0x13, 0x97, 0x24, 0xA0,  // /I.E..$.
                                /* 2F78 */  0x75, 0xBF, 0xE3, 0x97, 0x24, 0x70, 0x08, 0xD7,  // u...$p..
                                /* 2F80 */  0x31, 0x08, 0x16, 0x63, 0xF9, 0x92, 0x0A, 0x83,  // 1..c....
                                /* 2F88 */  0x3A, 0xF6, 0xF8, 0x40, 0x80, 0x1F, 0xE2, 0x11,  // :..@....
                                /* 2F90 */  0x1E, 0xD8, 0x31, 0xB1, 0x6B, 0xBE, 0xE1, 0xF8,  // ..1.k...
                                /* 2F98 */  0xE8, 0x3D, 0xA6, 0xE6, 0xC7, 0xA1, 0x81, 0x9C,  // .=......
                                /* 2FA0 */  0xAA, 0x27, 0x15, 0x92, 0x1D, 0x6E, 0x7C, 0xAD,  // .'...n|.
                                /* 2FA8 */  0xC5, 0x1D, 0x00, 0x8E, 0xE9, 0xC4, 0x6A, 0x47,  // ......jG
                                /* 2FB0 */  0xD4, 0x74, 0xDE, 0x3C, 0x4C, 0xE0, 0x71, 0x33,  // .t.<L.q3
                                /* 2FB8 */  0x34, 0x0E, 0x8D, 0x1D, 0x86, 0x2F, 0x04, 0xC1,  // 4..../..
                                /* 2FC0 */  0x0E, 0xE2, 0x30, 0x5E, 0x36, 0xF9, 0x84, 0xCE,  // ..0^6...
                                /* 2FC8 */  0xAF, 0x5C, 0x01, 0xFF, 0xFF, 0x8B, 0xC2, 0x0B,  // .\......
                                /* 2FD0 */  0x66, 0xD4, 0x18, 0xCD, 0x1D, 0x74, 0x10, 0xC3,  // f....t..
                                /* 2FD8 */  0x06, 0x07, 0x98, 0xCF, 0x4D, 0xCF, 0x0B, 0x86,  // ....M...
                                /* 2FE0 */  0x88, 0xC5, 0xE7, 0x1C, 0x23, 0xD4, 0xB1, 0x7B,  // ....#..{
                                /* 2FE8 */  0x44, 0xAD, 0x82, 0xC8, 0x27, 0x8A, 0x30, 0x62,  // D...'.0b
                                /* 2FF0 */  0x9F, 0xCC, 0x1B, 0x8A, 0x4F, 0x04, 0xBE, 0x10,  // ....O...
                                /* 2FF8 */  0xF8, 0xA0, 0xE2, 0x09, 0x45, 0x3E, 0x8B, 0x87,  // ....E>..
                                /* 3000 */  0x1F, 0x1F, 0x40, 0x3C, 0x18, 0x7E, 0x0E, 0xB1,  // ..@<.~..
                                /* 3008 */  0xE7, 0x4B, 0x04, 0x39, 0x9A, 0x30, 0xF7, 0xC3,  // .K.9.0..
                                /* 3010 */  0xD2, 0x04, 0x0E, 0xEB, 0xB8, 0x5E, 0x95, 0x5B,  // .....^.[
                                /* 3018 */  0x3B, 0x48, 0x68, 0x34, 0x6D, 0x21, 0x09, 0xE1,  // ;Hh4m!..
                                /* 3020 */  0xDD, 0xE1, 0xF1, 0x21, 0x4A, 0x9C, 0x48, 0x41,  // ...!J.HA
                                /* 3028 */  0x1E, 0x3B, 0xA2, 0xF4, 0x86, 0x22, 0xC0, 0x98,  // .;..."..
                                /* 3030 */  0x51, 0x82, 0xBC, 0x35, 0x07, 0x7B, 0x2E, 0x08,  // Q..5.{..
                                /* 3038 */  0x19, 0x22, 0x66, 0x85, 0xE0, 0x1A, 0x40, 0x94,  // ."f...@.
                                /* 3040 */  0x08, 0xED, 0x9F, 0x78, 0xD8, 0x42, 0x34, 0x64,  // ...x.B4d
                                /* 3048 */  0x1F, 0x41, 0x3C, 0x1A, 0x7E, 0xC9, 0xE6, 0x67,  // .A<.~..g
                                /* 3050 */  0x82, 0xF7, 0x19, 0x4F, 0xEA, 0x2D, 0xC1, 0x73,  // ...O.-.s
                                /* 3058 */  0x3D, 0xB3, 0x3A, 0x27, 0x47, 0x09, 0x3C, 0x34,  // =.:'G.<4
                                /* 3060 */  0x9F, 0x40, 0xE0, 0xB8, 0x06, 0xD4, 0xD5, 0xE0,  // .@......
                                /* 3068 */  0xC1, 0x80, 0x9D, 0x49, 0x0C, 0xC7, 0x87, 0xE8,  // ...I....
                                /* 3070 */  0xAB, 0x83, 0x27, 0x70, 0x88, 0x0C, 0xD0, 0x47,  // ..'p...G
                                /* 3078 */  0x10, 0xF8, 0xE3, 0xF1, 0x49, 0xC0, 0xF3, 0x39,  // ....I..9
                                /* 3080 */  0xE1, 0x04, 0x96, 0x3F, 0x08, 0xD4, 0xC8, 0x0C,  // ...?....
                                /* 3088 */  0xED, 0xB9, 0x9E, 0xD6, 0xB3, 0x80, 0xCF, 0x09,  // ........
                                /* 3090 */  0x87, 0xC5, 0xC4, 0x5E, 0xD1, 0xE8, 0x78, 0xC0,  // ...^..x.
                                /* 3098 */  0xFE, 0xFF, 0x27, 0x78, 0x27, 0x7D, 0x3C, 0x88,  // ..'x'}<.
                                /* 30A0 */  0xF0, 0xD6, 0xE0, 0xF9, 0x9A, 0x60, 0xDC, 0xD3,  // .....`..
                                /* 30A8 */  0x0E, 0x94, 0x31, 0x3F, 0x8B, 0x78, 0x38, 0x2C,  // ..1?.x8,
                                /* 30B0 */  0xDE, 0xD5, 0x97, 0x8A, 0x3A, 0x97, 0xA0, 0xEE,  // ....:...
                                /* 30B8 */  0xDE, 0x98, 0x03, 0xC1, 0xCB, 0x91, 0x21, 0x1E,  // ......!.
                                /* 30C0 */  0x4B, 0xD8, 0x09, 0xC6, 0x03, 0x83, 0x7F, 0x7A,  // K......z
                                /* 30C8 */  0xC1, 0x9D, 0x26, 0xE0, 0x1E, 0x22, 0xD8, 0x94,  // ..&.."..
                                /* 30D0 */  0x38, 0xCA, 0xA3, 0x83, 0x75, 0x9D, 0x80, 0x40,  // 8...u..@
                                /* 30D8 */  0x17, 0x79, 0x9C, 0x68, 0x60, 0x36, 0x93, 0x90,  // .y.h`6..
                                /* 30E0 */  0x81, 0x9F, 0x11, 0x9E, 0x51, 0x4C, 0x30, 0xE0,  // ....QL0.
                                /* 30E8 */  0x40, 0x41, 0x75, 0x20, 0x00, 0xC7, 0x1D, 0xC8,  // @Au ....
                                /* 30F0 */  0x03, 0x05, 0xD3, 0x9C, 0x18, 0x48, 0xB0, 0x83,  // .....H..
                                /* 30F8 */  0x62, 0x13, 0xF5, 0x48, 0xC1, 0x78, 0x74, 0xC2,  // b..H.xt.
                                /* 3100 */  0x8D, 0xCF, 0x07, 0xA1, 0xA3, 0xF1, 0x7D, 0xC4,  // ......}.
                                /* 3108 */  0xF7, 0x07, 0x8F, 0x8B, 0x1D, 0x11, 0xD8, 0xFF,  // ........
                                /* 3110 */  0x7F, 0xA8, 0x60, 0x01, 0xF4, 0x50, 0xE1, 0xCB,  // ..`..P..
                                /* 3118 */  0x1B, 0x2A, 0x68, 0xC6, 0x84, 0x9F, 0xA8, 0x8F,  // .*h.....
                                /* 3120 */  0x52, 0xE0, 0x1B, 0xA9, 0x9D, 0x1C, 0x11, 0xD0,  // R.......
                                /* 3128 */  0xB8, 0x31, 0x43, 0x9E, 0xC4, 0x03, 0x0C, 0x3F,  // .1C....?
                                /* 3130 */  0x22, 0x80, 0x0B, 0xD4, 0x47, 0x0B, 0x60, 0x73,  // "...G.`s
                                /* 3138 */  0xBB, 0xF3, 0x9C, 0x7C, 0xB4, 0xC0, 0x8C, 0x14,  // ...|....
                                /* 3140 */  0x3C, 0x27, 0x9C, 0xC7, 0x9B, 0x57, 0x7C, 0x3E,  // <'...W|>
                                /* 3148 */  0x52, 0xDC, 0x81, 0xC6, 0xC7, 0x21, 0x36, 0xAB,  // R....!6.
                                /* 3150 */  0xB0, 0x0F, 0x27, 0x51, 0x6B, 0xBD, 0x23, 0x11,  // ..'Qk.#.
                                /* 3158 */  0x98, 0xC7, 0x12, 0x76, 0x52, 0xF4, 0x60, 0xC1,  // ...vR.`.
                                /* 3160 */  0x63, 0x61, 0xB0, 0x88, 0xFF, 0xFF, 0x60, 0x61,  // ca....`a
                                /* 3168 */  0x5E, 0xD4, 0xC1, 0x33, 0x2A, 0xEC, 0x2C, 0xDE,  // ^..3*.,.
                                /* 3170 */  0x12, 0xCE, 0x8A, 0x9F, 0x2F, 0xD8, 0x70, 0xC1,  // ..../.p.
                                /* 3178 */  0x17, 0xF8, 0x9C, 0x00, 0xE5, 0x14, 0xE0, 0xB9,  // ........
                                /* 3180 */  0xE2, 0xCE, 0x17, 0xE0, 0x3A, 0x90, 0xF9, 0x7C,  // ....:..|
                                /* 3188 */  0x01, 0x3C, 0xCE, 0x09, 0x6C, 0x4A, 0x98, 0x63,  // .<..lJ.c
                                /* 3190 */  0x02, 0x38, 0xEF, 0xF5, 0x1E, 0x28, 0x6E, 0x78,  // .8...(nx
                                /* 3198 */  0x06, 0x0E, 0xE9, 0x43, 0x02, 0xF6, 0x80, 0x01,  // ...C....
                                /* 31A0 */  0xAE, 0x4B, 0xB6, 0x0F, 0x18, 0x60, 0xFD, 0xFF,  // .K...`..
                                /* 31A8 */  0x8F, 0x14, 0xC6, 0x98, 0xD8, 0x4C, 0xF1, 0x43,  // .....L.C
                                /* 31B0 */  0x05, 0x1E, 0xA3, 0x78, 0x98, 0x3B, 0x54, 0x30,  // ...x.;T0
                                /* 31B8 */  0x0F, 0xC8, 0x43, 0x05, 0x26, 0x63, 0xF2, 0x50,  // ..C.&c.P
                                /* 31C0 */  0x81, 0x41, 0xF0, 0xA1, 0xA2, 0x47, 0xE3, 0x6B,  // .A...G.k
                                /* 31C8 */  0xE0, 0xAB, 0x20, 0x1F, 0x2B, 0x36, 0xE2, 0x58,  // .. .+6.X
                                /* 31D0 */  0x41, 0x75, 0xCA, 0xF4, 0x39, 0x0A, 0x78, 0x0C,  // Au..9.x.
                                /* 31D8 */  0x0A, 0x33, 0x58, 0xFC, 0xFF, 0x7F, 0xB0, 0x60,  // .3X....`
                                /* 31E0 */  0x8C, 0x7D, 0x4C, 0x80, 0x72, 0xEC, 0x30, 0xC4,  // .}L.r.0.
                                /* 31E8 */  0xD9, 0xBC, 0x53, 0xB2, 0x0B, 0x11, 0x1B, 0x2B,  // ..S....+
                                /* 31F0 */  0xB8, 0x54, 0x1C, 0xC1, 0x80, 0xD0, 0x9C, 0x30,  // .T.....0
                                /* 31F8 */  0x17, 0x22, 0xCC, 0x89, 0x08, 0x18, 0x0C, 0xC7,  // ."......
                                /* 3200 */  0xE7, 0xC6, 0x73, 0x85, 0x43, 0x30, 0xE6, 0x60,  // ..s.C0.`
                                /* 3208 */  0x41, 0x35, 0x54, 0x0F, 0x16, 0xFE, 0xE1, 0xF4,  // A5T.....
                                /* 3210 */  0x60, 0xC1, 0x32, 0x28, 0x43, 0xBC, 0x6F, 0x1E,  // `.2(C.o.
                                /* 3218 */  0x2E, 0x58, 0xFF, 0xFF, 0xC3, 0x85, 0x15, 0xFD,  // .X......
                                /* 3220 */  0xA4, 0x00, 0xE5, 0xE4, 0xE9, 0x0B, 0x2A, 0xBB,  // ......*.
                                /* 3228 */  0x28, 0xB1, 0xD1, 0x82, 0x6F, 0xA4, 0x1E, 0x2D,  // (...o..-
                                /* 3230 */  0xF0, 0x00, 0xF3, 0x84, 0xA2, 0x3F, 0xF9, 0xBD,  // .....?..
                                /* 3238 */  0x8A, 0x19, 0xEB, 0xD9, 0xD4, 0x83, 0xF5, 0xF1,  // ........
                                /* 3240 */  0xC6, 0x30, 0x91, 0x1F, 0x8B, 0xC0, 0x29, 0xF8,  // .0....).
                                /* 3248 */  0x7C, 0x0D, 0x0A, 0x94, 0xE8, 0x0F, 0x03, 0x3E,  // |......>
                                /* 3250 */  0x81, 0x84, 0x88, 0xE6, 0xAB, 0xAE, 0x41, 0x02,  // ......A.
                                /* 3258 */  0xF9, 0x84, 0x6D, 0x54, 0xDF, 0x08, 0xEC, 0x72,  // ..mT...r
                                /* 3260 */  0x2A, 0xC2, 0x7C, 0xD6, 0x8F, 0x76, 0x68, 0xD1,  // *.|..vh.
                                /* 3268 */  0x4F, 0x26, 0x44, 0x02, 0x1F, 0xC2, 0xF0, 0x03,  // O&D.....
                                /* 3270 */  0xE1, 0xA8, 0x8F, 0xDC, 0x6C, 0x20, 0x6F, 0xDD,  // ....l o.
                                /* 3278 */  0xC6, 0x3F, 0x2E, 0x9F, 0x90, 0x8D, 0x70, 0x5C,  // .?....p\
                                /* 3280 */  0x0F, 0xC6, 0xCF, 0x08, 0xBE, 0x87, 0x61, 0x4E,  // ......aN
                                /* 3288 */  0xDE, 0x38, 0x6D, 0xEA, 0x40, 0x98, 0xF4, 0x97,  // .8m.@...
                                /* 3290 */  0xA8, 0x64, 0xBD, 0x07, 0x28, 0x8C, 0x0F, 0xD3,  // .d..(...
                                /* 3298 */  0x60, 0xFB, 0xFF, 0x1F, 0xA6, 0x81, 0xFD, 0x09,  // `.......
                                /* 32A0 */  0xD7, 0x87, 0x05, 0x70, 0x1C, 0x07, 0x60, 0xDD,  // ...p..`.
                                /* 32A8 */  0xDF, 0xD9, 0x31, 0x20, 0x54, 0xF0, 0xC7, 0x85,  // ..1 T...
                                /* 32B0 */  0xD8, 0x2F, 0x0D, 0xC6, 0x8F, 0xF0, 0x18, 0x0D,  // ./......
                                /* 32B8 */  0xFF, 0x06, 0x79, 0x42, 0x51, 0xDF, 0x02, 0x02,  // ..yBQ...
                                /* 32C0 */  0x3D, 0x3F, 0x47, 0xF0, 0xF9, 0x23, 0xD2, 0x49,  // =?G..#.I
                                /* 32C8 */  0xBD, 0x46, 0x46, 0x7A, 0x91, 0xF6, 0x10, 0x8E,  // .FFz....
                                /* 32D0 */  0xEB, 0xA9, 0x37, 0x4A, 0x88, 0xD7, 0x86, 0x08,  // ..7J....
                                /* 32D8 */  0x81, 0xA2, 0x04, 0x0D, 0xF2, 0x1A, 0x1A, 0x21,  // .......!
                                /* 32E0 */  0x48, 0xB8, 0xB8, 0x41, 0xCE, 0xCF, 0x78, 0xA7,  // H..A..x.
                                /* 32E8 */  0xF6, 0x18, 0xCD, 0xC2, 0x9D, 0x06, 0x74, 0xE2,  // ......t.
                                /* 32F0 */  0xF0, 0x31, 0x1A, 0xB0, 0xF6, 0xFF, 0x3F, 0x46,  // .1....?F
                                /* 32F8 */  0x03, 0xD3, 0x03, 0x07, 0xEE, 0x20, 0x02, 0xB6,  // ..... ..
                                /* 3300 */  0xA3, 0x02, 0xEE, 0x08, 0x02, 0x4C, 0xB2, 0x7F,  // .....L..
                                /* 3308 */  0x61, 0x75, 0x66, 0x76, 0xD2, 0xB5, 0xCA, 0xC6,  // aufv....
                                /* 3310 */  0x5A, 0x4D, 0xA0, 0x73, 0x87, 0x75, 0x00, 0x69,  // ZM.s.u.i
                                /* 3318 */  0x3A, 0xFC, 0x84, 0xF2, 0x76, 0xEF, 0x8B, 0x8A,  // :...v...
                                /* 3320 */  0x91, 0x62, 0x9C, 0xC6, 0x2B, 0x82, 0xAF, 0xA9,  // .b..+...
                                /* 3328 */  0x3E, 0x49, 0x38, 0xF5, 0x71, 0x41, 0x07, 0x6D,  // >I8.qA.m
                                /* 3330 */  0x8F, 0xDD, 0x79, 0x49, 0x94, 0x79, 0x4C, 0x74,  // ..yI.yLt
                                /* 3338 */  0x08, 0x4E, 0x79, 0xDE, 0xA6, 0x20, 0x06, 0x74,  // .Ny.. .t
                                /* 3340 */  0x84, 0xE3, 0x34, 0xFA, 0xB0, 0xE5, 0x53, 0x38,  // ..4...S8
                                /* 3348 */  0x66, 0x58, 0xAF, 0x0C, 0x6C, 0x8E, 0xBE, 0x0C,  // fX..l...
                                /* 3350 */  0xF0, 0x1B, 0x8A, 0x8F, 0x07, 0x06, 0xB6, 0x9A,  // ........
                                /* 3358 */  0x7B, 0x10, 0x0A, 0xCC, 0x47, 0x81, 0x43, 0xF6,  // {...G.C.
                                /* 3360 */  0xB1, 0x19, 0x7C, 0xFA, 0x0E, 0x04, 0x90, 0xFE,  // ..|.....
                                /* 3368 */  0xFF, 0x07, 0x02, 0x2C, 0x90, 0xE7, 0xEF, 0x33,  // ...,...3
                                /* 3370 */  0xCE, 0x33, 0x00, 0x9B, 0xC2, 0x63, 0x8E, 0xD1,  // .3...c..
                                /* 3378 */  0x8C, 0xCE, 0xAF, 0x4D, 0x9E, 0x29, 0x0F, 0x3B,  // ...M.).;
                                /* 3380 */  0x53, 0x0A, 0xE2, 0x99, 0x3A, 0xC8, 0x3D, 0x1C,  // S...:.=.
                                /* 3388 */  0xCA, 0xE8, 0xB1, 0xD7, 0x12, 0x76, 0xDB, 0x80,  // .....v..
                                /* 3390 */  0x33, 0xE6, 0x88, 0x8F, 0x05, 0x9E, 0x86, 0xE1,  // 3.......
                                /* 3398 */  0x3C, 0x58, 0x0E, 0xE7, 0xC1, 0xF2, 0xB1, 0x78,  // <X.....x
                                /* 33A0 */  0xB2, 0xE0, 0xBA, 0x32, 0xE2, 0x26, 0x0B, 0x46,  // ...2.&.F
                                /* 33A8 */  0x78, 0x4C, 0xB0, 0x41, 0xD1, 0xF1, 0x78, 0x58,  // xL.A..xX
                                /* 33B0 */  0xFC, 0x6C, 0xE0, 0x0B, 0x0F, 0xC3, 0x7E, 0x72,  // .l....~r
                                /* 33B8 */  0xB0, 0xE8, 0x3B, 0x02, 0xB9, 0xED, 0x63, 0x60,  // ..;...c`
                                /* 33C0 */  0x3D, 0x50, 0x0E, 0x6B, 0xB4, 0xB0, 0x2F, 0x39,  // =P.k../9
                                /* 33C8 */  0xEF, 0x1C, 0x3E, 0xB0, 0xF8, 0x0A, 0xC6, 0x60,  // ..>....`
                                /* 33D0 */  0x3D, 0x58, 0x0F, 0xE8, 0x8D, 0x07, 0x2C, 0x77,  // =X....,w
                                /* 33D8 */  0x0A, 0x76, 0x72, 0xF7, 0xBD, 0xC2, 0x67, 0x35,  // .vr...g5
                                /* 33E0 */  0x5F, 0xD6, 0x7C, 0x11, 0xC0, 0xFD, 0x30, 0x98,  // _.|...0.
                                /* 33E8 */  0xF8, 0x4B, 0x06, 0x3A, 0xDA, 0xA2, 0x74, 0xC9,  // .K.:..t.
                                /* 33F0 */  0xE0, 0xB8, 0x2F, 0x19, 0xD8, 0xFF, 0xFF, 0xBD,  // ../.....
                                /* 33F8 */  0x00, 0x17, 0xE4, 0x92, 0x41, 0x21, 0x1C, 0x81,  // ....A!..
                                /* 3400 */  0x42, 0x01, 0x20, 0x74, 0x56, 0xE0, 0x92, 0xE1,  // B. tV...
                                /* 3408 */  0x28, 0x88, 0x47, 0xEC, 0x18, 0x67, 0x05, 0xF4,  // (.G..g..
                                /* 3410 */  0xC5, 0xC5, 0x97, 0x0C, 0xCC, 0x51, 0x01, 0xE6,  // .....Q..
                                /* 3418 */  0x29, 0x83, 0x1D, 0x15, 0x60, 0x5F, 0x33, 0xC0,  // )...`_3.
                                /* 3420 */  0x77, 0x9C, 0x00, 0xF7, 0xA0, 0xC0, 0x71, 0x9C,  // w.....q.
                                /* 3428 */  0x00, 0x3C, 0x9D, 0x48, 0x7C, 0x9C, 0x00, 0xDF,  // .<.H|...
                                /* 3430 */  0xFF, 0xFF, 0xFE, 0x0A, 0x96, 0xE3, 0x04, 0x58,  // .......X
                                /* 3438 */  0xE4, 0xFD, 0xB8, 0x74, 0x9C, 0xE0, 0x97, 0x70,  // ...t...p
                                /* 3440 */  0x4B, 0x5E, 0x9D, 0xAE, 0x40, 0x78, 0xEC, 0x93,  // K^..@x..
                                /* 3448 */  0xF3, 0x44, 0xC2, 0x9C, 0xEC, 0x2B, 0x9C, 0x67,  // .D...+.g
                                /* 3450 */  0x75, 0xC8, 0x46, 0xEA, 0x1D, 0x87, 0x0C, 0xFC,  // u.F.....
                                /* 3458 */  0x19, 0xD1, 0x10, 0x2F, 0x46, 0x4C, 0xD4, 0x00,  // .../FL..
                                /* 3460 */  0x74, 0xA8, 0xE0, 0x72, 0x60, 0x24, 0x06, 0x42,  // t..r`$.B
                                /* 3468 */  0x87, 0x0A, 0x1E, 0x7F, 0xAD, 0x02, 0x33, 0x88,  // ......3.
                                /* 3470 */  0xEF, 0xF8, 0xBE, 0xB4, 0xFB, 0x72, 0x89, 0x3B,  // .....r.;
                                /* 3478 */  0x12, 0x78, 0x3C, 0xC7, 0x75, 0x14, 0x8F, 0x57,  // .x<.u..W
                                /* 3480 */  0x1E, 0xAE, 0xA7, 0x03, 0xA6, 0xF1, 0x3E, 0xD9,  // ......>.
                                /* 3488 */  0x80, 0xF9, 0x2E, 0x0A, 0xCE, 0x03, 0x86, 0xC7,  // ........
                                /* 3490 */  0x87, 0x3B, 0x83, 0xF8, 0x7A, 0xE6, 0x61, 0x9D,  // .;..z.a.
                                /* 3498 */  0x92, 0x07, 0x05, 0xF6, 0x91, 0x7B, 0x50, 0x70,  // .....{Pp
                                /* 34A0 */  0xFF, 0xFF, 0x83, 0x82, 0x13, 0x6D, 0x50, 0xE8,  // .....mP.
                                /* 34A8 */  0x01, 0xF8, 0xD6, 0xCE, 0x4E, 0x00, 0xC0, 0xF2,  // ....N...
                                /* 34B0 */  0x88, 0xE1, 0xD1, 0x01, 0x8B, 0x8B, 0xBA, 0x47,  // .......G
                                /* 34B8 */  0x07, 0x2C, 0xA1, 0x3C, 0x3A, 0xF0, 0x1D, 0x5D,  // .,.<:..]
                                /* 34C0 */  0x80, 0xC7, 0x55, 0xDC, 0x47, 0x17, 0x70, 0xC1,  // ..U.G.p.
                                /* 34C8 */  0xF2, 0x91, 0xFA, 0xFF, 0x7F, 0x74, 0x01, 0x07,  // .....t..
                                /* 34D0 */  0x88, 0x0F, 0x56, 0xE0, 0xBC, 0x0E, 0x80, 0xE7,  // ..V.....
                                /* 34D8 */  0xF3, 0x62, 0x31, 0xA7, 0x2B, 0xD4, 0xF9, 0xC5,  // .b1.+...
                                /* 34E0 */  0x02, 0x4F, 0x57, 0x50, 0xCE, 0x2F, 0xE0, 0x92,  // .OWP./..
                                /* 34E8 */  0x70, 0xC6, 0x42, 0xDD, 0xD0, 0x7D, 0xBC, 0x83,  // p.B..}..
                                /* 34F0 */  0x7F, 0x20, 0xC1, 0x9F, 0xB4, 0xD9, 0xCD, 0xDF,  // . ......
                                /* 34F8 */  0xC7, 0x06, 0x98, 0x67, 0x2C, 0xF0, 0x1C, 0x1B,  // ...g,...
                                /* 3500 */  0xE0, 0x8F, 0xF4, 0xE1, 0xD9, 0x40, 0x8F, 0x0D,  // .....@..
                                /* 3508 */  0xC0, 0xF9, 0xFF, 0x7F, 0x6C, 0xC0, 0xDD, 0x70,  // ....l..p
                                /* 3510 */  0x7D, 0x6C, 0x00, 0x4E, 0x07, 0x28, 0xFC, 0xB1,  // }l.N.(..
                                /* 3518 */  0x01, 0x5C, 0xE2, 0x4E, 0x51, 0xA8, 0x53, 0x92,  // .\.NQ.S.
                                /* 3520 */  0x05, 0x9F, 0xA2, 0xA0, 0x5C, 0xA5, 0x7D, 0xD1,  // ....\.}.
                                /* 3528 */  0xF5, 0xAD, 0x01, 0xFE, 0x21, 0x0A, 0xD8, 0xCC,  // ....!...
                                /* 3530 */  0x06, 0x3C, 0x87, 0x28, 0xC0, 0xCE, 0xFF, 0xFF,  // .<.(....
                                /* 3538 */  0x10, 0x05, 0xEC, 0x4F, 0x00, 0xC0, 0xF2, 0x10,  // ...O....
                                /* 3540 */  0x05, 0x6C, 0x46, 0x07, 0x2C, 0x0F, 0x51, 0xC0,  // .lF.,.Q.
                                /* 3548 */  0xF3, 0xFF, 0x7F, 0x7C, 0x01, 0x0E, 0x87, 0x0F,  // ...|....
                                /* 3550 */  0x1F, 0xA2, 0x80, 0xE3, 0x75, 0x00, 0x8F, 0xF4,  // ....u...
                                /* 3558 */  0xF6, 0x02, 0x8F, 0xA0, 0x94, 0x43, 0x14, 0xEA,  // .....C..
                                /* 3560 */  0x7C, 0x62, 0x79, 0x87, 0x28, 0x28, 0x57, 0x04,  // |by.((W.
                                /* 3568 */  0xF0, 0x9C, 0xA1, 0x00, 0xB7, 0xFF, 0xFF, 0x53,  // .......S
                                /* 3570 */  0x03, 0xF0, 0x3A, 0xDA, 0xFB, 0x0C, 0x05, 0x1C,  // ..:.....
                                /* 3578 */  0x4F, 0x08, 0x60, 0x79, 0x32, 0xB0, 0xF0, 0xA7,  // O.`y2...
                                /* 3580 */  0x06, 0xB4, 0x20, 0x20, 0x9D, 0xA1, 0xF0, 0xC3,  // ..  ....
                                /* 3588 */  0xB1, 0xE6, 0xC3, 0x81, 0xEE, 0x06, 0x87, 0x16,  // ........
                                /* 3590 */  0xC8, 0xE7, 0x14, 0x78, 0xA1, 0x4F, 0x0D, 0xA8,  // ...x.O..
                                /* 3598 */  0xB8, 0x14, 0x0A, 0x7B, 0xF6, 0x46, 0xC5, 0x83,  // ...{.F..
                                /* 35A0 */  0xA3, 0x20, 0x1E, 0xBB, 0xC3, 0x9D, 0x1A, 0xD0,  // . ......
                                /* 35A8 */  0xD2, 0x06, 0x4A, 0x87, 0x82, 0x99, 0x21, 0x7E,  // ..J...!~
                                /* 35B0 */  0x36, 0x18, 0xBC, 0xC7, 0x5A, 0x60, 0xF7, 0xFF,  // 6...Z`..
                                /* 35B8 */  0x3F, 0xC4, 0xC0, 0x3D, 0x71, 0xC1, 0x19, 0x1E,  // ?..=q...
                                /* 35C0 */  0xF6, 0x8A, 0x06, 0x63, 0x7A, 0xB0, 0x4E, 0x53,  // ...cz.NS
                                /* 35C8 */  0xC0, 0xF8, 0xB8, 0x01, 0xBC, 0x3D, 0x9C, 0x79,  // .....=.y
                                /* 35D0 */  0x80, 0xE6, 0x91, 0x00, 0x7B, 0xE5, 0xC1, 0x9D,  // ....{...
                                /* 35D8 */  0x3A, 0x7C, 0xDC, 0xC0, 0x46, 0x3B, 0x01, 0xA2,  // :|..F;..
                                /* 35E0 */  0x8E, 0x00, 0x8E, 0x7C, 0x02, 0x44, 0xFD, 0xFF,  // ...|.D..
                                /* 35E8 */  0x8F, 0x1B, 0x1C, 0x27, 0xC8, 0x39, 0x74, 0x7D,  // ...'.9t}
                                /* 35F0 */  0xD9, 0x80, 0x18, 0xED, 0xFC, 0x87, 0x0A, 0x05,  // ........
                                /* 35F8 */  0xA3, 0x48, 0xE7, 0x3F, 0x54, 0x08, 0x38, 0x0A,  // .H.?T.8.
                                /* 3600 */  0xE2, 0xE3, 0x8A, 0x8F, 0xF7, 0x3E, 0x3E, 0xE0,  // .....>>.
                                /* 3608 */  0x06, 0xED, 0xF3, 0x1F, 0x76, 0x2E, 0xFC, 0x40,  // ....v..@
                                /* 3610 */  0x0E, 0x58, 0x18, 0x1C, 0x9C, 0x83, 0x00, 0x76,  // .X.....v
                                /* 3618 */  0x70, 0xC0, 0xEC, 0x9C, 0x01, 0xCE, 0x83, 0x22,  // p......"
                                /* 3620 */  0x70, 0xF9, 0xFF, 0x9F, 0xFD, 0x80, 0x43, 0xA8,  // p.....C.
                                /* 3628 */  0x41, 0xA1, 0x25, 0x1D, 0x14, 0x11, 0xC3, 0x07,  // A.%.....
                                /* 3630 */  0x66, 0x07, 0x3F, 0x70, 0x0E, 0x0D, 0xD6, 0x29,  // f.?p...)
                                /* 3638 */  0xD1, 0x43, 0x03, 0x66, 0xA7, 0x60, 0x9F, 0x6F,  // .C.f.`.o
                                /* 3640 */  0x80, 0xF7, 0x01, 0xC9, 0xE7, 0x1B, 0xF8, 0xFF,  // ........
                                /* 3648 */  0xFF, 0xF3, 0x0D, 0x0E, 0xDC, 0xE7, 0x1B, 0x70,  // .......p
                                /* 3650 */  0xC9, 0x3D, 0xDF, 0x80, 0xF6, 0x2E, 0xC0, 0x6F,  // .=.....o
                                /* 3658 */  0x37, 0x70, 0x25, 0x9D, 0xCD, 0x50, 0x07, 0x00,  // 7p%..P..
                                /* 3660 */  0x4B, 0x3D, 0x20, 0x42, 0x39, 0xDD, 0xC0, 0x97,  // K= B9...
                                /* 3668 */  0x74, 0x32, 0x43, 0x89, 0xA1, 0x90, 0x94, 0x93,  // t2C.....
                                /* 3670 */  0x19, 0xEA, 0x88, 0xE8, 0x43, 0x22, 0x3F, 0x6D,  // ....C"?m
                                /* 3678 */  0xF8, 0x74, 0x03, 0xBC, 0x8E, 0x89, 0xC0, 0xE3,  // .t......
                                /* 3680 */  0xE4, 0x00, 0xBC, 0xFE, 0xFF, 0x27, 0x07, 0xF0,  // .....'..
                                /* 3688 */  0x99, 0x38, 0x39, 0x00, 0xAD, 0x63, 0x22, 0xFE,  // .89..c".
                                /* 3690 */  0xE4, 0x00, 0x8E, 0xA0, 0xE7, 0x76, 0x74, 0xF8,  // .....vt.
                                /* 3698 */  0x63, 0x16, 0x94, 0x63, 0x9D, 0xE7, 0xE5, 0x01,  // c..c....
                                /* 36A0 */  0x78, 0x10, 0x91, 0x5E, 0x12, 0x0C, 0x73, 0xE8,  // x..^..s.
                                /* 36A8 */  0x1E, 0x8E, 0x81, 0xE2, 0x04, 0x39, 0xBD, 0x04,  // .....9..
                                /* 36B0 */  0x03, 0x1E, 0xB4, 0x50, 0x67, 0x2D, 0x07, 0x3B,  // ...Pg-.;
                                /* 36B8 */  0x68, 0xA1, 0xA2, 0xC0, 0x51, 0x10, 0x1F, 0xB4,  // h...Q...
                                /* 36C0 */  0x7C, 0x6E, 0xB6, 0x91, 0x43, 0x22, 0xFA, 0xEC,  // |n..C"..
                                /* 36C8 */  0x80, 0x9D, 0x0D, 0x0C, 0x94, 0x93, 0xC1, 0x13,  // ........
                                /* 36D0 */  0xC4, 0xF0, 0x51, 0x0B, 0xDC, 0x47, 0x02, 0x9F,  // ..Q..G..
                                /* 36D8 */  0x1E, 0xC0, 0x31, 0x6E, 0x8F, 0x0E, 0xCE, 0x99,  // ..1n....
                                /* 36E0 */  0xC0, 0xFF, 0xFF, 0x93, 0x16, 0x66, 0x74, 0xC0,  // .....ft.
                                /* 36E8 */  0xF0, 0x04, 0xE0, 0xD1, 0x81, 0x2B, 0xC6, 0xE8,  // .....+..
                                /* 36F0 */  0xD0, 0x47, 0x2D, 0xFC, 0x98, 0xC0, 0x7D, 0x5A,  // .G-...}Z
                                /* 36F8 */  0xF1, 0x98, 0xC0, 0x15, 0x6B, 0x4C, 0x68, 0x78,  // ....kLhx
                                /* 3700 */  0x9F, 0xB4, 0xD8, 0xF0, 0x81, 0xE1, 0xC1, 0x84,  // ........
                                /* 3708 */  0x8F, 0x0D, 0xEC, 0x47, 0x2D, 0x8F, 0x0D, 0xC6,  // ...G-...
                                /* 3710 */  0xFF, 0x7F, 0x6C, 0xC0, 0xE7, 0xB0, 0xE5, 0xB1,  // ..l.....
                                /* 3718 */  0x81, 0xEB, 0x68, 0x0A, 0xBC, 0x55, 0x1C, 0x4D,  // ..h..U.M
                                /* 3720 */  0x81, 0xE6, 0x81, 0x06, 0x16, 0xA0, 0x6F, 0x03,  // ......o.
                                /* 3728 */  0xB8, 0x17, 0x0E, 0x13, 0x77, 0xB0, 0x46, 0x0B,  // ....w.F.
                                /* 3730 */  0x3E, 0x6D, 0x41, 0x39, 0xE4, 0x80, 0x47, 0xD4,  // >mA9..G.
                                /* 3738 */  0x79, 0x0B, 0x25, 0x87, 0x42, 0x07, 0x2E, 0x1F,  // y.%.B...
                                /* 3740 */  0x72, 0x78, 0x7C, 0x30, 0x0A, 0xE2, 0xFF, 0xFF,  // rx|0....
                                /* 3748 */  0x91, 0xC3, 0x87, 0x1C, 0x70, 0xA2, 0x79, 0x34,  // ....p.y4
                                /* 3750 */  0xF8, 0xE3, 0x03, 0xBC, 0x13, 0x17, 0x78, 0x8E,  // ......x.
                                /* 3758 */  0x0F, 0x80, 0xA3, 0x61, 0xFA, 0x98, 0x0F, 0x1C,  // ...a....
                                /* 3760 */  0x8F, 0x0F, 0xE0, 0x3A, 0x72, 0xE1, 0x8E, 0x70,  // ...:r..p
                                /* 3768 */  0x7E, 0x91, 0xF8, 0xC0, 0xC5, 0xA7, 0xFB, 0x00,  // ~.......
                                /* 3770 */  0xC1, 0x46, 0x13, 0x24, 0xC2, 0x59, 0x3C, 0xFB,  // .F.$.Y<.
                                /* 3778 */  0xE1, 0xFF, 0xFF, 0x07, 0x3C, 0x1E, 0xF4, 0xC0,  // ....<...
                                /* 3780 */  0x85, 0x8A, 0x08, 0xA3, 0x43, 0x97, 0x0F, 0x0F,  // ....C...
                                /* 3788 */  0xFC, 0xAC, 0x6C, 0x30, 0x83, 0xF8, 0xC0, 0xC5,  // ..l0....
                                /* 3790 */  0xCF, 0x7E, 0xB8, 0xD1, 0xF8, 0xF0, 0x80, 0x1B,  // .~......
                                /* 3798 */  0x0D, 0x9B, 0x0C, 0x3F, 0x29, 0x03, 0x16, 0xC2,  // ...?)...
                                /* 37A0 */  0x8D, 0x0E, 0x7D, 0xE0, 0x82, 0x31, 0x3B, 0x70,  // ..}..1;p
                                /* 37A8 */  0x9C, 0x95, 0x01, 0xA3, 0xFF, 0xFF, 0xB3, 0x37,  // .......7
                                /* 37B0 */  0x70, 0x38, 0x72, 0xB1, 0x03, 0x00, 0x30, 0x3C,  // p8r...0<
                                /* 37B8 */  0x2D, 0x83, 0x73, 0x70, 0xB0, 0xCE, 0x5C, 0x1E,  // -.sp..\.
                                /* 37C0 */  0x1C, 0x30, 0x3C, 0x2F, 0x03, 0x8E, 0xFE, 0xFF,  // .0</....
                                /* 37C8 */  0xC7, 0x1C, 0x7E, 0x8C, 0xF0, 0x79, 0x19, 0xB8,  // ..~..y..
                                /* 37D0 */  0xDD, 0x05, 0x18, 0xC8, 0xC3, 0x00, 0x3F, 0xA6,  // ......?.
                                /* 37D8 */  0xC2, 0x95, 0x75, 0x5E, 0x46, 0xCB, 0x7D, 0x7E,  // ..u^F.}~
                                /* 37E0 */  0xE8, 0xC0, 0xC5, 0x0F, 0x39, 0xE0, 0x91, 0x75,  // ....9..u
                                /* 37E8 */  0xE0, 0x42, 0x09, 0xA2, 0xD0, 0x89, 0xCB, 0x87,  // .B......
                                /* 37F0 */  0x1C, 0x4E, 0x65, 0x30, 0x53, 0xF8, 0xC4, 0xE1,  // .Ne0S...
                                /* 37F8 */  0x73, 0x0B, 0x9C, 0x03, 0x17, 0xF6, 0xEC, 0x00,  // s.......
                                /* 3800 */  0xF6, 0x13, 0x33, 0xE0, 0xE6, 0xFF, 0x7F, 0x76,  // ..3....v
                                /* 3808 */  0x00, 0xA7, 0x8D, 0x13, 0x33, 0xD0, 0x3B, 0x3B,  // ....3.;;
                                /* 3810 */  0x80, 0x4B, 0xC8, 0xE2, 0x74, 0x76, 0xE0, 0x1C,  // .K..tv..
                                /* 3818 */  0x96, 0xF8, 0x48, 0xD0, 0xE9, 0x0F, 0xEF, 0x13,  // ..H.....
                                /* 3820 */  0x49, 0x18, 0x67, 0xF3, 0x08, 0x66, 0x88, 0xE7,  // I.g..f..
                                /* 3828 */  0x78, 0x76, 0x6C, 0x47, 0xC0, 0x48, 0x0A, 0x84,  // xvlG.H..
                                /* 3830 */  0x8E, 0xED, 0x88, 0x73, 0x03, 0x05, 0xF1, 0x01,  // ...s....
                                /* 3838 */  0xC5, 0x27, 0x5A, 0x38, 0xF3, 0x39, 0x66, 0x8F,  // .'Z8.9f.
                                /* 3840 */  0xE3, 0xD9, 0x13, 0xEE, 0x69, 0x0F, 0x38, 0x45,  // ....i.8E
                                /* 3848 */  0x39, 0x5A, 0xA0, 0x81, 0x8D, 0x1A, 0x31, 0xE0,  // 9Z....1.
                                /* 3850 */  0x31, 0x1D, 0x05, 0x3F, 0x51, 0x80, 0xEF, 0xFF,  // 1..?Q...
                                /* 3858 */  0x7F, 0xB0, 0x02, 0x4E, 0xDA, 0x6F, 0x02, 0x1A,  // ...N.o..
                                /* 3860 */  0xF6, 0x73, 0xAC, 0x07, 0x05, 0xF6, 0x83, 0x15,  // .s......
                                /* 3868 */  0x38, 0x4F, 0x1D, 0xC0, 0xE3, 0xD4, 0xE2, 0x53,  // 8O.....S
                                /* 3870 */  0x07, 0xB8, 0x74, 0x9C, 0x3A, 0x40, 0x27, 0xF6,  // ..t.:@'.
                                /* 3878 */  0xD8, 0x08, 0xDA, 0x33, 0xC6, 0x7B, 0xC0, 0x23,  // ...3.{.#
                                /* 3880 */  0x87, 0x51, 0x0F, 0x23, 0x62, 0x8C, 0x17, 0x7F,  // .Q.#b...
                                /* 3888 */  0x5F, 0x33, 0xF8, 0x81, 0xC3, 0x32, 0x0E, 0x1D,  // _3...2..
                                /* 3890 */  0xA8, 0x23, 0x8E, 0xCF, 0x1A, 0x3E, 0xF5, 0xE3,  // .#...>..
                                /* 3898 */  0x47, 0x71, 0xF6, 0x47, 0x12, 0xE1, 0x00, 0x0E,  // Gq.G....
                                /* 38A0 */  0xE1, 0xFF, 0xFF, 0xE0, 0x81, 0xC1, 0x3A, 0x02,  // ......:.
                                /* 38A8 */  0x5F, 0x25, 0x3D, 0xA4, 0x04, 0x83, 0x1F, 0x39,  // _%=....9
                                /* 38B0 */  0xE8, 0x89, 0xC0, 0x91, 0x49, 0x14, 0xFB, 0x0C,  // ....I...
                                /* 38B8 */  0x40, 0x0F, 0x93, 0xE4, 0xEC, 0x40, 0x41, 0x0C,  // @....@A.
                                /* 38C0 */  0xE8, 0x14, 0x27, 0x0F, 0xF4, 0xD1, 0x80, 0x0D,  // ..'.....
                                /* 38C8 */  0xE4, 0x14, 0x5E, 0x03, 0x9A, 0x3F, 0x61, 0x12,  // ..^..?a.
                                /* 38D0 */  0x82, 0x47, 0xC1, 0x47, 0x00, 0x36, 0x56, 0x8F,  // .G.G.6V.
                                /* 38D8 */  0x9C, 0x9F, 0x21, 0x7D, 0x64, 0x60, 0xD0, 0xD5,  // ..!}d`..
                                /* 38E0 */  0x1C, 0x05, 0x50, 0x60, 0x3E, 0x79, 0x60, 0x2E,  // ..P`>y`.
                                /* 38E8 */  0x1E, 0xE0, 0xD2, 0x77, 0x5F, 0x00, 0x39, 0x3A,  // ...w_.9:
                                /* 38F0 */  0x8F, 0x3E, 0x56, 0x54, 0xD8, 0xB1, 0x52, 0x10,  // .>VT..R.
                                /* 38F8 */  0x8F, 0xD5, 0x87, 0x0D, 0x8F, 0x15, 0x3F, 0x7D,  // ......?}
                                /* 3900 */  0xEC, 0xC9, 0x1F, 0xD8, 0x1E, 0x36, 0xC0, 0xFF,  // .....6..
                                /* 3908 */  0xFF, 0x87, 0xE7, 0x51, 0x0F, 0x1B, 0xA0, 0xF3,  // ...Q....
                                /* 3910 */  0x71, 0xD8, 0x00, 0xDD, 0x70, 0x7D, 0x00, 0x07,  // q...p}..
                                /* 3918 */  0xE7, 0xD9, 0x02, 0x7B, 0xE0, 0x80, 0x33, 0x66,  // ...{..3f
                                /* 3920 */  0x7B, 0x46, 0x25, 0x37, 0x02, 0xCC, 0x83, 0x83,  // {F%7....
                                /* 3928 */  0x85, 0x3D, 0xF6, 0xA2, 0xEE, 0x01, 0x16, 0x01,  // .=......
                                /* 3930 */  0xA4, 0x33, 0x07, 0x1E, 0xE8, 0x15, 0xD8, 0xC8,  // .3......
                                /* 3938 */  0x11, 0xC2, 0x9C, 0x7C, 0x94, 0x13, 0x38, 0xB9,  // ...|..8.
                                /* 3940 */  0x93, 0x60, 0xD7, 0x38, 0x78, 0x07, 0x5F, 0x76,  // .`.8x._v
                                /* 3948 */  0x80, 0xE2, 0xE1, 0x60, 0x14, 0xED, 0xEC, 0x8B,  // ...`....
                                /* 3950 */  0x0A, 0x03, 0x47, 0x41, 0x7C, 0xF6, 0x05, 0xC7,  // ..GA|...
                                /* 3958 */  0x24, 0x5E, 0x3D, 0xD8, 0x90, 0x30, 0x33, 0xC2,  // $^=..03.
                                /* 3960 */  0x9E, 0x28, 0xC1, 0x7F, 0x8C, 0x83, 0xFF, 0xFF,  // .(......
                                /* 3968 */  0x3F, 0x01, 0xC1, 0x19, 0x1D, 0x9C, 0xB3, 0x2F,  // ?....../
                                /* 3970 */  0x76, 0x74, 0xC0, 0xEE, 0xE8, 0x0B, 0x38, 0x8C,  // vt....8.
                                /* 3978 */  0x35, 0x28, 0xB4, 0xA8, 0xA3, 0x2F, 0x62, 0xFC,  // 5(.../b.
                                /* 3980 */  0xC0, 0xEE, 0xE4, 0x0B, 0xBE, 0xFF, 0xFF, 0xD8,  // ........
                                /* 3988 */  0x60, 0x9E, 0x7C, 0x3D, 0x36, 0x60, 0x77, 0xF0,  // `.|=6`w.
                                /* 3990 */  0x05, 0x5C, 0x8D, 0xC5, 0x07, 0x5F, 0xE0, 0x76,  // .\..._.v
                                /* 3998 */  0xD8, 0xE1, 0x18, 0x81, 0x5E, 0x04, 0xDE, 0xD2,  // ....^...
                                /* 39A0 */  0x7C, 0xDA, 0x84, 0x29, 0xEF, 0xE0, 0x8B, 0xBA,  // |..)....
                                /* 39A8 */  0x02, 0x58, 0xF6, 0xE3, 0x43, 0xA7, 0x4D, 0xFC,  // .X..C.M.
                                /* 39B0 */  0x31, 0x07, 0x3C, 0xFF, 0xFF, 0x63, 0x0E, 0x4E,  // 1.<..c.N
                                /* 39B8 */  0xD4, 0xE9, 0x17, 0x75, 0xF8, 0xB5, 0x98, 0xD3,  // ...u....
                                /* 39C0 */  0x2F, 0x2A, 0x3E, 0x18, 0x05, 0xF1, 0xA1, 0xC3,  // /*>.....
                                /* 39C8 */  0xC7, 0x1C, 0xE0, 0x76, 0xF8, 0x05, 0x7C, 0x1E,  // ...v..|.
                                /* 39D0 */  0xDE, 0x7C, 0xF8, 0x05, 0x6E, 0xE7, 0x07, 0x70,  // .|..n..p
                                /* 39D8 */  0x45, 0x7B, 0x9E, 0xF9, 0x98, 0xEB, 0x37, 0x82,  // E{....7.
                                /* 39E0 */  0xC2, 0xC0, 0xE8, 0xFF, 0x0F, 0xC3, 0xCF, 0x56,  // .......V
                                /* 39E8 */  0x3E, 0x12, 0xE0, 0x07, 0x79, 0x8C, 0x87, 0x76,  // >...y..v
                                /* 39F0 */  0x54, 0x4C, 0x12, 0x1C, 0x6A, 0xFC, 0x1E, 0xD5,  // TL..j...
                                /* 39F8 */  0x6B, 0xE2, 0x11, 0x9D, 0xCB, 0x69, 0x78, 0x5A,  // k....ixZ
                                /* 3A00 */  0x21, 0xD9, 0x61, 0xD2, 0xC3, 0xE3, 0x52, 0x20,  // !.a...R 
                                /* 3A08 */  0x34, 0xA3, 0xE7, 0x05, 0x1F, 0xCE, 0x22, 0xBE,  // 4.....".
                                /* 3A10 */  0xFB, 0x1A, 0x26, 0x81, 0x47, 0xCE, 0xD0, 0x38,  // ..&.G..8
                                /* 3A18 */  0x34, 0x76, 0x18, 0xBE, 0x39, 0x78, 0x10, 0x0F,  // 4v..9x..
                                /* 3A20 */  0xB0, 0x3E, 0x08, 0xB3, 0x09, 0x9D, 0xE9, 0x41,  // .>.....A
                                /* 3A28 */  0xBF, 0x2A, 0x3C, 0xD3, 0x44, 0x8D, 0xD1, 0xDC,  // .*<.D...
                                /* 3A30 */  0xF1, 0x01, 0x31, 0x70, 0x70, 0x9C, 0xAE, 0xD8,  // ..1pp...
                                /* 3A38 */  0x89, 0xC1, 0xF3, 0x35, 0x16, 0x1B, 0x71, 0x8C,  // ...5..q.
                                /* 3A40 */  0x50, 0x31, 0x1E, 0x47, 0x1E, 0x42, 0xF9, 0xFC,  // P1.G.B..
                                /* 3A48 */  0x63, 0xC4, 0x3E, 0x99, 0xF8, 0xE7, 0xE8, 0x4B,  // c.>....K
                                /* 3A50 */  0x80, 0x87, 0xCF, 0x26, 0x14, 0xF9, 0x05, 0xCA,  // ...&....
                                /* 3A58 */  0x87, 0x44, 0x36, 0x18, 0x7E, 0x8C, 0xF2, 0xFD,  // .D6.~...
                                /* 3A60 */  0xE2, 0x35, 0xC2, 0x77, 0x03, 0x13, 0x74, 0x7F,  // .5.w..t.
                                /* 3A68 */  0x23, 0xD4, 0xD5, 0x21, 0xC4, 0x69, 0x85, 0x38,  // #..!.i.8
                                /* 3A70 */  0xB1, 0x67, 0x87, 0x57, 0x89, 0xB6, 0x20, 0x84,  // .g.W.. .
                                /* 3A78 */  0x10, 0xA7, 0x46, 0x14, 0x69, 0x03, 0x91, 0x35,  // ..F.i..5
                                /* 3A80 */  0x14, 0xA2, 0x10, 0x4F, 0x90, 0x81, 0xA2, 0x9C,  // ...O....
                                /* 3A88 */  0x55, 0x84, 0xC8, 0xB1, 0x0C, 0x11, 0xF4, 0x7C,  // U......|
                                /* 3A90 */  0xA2, 0xC5, 0x8E, 0x12, 0xA3, 0xFD, 0x81, 0xB0,  // ........
                                /* 3A98 */  0x27, 0xAC, 0x0E, 0x0F, 0x8E, 0x34, 0x1A, 0xD4,  // '....4..
                                /* 3AA0 */  0xD1, 0xC2, 0xE7, 0x02, 0x9F, 0x09, 0x0E, 0xF0,  // ........
                                /* 3AA8 */  0xA4, 0x3C, 0xB4, 0x20, 0xE7, 0x7A, 0x66, 0x75,  // .<. .zfu
                                /* 3AB0 */  0x4E, 0x8E, 0x12, 0x78, 0x68, 0x3E, 0x83, 0xC0,  // N..xh>..
                                /* 3AB8 */  0xB9, 0x33, 0x04, 0x7C, 0x35, 0x78, 0x30, 0x60,  // .3.|5x0`
                                /* 3AC0 */  0x07, 0x06, 0xC3, 0xF1, 0x21, 0xFA, 0x6A, 0xE2,  // ....!.j.
                                /* 3AC8 */  0xFF, 0xFF, 0xA5, 0xC4, 0x67, 0x11, 0x7E, 0x08,  // ....g.~.
                                /* 3AD0 */  0x81, 0x3F, 0x1E, 0x9F, 0x04, 0x7C, 0x40, 0xE1,  // .?...|@.
                                /* 3AD8 */  0xF2, 0x07, 0x81, 0x3A, 0x73, 0xF2, 0x69, 0x9E,  // ...:s.i.
                                /* 3AE0 */  0xD6, 0xB3, 0x80, 0x6F, 0x86, 0x26, 0xF0, 0x51,  // ...o.&.Q
                                /* 3AE8 */  0xD7, 0x87, 0x17, 0x8F, 0x07, 0xFC, 0x8A, 0x8F,  // ........
                                /* 3AF0 */  0x07, 0x42, 0x78, 0x6B, 0xF0, 0x7C, 0x7D, 0x28,  // .Bxk.|}(
                                /* 3AF8 */  0x65, 0xC7, 0x72, 0xB8, 0x07, 0x64, 0x1F, 0xA4,  // e.r..d..
                                /* 3B00 */  0x7C, 0xC6, 0xF2, 0xC9, 0x84, 0x9F, 0x2A, 0x7C,  // |.....*|
                                /* 3B08 */  0xA0, 0x60, 0x97, 0x5F, 0x7E, 0x30, 0x61, 0xC7,  // .`._~0a.
                                /* 3B10 */  0x1C, 0x0F, 0x0C, 0xBE, 0xBC, 0xD3, 0x04, 0x68,  // .......h
                                /* 3B18 */  0x0E, 0x11, 0x6C, 0x4A, 0x1C, 0xA5, 0xAE, 0x43,  // ..lJ...C
                                /* 3B20 */  0x2A, 0xE8, 0x22, 0x1F, 0x64, 0xA1, 0x9C, 0x2D,  // *.".d..-
                                /* 3B28 */  0x9E, 0x81, 0xB1, 0x01, 0xC7, 0x09, 0xAA, 0xF3,  // ........
                                /* 3B30 */  0x00, 0xFC, 0xFF, 0xFF, 0x38, 0x7D, 0xEE, 0x24,  // ....8}.$
                                /* 3B38 */  0xE3, 0x04, 0xD1, 0x9C, 0x18, 0x48, 0xB0, 0x83,  // .....H..
                                /* 3B40 */  0x62, 0x13, 0xF5, 0x48, 0xC1, 0x16, 0xFA, 0xFC,  // b..H....
                                /* 3B48 */  0x84, 0x3E, 0xBB, 0xB0, 0x03, 0x2A, 0x3F, 0xE3,  // .>...*?.
                                /* 3B50 */  0x63, 0x86, 0x0A, 0x2E, 0x40, 0x0F, 0x15, 0xFE,  // c...@...
                                /* 3B58 */  0x81, 0x09, 0x37, 0x54, 0xB8, 0x63, 0x7A, 0x33,  // ..7T.cz3
                                /* 3B60 */  0x39, 0x27, 0xCC, 0x2C, 0x0E, 0xCA, 0x33, 0xF5,  // 9'.,..3.
                                /* 3B68 */  0x61, 0x0A, 0x7C, 0x81, 0x87, 0x8A, 0x86, 0x66,  // a.|....f
                                /* 3B70 */  0xC7, 0x5B, 0x3E, 0x53, 0x76, 0x86, 0xF2, 0x48,  // .[>Sv..H
                                /* 3B78 */  0xC1, 0x03, 0xEA, 0xA3, 0x05, 0xF0, 0x38, 0x6D,  // ......8m
                                /* 3B80 */  0xF9, 0x90, 0xE0, 0xFF, 0xBF, 0xCB, 0x81, 0x82,  // ........
                                /* 3B88 */  0x3A, 0xFC, 0x40, 0xD1, 0xE7, 0x19, 0xDF, 0x36,  // :.@....6
                                /* 3B90 */  0x7C, 0x74, 0xC5, 0xDC, 0x58, 0x5E, 0x91, 0x0C,  // |t..X^..
                                /* 3B98 */  0xF3, 0x54, 0xC2, 0x42, 0x8E, 0x15, 0x54, 0x16,  // .T.B..T.
                                /* 3BA0 */  0xC6, 0x0A, 0x0A, 0x91, 0x47, 0x26, 0x90, 0x8D,  // ....G&..
                                /* 3BA8 */  0x8A, 0xCF, 0xE2, 0xAC, 0x30, 0xE7, 0x0B, 0x36,  // ....0..6
                                /* 3BB0 */  0x5C, 0xF0, 0x3D, 0x5E, 0x3C, 0x5C, 0xFC, 0x19,  // \.=^<\..
                                /* 3BB8 */  0xC0, 0x10, 0x67, 0x12, 0xE1, 0x84, 0x9E, 0xA0,  // ..g.....
                                /* 3BC0 */  0x7C, 0x4F, 0x3A, 0x37, 0x1B, 0x87, 0x24, 0x47,  // |O:7..$G
                                /* 3BC8 */  0x7F, 0x0F, 0x17, 0x3C, 0x47, 0x32, 0x0F, 0x17,  // ...<G2..
                                /* 3BD0 */  0xFE, 0xAC, 0x1E, 0x4E, 0xC0, 0x35, 0x2B, 0x1C,  // ...N.5+.
                                /* 3BD8 */  0x4E, 0x94, 0xC3, 0x62, 0xA7, 0x39, 0x23, 0xBF,  // N..b.9#.
                                /* 3BE0 */  0xA0, 0xFC, 0xFF, 0x1F, 0x17, 0xC0, 0x39, 0x60,  // ......9`
                                /* 3BE8 */  0xFC, 0x88, 0x3C, 0x16, 0x1F, 0x74, 0xD9, 0x60,  // ..<..t.`
                                /* 3BF0 */  0x70, 0xC7, 0x78, 0x36, 0x5E, 0xF0, 0x78, 0x18,  // p.x6^.x.
                                /* 3BF8 */  0x2F, 0x28, 0x66, 0x75, 0xBC, 0xE0, 0x9A, 0x14,  // /(fu....
                                /* 3C00 */  0x3B, 0xAD, 0xB1, 0x11, 0x63, 0x0E, 0x0C, 0xC0,  // ;...c...
                                /* 3C08 */  0x67, 0xC0, 0x98, 0xD3, 0xAF, 0x07, 0x0C, 0xE6,  // g.......
                                /* 3C10 */  0x11, 0x79, 0xC0, 0xC0, 0x67, 0x52, 0x1E, 0x30,  // .y..gR.0
                                /* 3C18 */  0xDC, 0xFF, 0xFF, 0x80, 0xC1, 0x79, 0x62, 0xF5,  // .....yb.
                                /* 3C20 */  0x81, 0x03, 0xFE, 0x01, 0xE8, 0x0D, 0x11, 0x13,  // ........
                                /* 3C28 */  0x73, 0xC4, 0xA0, 0x32, 0x31, 0x62, 0x50, 0x5C,  // s..21bP\
                                /* 3C30 */  0x6F, 0x1E, 0x38, 0xC0, 0x3C, 0x2C, 0xCC, 0x78,  // o.8.<,.x
                                /* 3C38 */  0xC1, 0x1A, 0xFB, 0x7C, 0x05, 0x65, 0xBC, 0x6C,  // ...|.e.l
                                /* 3C40 */  0x3E, 0x6F, 0x9A, 0xEC, 0xDA, 0xC8, 0x22, 0x8E,  // >o....".
                                /* 3C48 */  0x16, 0x54, 0x2A, 0x4E, 0x66, 0x40, 0x68, 0x4E,  // .T*Nf@hN
                                /* 3C50 */  0x18, 0x98, 0x83, 0xF2, 0x58, 0x61, 0xFE, 0xFF,  // ....Xa..
                                /* 3C58 */  0x0F, 0x4A, 0xE0, 0x1A, 0x8E, 0x4F, 0x93, 0xE7,  // .J...O..
                                /* 3C60 */  0x0A, 0xE7, 0xA4, 0x00, 0xB6, 0xA1, 0xFA, 0xA4,  // ........
                                /* 3C68 */  0x00, 0x3C, 0x06, 0x65, 0x88, 0x87, 0xB3, 0xC3,  // .<.e....
                                /* 3C70 */  0x05, 0x2E, 0xD1, 0x4F, 0x0A, 0x50, 0xCE, 0xA3,  // ...O.P..
                                /* 3C78 */  0xBE, 0xB6, 0xB2, 0xFB, 0x07, 0x1B, 0x2D, 0xF8,  // ......-.
                                /* 3C80 */  0x46, 0xEA, 0xD1, 0x02, 0x0F, 0x30, 0x4F, 0x28,  // F....0O(
                                /* 3C88 */  0xFA, 0xFB, 0xD1, 0x1B, 0xA1, 0xEF, 0xC9, 0xBE,  // ........
                                /* 3C90 */  0xD9, 0xF9, 0xAA, 0xC3, 0x60, 0x22, 0x3F, 0x25,  // ....`"?%
                                /* 3C98 */  0x81, 0xEB, 0xFF, 0x7F, 0xCC, 0x80, 0x37, 0x20,  // ......7 
                                /* 3CA0 */  0x43, 0x1F, 0xC9, 0x6B, 0xAF, 0xCF, 0xA3, 0x61,  // C..k...a
                                /* 3CA8 */  0xDF, 0x79, 0x7D, 0x59, 0xF4, 0xB1, 0x10, 0x7C,  // .y}Y...|
                                /* 3CB0 */  0x36, 0x8E, 0x85, 0x40, 0x65, 0x50, 0xF0, 0xC6,  // 6..@eP..
                                /* 3CB8 */  0x0A, 0x3E, 0xC1, 0x47, 0x76, 0x50, 0xA0, 0x44,  // .>.GvP.D
                                /* 3CC0 */  0x7F, 0x8E, 0xB0, 0x56, 0x08, 0xA1, 0xBD, 0x3B,  // ...V...;
                                /* 3CC8 */  0x33, 0x90, 0x40, 0x3E, 0xB4, 0xFB, 0xFE, 0x87,  // 3.@>....
                                /* 3CD0 */  0x99, 0x4A, 0xCC, 0x78, 0xD1, 0x9E, 0x92, 0x3D,  // .J.x...=
                                /* 3CD8 */  0x99, 0x10, 0x09, 0x7C, 0xAC, 0xC3, 0x0F, 0x84,  // ...|....
                                /* 3CE0 */  0xA3, 0x3E, 0xC5, 0xB3, 0x81, 0xBC, 0xC8, 0x1B,  // .>......
                                /* 3CE8 */  0xFF, 0xB8, 0x7C, 0xE4, 0x36, 0xC2, 0x71, 0x3D,  // ..|.6.q=
                                /* 3CF0 */  0x69, 0xBF, 0xFE, 0x61, 0x0F, 0xF3, 0xB8, 0x04,  // i..a....
                                /* 3CF8 */  0x0F, 0x00, 0x9F, 0x94, 0x7D, 0x9C, 0x92, 0xAC,  // ....}...
                                /* 3D00 */  0xC7, 0x00, 0x85, 0xF1, 0xE9, 0x1C, 0x38, 0xFC,  // ......8.
                                /* 3D08 */  0xFF, 0x4F, 0xE7, 0xC0, 0xF3, 0xC8, 0xEC, 0x93,  // .O......
                                /* 3D10 */  0x02, 0x38, 0x8E, 0x03, 0xB0, 0x66, 0xEF, 0x7B,  // .8...f.{
                                /* 3D18 */  0xC0, 0x63, 0x40, 0xA8, 0xE0, 0xD7, 0x1C, 0xFB,  // .c@.....
                                /* 3D20 */  0x7D, 0xC3, 0xF8, 0x11, 0x9E, 0xCB, 0xE1, 0x83,  // }.......
                                /* 3D28 */  0x04, 0xED, 0xED, 0x1E, 0xAE, 0x21, 0xC5, 0x78,  // .....!.x
                                /* 3D30 */  0x0E, 0x68, 0xEC, 0xE8, 0xA2, 0x03, 0xED, 0x13,  // .h......
                                /* 3D38 */  0x43, 0x9C, 0x60, 0x51, 0x8E, 0xCB, 0x68, 0xB1,  // C.`Q..h.
                                /* 3D40 */  0xA2, 0x3C, 0x44, 0x1C, 0x53, 0xC0, 0x43, 0x8B,  // .<D.S.C.
                                /* 3D48 */  0x12, 0x2C, 0x46, 0x84, 0x60, 0xAF, 0x0E, 0x91,  // .,F.`...
                                /* 3D50 */  0x82, 0x46, 0x79, 0x13, 0x37, 0x54, 0xB8, 0xE7,  // .Fy.7T..
                                /* 3D58 */  0x72, 0x16, 0xEE, 0x34, 0xA0, 0xE3, 0x86, 0xCF,  // r..4....
                                /* 3D60 */  0xE5, 0x80, 0xCB, 0xFF, 0xFF, 0xB9, 0x1C, 0x38,  // .......8
                                /* 3D68 */  0x1D, 0x38, 0x70, 0x07, 0x11, 0xB0, 0x1D, 0x15,  // .8p.....
                                /* 3D70 */  0x70, 0x47, 0x10, 0x60, 0xA2, 0xD0, 0xCE, 0x49,  // pG.`...I
                                /* 3D78 */  0x8C, 0x25, 0x5D, 0xAB, 0x6C, 0x9C, 0x41, 0xE8,  // .%].l.A.
                                /* 3D80 */  0xB9, 0xC3, 0x3A, 0x80, 0x34, 0x1D, 0x0E, 0xF2,  // ..:.4...
                                /* 3D88 */  0xE0, 0xE6, 0x8B, 0x8A, 0x07, 0x11, 0xE3, 0x7D,  // .......}
                                /* 3D90 */  0x99, 0x8F, 0xE0, 0x49, 0xC2, 0xA9, 0x8F, 0x0B,  // ...I....
                                /* 3D98 */  0x3A, 0xB9, 0x7B, 0xEC, 0xCE, 0x4B, 0xA2, 0xCC,  // :.{..K..
                                /* 3DA0 */  0x63, 0xA2, 0x43, 0x70, 0xCA, 0x03, 0x3C, 0x05,  // c.Cp..<.
                                /* 3DA8 */  0x31, 0xA0, 0x23, 0x1C, 0xD0, 0xD1, 0xC3, 0xF1,  // 1.#.....
                                /* 3DB0 */  0xB1, 0x1E, 0x33, 0xAC, 0x57, 0x06, 0x36, 0x47,  // ..3.W.6G
                                /* 3DB8 */  0x5F, 0x06, 0xF8, 0x0D, 0xC5, 0xC7, 0x03, 0x03,  // _.......
                                /* 3DC0 */  0x5B, 0xCD, 0x25, 0x08, 0x05, 0xE6, 0x2B, 0x37,  // [.%...+7
                                /* 3DC8 */  0x3F, 0x88, 0x83, 0x4D, 0xDF, 0x81, 0x00, 0x14,  // ?..M....
                                /* 3DD0 */  0x40, 0x9E, 0xBF, 0xFF, 0xFF, 0x67, 0x9C, 0x67,  // @....g.g
                                /* 3DD8 */  0x00, 0x36, 0x85, 0xC7, 0x1C, 0xA3, 0x19, 0x9D,  // .6......
                                /* 3DE0 */  0xDF, 0xB8, 0x3C, 0x53, 0x1E, 0x76, 0xA6, 0x14,  // ..<S.v..
                                /* 3DE8 */  0xC4, 0x33, 0x75, 0x90, 0x9B, 0x3D, 0x94, 0xD1,  // .3u..=..
                                /* 3DF0 */  0x63, 0xAF, 0x25, 0xEC, 0xB6, 0x01, 0x67, 0xCC,  // c.%...g.
                                /* 3DF8 */  0x11, 0x1F, 0x0B, 0x3C, 0x0D, 0xC3, 0x79, 0xB0,  // ...<..y.
                                /* 3E00 */  0x1C, 0xCE, 0x83, 0xE5, 0x63, 0xF1, 0x64, 0xC1,  // ....c.d.
                                /* 3E08 */  0x75, 0x81, 0xC2, 0x4D, 0x16, 0x8C, 0xF0, 0x98,  // u..M....
                                /* 3E10 */  0x60, 0x83, 0xA2, 0xE3, 0xF1, 0xB0, 0xF8, 0xD9,  // `.......
                                /* 3E18 */  0xC0, 0x17, 0x1E, 0x86, 0xFD, 0xE4, 0x60, 0xD1,  // ......`.
                                /* 3E20 */  0x77, 0x04, 0x72, 0xCF, 0x62, 0x43, 0xE3, 0x03,  // w.r.bC..
                                /* 3E28 */  0xE5, 0xB0, 0x46, 0x0B, 0xFB, 0x92, 0xF3, 0xCE,  // ..F.....
                                /* 3E30 */  0xE1, 0x03, 0x8B, 0x6F, 0x6F, 0x0C, 0xD6, 0xD7,  // ...oo...
                                /* 3E38 */  0x63, 0x70, 0xDD, 0x29, 0xD8, 0xD7, 0xE2, 0xBD,  // cp.)....
                                /* 3E40 */  0x82, 0x1D, 0xF3, 0x7C, 0xCF, 0xF3, 0x45, 0x00,  // ...|..E.
                                /* 3E48 */  0xF7, 0xC3, 0x60, 0xE2, 0x2F, 0x19, 0xE8, 0x68,  // ..`./..h
                                /* 3E50 */  0x8B, 0xD2, 0x25, 0x83, 0xE3, 0xBE, 0x64, 0xC0,  // ..%...d.
                                /* 3E58 */  0x0C, 0x72, 0xC9, 0xA0, 0x10, 0xFF, 0xFF, 0x97,  // .r......
                                /* 3E60 */  0x0B, 0x51, 0x28, 0x00, 0x84, 0xCE, 0x0A, 0x5C,  // .Q(....\
                                /* 3E68 */  0x32, 0x1C, 0x05, 0xF1, 0x88, 0x1D, 0xE3, 0xAC,  // 2.......
                                /* 3E70 */  0x80, 0xBE, 0xB8, 0xF8, 0x92, 0x81, 0x39, 0x2A,  // ......9*
                                /* 3E78 */  0xC0, 0x3C, 0x65, 0xB0, 0xA3, 0x02, 0xEC, 0x6B,  // .<e....k
                                /* 3E80 */  0x06, 0xF8, 0x8E, 0x13, 0xE0, 0x1E, 0x14, 0x38,  // .......8
                                /* 3E88 */  0x8E, 0x13, 0x80, 0xA7, 0x13, 0x89, 0x8F, 0x13,  // ........
                                /* 3E90 */  0xC0, 0xE2, 0xFF, 0x7F, 0x9C, 0xC0, 0x9E, 0x1E,  // ........
                                /* 3E98 */  0xD8, 0x71, 0x02, 0x0C, 0x32, 0x7E, 0x5C, 0x3A,  // .q..2~\:
                                /* 3EA0 */  0x4E, 0xF0, 0x7B, 0x93, 0x05, 0xAE, 0x4E, 0x57,  // N.{...NW
                                /* 3EA8 */  0x20, 0x3C, 0xCE, 0xD9, 0x5A, 0x21, 0x0A, 0x99,  //  <..Z!..
                                /* 3EB0 */  0x47, 0xEF, 0x77, 0x38, 0x32, 0xEB, 0x77, 0x4B,  // G.w82.wK
                                /* 3EB8 */  0x5F, 0x0F, 0x3D, 0x78, 0x41, 0xEB, 0x44, 0xC1,  // _.=xA.D.
                                /* 3EC0 */  0x25, 0xAC, 0xD6, 0x10, 0x3A, 0x51, 0xF0, 0xC8,  // %...:Q..
                                /* 3EC8 */  0x0B, 0x15, 0x98, 0x41, 0x6C, 0xE1, 0x98, 0xE1,  // ...Al...
                                /* 3ED0 */  0x7B, 0x25, 0x7A, 0x34, 0x9E, 0xD6, 0x41, 0x9D,  // {%z4..A.
                                /* 3ED8 */  0xC4, 0xB3, 0x95, 0xC7, 0xEA, 0xB9, 0xC0, 0x27,  // .......'
                                /* 3EE0 */  0x38, 0xD4, 0x87, 0x1A, 0x30, 0xDF, 0x24, 0xC1,  // 8...0.$.
                                /* 3EE8 */  0x79, 0xB6, 0xF0, 0xE8, 0x70, 0xC7, 0x0F, 0xDF,  // y...p...
                                /* 3EF0 */  0xCC, 0x3C, 0xAD, 0x53, 0xF2, 0xA0, 0xC0, 0x3E,  // .<.S...>
                                /* 3EF8 */  0x6E, 0x0F, 0x0A, 0x7C, 0xB1, 0x06, 0x85, 0xBE,  // n..|....
                                /* 3F00 */  0x9F, 0x1A, 0xF8, 0xFF, 0x1F, 0xD2, 0xE3, 0x07,  // ........
                                /* 3F08 */  0x76, 0x67, 0x0B, 0x8F, 0x0D, 0x58, 0x9C, 0xF1,  // vg...X..
                                /* 3F10 */  0x3D, 0x36, 0x60, 0x07, 0xE5, 0xB1, 0x81, 0xEF,  // =6`.....
                                /* 3F18 */  0xC4, 0x02, 0x3C, 0xC2, 0x9D, 0x58, 0x40, 0x07,  // ..<..X@.
                                /* 3F20 */  0xCB, 0x4F, 0x2C, 0xE0, 0xB9, 0x90, 0xC2, 0xFA,  // .O,.....
                                /* 3F28 */  0xFF, 0x9F, 0xA7, 0xC0, 0x70, 0x19, 0xE0, 0x28,  // ....p..(
                                /* 3F30 */  0xBE, 0x0C, 0x40, 0x3A, 0x51, 0xA1, 0xC6, 0x6F,  // ..@:Q..o
                                /* 3F38 */  0x69, 0x27, 0x2A, 0x28, 0xB7, 0x03, 0xF8, 0x12,  // i'*(....
                                /* 3F40 */  0x0E, 0x55, 0xA8, 0xDB, 0xBC, 0xCF, 0x73, 0xF0,  // .U....s.
                                /* 3F48 */  0x8F, 0x21, 0xF8, 0x53, 0x39, 0xBB, 0x16, 0xBC,  // .!.S9...
                                /* 3F50 */  0x54, 0xF9, 0xC0, 0x00, 0xEF, 0x50, 0x05, 0x9E,  // T....P..
                                /* 3F58 */  0x03, 0x03, 0xFC, 0x61, 0x3E, 0x2D, 0x1B, 0xE8,  // ...a>-..
                                /* 3F60 */  0x81, 0x01, 0xF8, 0x5F, 0x69, 0x7D, 0x60, 0x00,  // ..._i}`.
                                /* 3F68 */  0x06, 0xFF, 0xFF, 0x13, 0x13, 0x18, 0x0E, 0x0C,  // ........
                                /* 3F70 */  0xF0, 0xCF, 0x4C, 0xE0, 0x98, 0xC9, 0xC9, 0x86,  // ..L.....
                                /* 3F78 */  0xF2, 0x99, 0x09, 0x58, 0x0E, 0x06, 0x0C, 0x67,  // ...X...g
                                /* 3F80 */  0x26, 0x80, 0x09, 0xFF, 0xFF, 0x33, 0x13, 0x7E,  // &....3.~
                                /* 3F88 */  0xFC, 0xC0, 0xEE, 0xCC, 0x04, 0x6C, 0xC6, 0x06,  // .....l..
                                /* 3F90 */  0xEC, 0xCE, 0x4C, 0x80, 0xAB, 0x63, 0x87, 0xCF,  // ..L..c..
                                /* 3F98 */  0x2C, 0x60, 0xFD, 0xFF, 0x9F, 0x99, 0xC0, 0x76,  // ,`.....v
                                /* 3FA0 */  0x18, 0xE0, 0x67, 0x16, 0x78, 0x12, 0xCE, 0x4C,  // ..g.x..L
                                /* 3FA8 */  0xA0, 0x38, 0x1D, 0xC0, 0x3F, 0x33, 0x01, 0x1C,  // .8..?3..
                                /* 3FB0 */  0x88, 0x77, 0x60, 0x00, 0xDD, 0xD9, 0xDD, 0x07,  // .w`.....
                                /* 3FB8 */  0x06, 0x70, 0xDD, 0xFC, 0x8F, 0x85, 0xFF, 0xFF,  // .p......
                                /* 3FC0 */  0xCF, 0x4C, 0x60, 0x3B, 0x30, 0xC0, 0x9D, 0x88,  // .L`;0...
                                /* 3FC8 */  0x09, 0x1C, 0xFF, 0xC4, 0x80, 0x82, 0x4B, 0x50,  // ......KP
                                /* 3FD0 */  0x14, 0x90, 0x0E, 0x4D, 0xF8, 0xC1, 0xF8, 0xCC,  // ...M....
                                /* 3FD8 */  0xFF, 0x68, 0xF0, 0x66, 0x70, 0x60, 0x0F, 0x6E,  // .h.fp`.n
                                /* 3FE0 */  0xD8, 0x7B, 0x03, 0x7C, 0x82, 0x71, 0x0F, 0x0E,  // .{.|.q..
                                /* 3FE8 */  0xA8, 0xA0, 0x14, 0x8A, 0x79, 0xBE, 0x46, 0x05,  // ....y.F.
                                /* 3FF0 */  0x83, 0xA3, 0x20, 0x1E, 0xBE, 0xCF, 0x4E, 0x70,  // .. ...Np
                                /* 3FF8 */  0xC6, 0x03, 0x73, 0x32, 0x18, 0xB4, 0x67, 0x27,  // ..s2..g'
                                /* 4000 */  0x60, 0x3E, 0x3A, 0x70, 0xCC, 0x1C, 0xCE, 0xE8,  // `>:p....
                                /* 4008 */  0xC0, 0xFA, 0xFF, 0x3F, 0x44, 0x01, 0x8B, 0xE3,  // ...?D...
                                /* 4010 */  0x06, 0xF0, 0x08, 0x78, 0xDC, 0x00, 0x9D, 0x87,  // ...x....
                                /* 4018 */  0xE3, 0x06, 0xE8, 0x04, 0x1F, 0x77, 0x40, 0x7B,  // .....w@{
                                /* 4020 */  0x20, 0xC0, 0xDE, 0x37, 0x60, 0x46, 0x3B, 0xF3,  //  ..7`F;.
                                /* 4028 */  0xA1, 0xA4, 0x9D, 0xEE, 0x7C, 0xE6, 0x83, 0x32,  // ....|..2
                                /* 4030 */  0xDC, 0xD3, 0xF2, 0x5C, 0xE2, 0xFB, 0x16, 0xCE,  // ...\....
                                /* 4038 */  0x8E, 0x77, 0x06, 0x7B, 0xD3, 0xC0, 0x05, 0x3B,  // .w.{...;
                                /* 4040 */  0xF4, 0xA1, 0x22, 0xC1, 0x28, 0xD0, 0xA1, 0x0F,  // ..".(...
                                /* 4048 */  0x15, 0x01, 0x8E, 0x82, 0xF8, 0xB8, 0xE2, 0xF3,  // ........
                                /* 4050 */  0xBB, 0x4F, 0xFD, 0xB8, 0x43, 0x1F, 0x8C, 0xC9,  // .O..C...
                                /* 4058 */  0xC0, 0x40, 0x39, 0x17, 0xFE, 0xFF, 0x3F, 0x85,  // .@9...?.
                                /* 4060 */  0xB0, 0xD3, 0x3F, 0xBC, 0x93, 0x06, 0x78, 0x4E,  // ..?...xN
                                /* 4068 */  0xFF, 0xE0, 0x1A, 0x1C, 0x9C, 0x83, 0x00, 0x76,  // .......v
                                /* 4070 */  0x70, 0xC0, 0x6E, 0xFC, 0x1E, 0x1C, 0xB8, 0x62,  // p.n....b
                                /* 4078 */  0x0C, 0x0E, 0x7D, 0x3E, 0xC4, 0x8F, 0x09, 0xDC,  // ..}>....
                                /* 4080 */  0x27, 0x2C, 0x8F, 0x09, 0x5C, 0xA1, 0xC6, 0x84,  // ',..\...
                                /* 4088 */  0x3E, 0x1E, 0x62, 0x46, 0x0F, 0xDE, 0xFF, 0xFF,  // >.bF....
                                /* 4090 */  0x99, 0x0F, 0x4C, 0x43, 0x03, 0x06, 0xA7, 0x43,  // ..LC...C
                                /* 4098 */  0x0F, 0x0D, 0xD8, 0x9D, 0x7A, 0xF9, 0xD0, 0xC0,  // ....z...
                                /* 40A0 */  0x73, 0x38, 0x03, 0xDE, 0xE0, 0x3E, 0x9C, 0x01,  // s8...>..
                                /* 40A8 */  0xA7, 0xE3, 0x0D, 0xFE, 0x2C, 0x03, 0x0B, 0xEC,  // ....,...
                                /* 40B0 */  0x65, 0x00, 0xF3, 0xFF, 0x3F, 0x98, 0xB1, 0xD3,  // e...?...
                                /* 40B8 */  0x0D, 0x4E, 0xEC, 0xE9, 0x10, 0xCA, 0xE9, 0x06,  // .N......
                                /* 40C0 */  0x1C, 0x92, 0x8E, 0x65, 0x28, 0x31, 0x14, 0x92,  // ...e(1..
                                /* 40C8 */  0x72, 0x2C, 0x43, 0x1D, 0x11, 0x7D, 0x48, 0xE4,  // r,C..}H.
                                /* 40D0 */  0xA7, 0x0D, 0x9F, 0x6E, 0xC0, 0x89, 0xE6, 0xC1,  // ...n....
                                /* 40D8 */  0xE0, 0x8E, 0x0E, 0xF0, 0xCE, 0x89, 0xE0, 0x39,  // .......9
                                /* 40E0 */  0x3A, 0x00, 0x8E, 0x4C, 0x1C, 0x13, 0x81, 0xE0,  // :..L....
                                /* 40E8 */  0xFF, 0xFF, 0xE8, 0x00, 0xA6, 0xF8, 0x0F, 0x04,  // ........
                                /* 40F0 */  0x1D, 0x1D, 0xF8, 0x21, 0xC5, 0xE2, 0x8E, 0x0E,  // ...!....
                                /* 40F8 */  0xA8, 0x73, 0x16, 0xBF, 0x01, 0x1E, 0x48, 0x84,  // .s....H.
                                /* 4100 */  0xF7, 0x1E, 0x8F, 0xDB, 0x23, 0x0B, 0x73, 0x3C,  // ....#.s<
                                /* 4108 */  0x5D, 0x8F, 0xDE, 0xE7, 0x06, 0xD4, 0x41, 0xD5,  // ].....A.
                                /* 4110 */  0x24, 0x3E, 0xA8, 0x23, 0xC0, 0x28, 0x88, 0xCF,  // $>.#.(..
                                /* 4118 */  0x0D, 0x8E, 0x73, 0xE0, 0x43, 0x0F, 0xD1, 0xC3,  // ..s.C...
                                /* 4120 */  0xC0, 0xCC, 0x02, 0x77, 0x2E, 0x04, 0xC6, 0x47,  // ...w...G
                                /* 4128 */  0x06, 0xE0, 0x71, 0xE0, 0xF0, 0x91, 0x01, 0x5C,  // ..q....\
                                /* 4130 */  0x2A, 0x8E, 0x0C, 0xA0, 0x1B, 0xD0, 0xC3, 0x0B,  // *.......
                                /* 4138 */  0x78, 0xFE, 0xFF, 0x47, 0x06, 0xEC, 0x51, 0x00,  // x..G..Q.
                                /* 4140 */  0x03, 0xF3, 0x2A, 0x80, 0x13, 0xAB, 0x66, 0x0C,  // ..*...f.
                                /* 4148 */  0x2C, 0xC0, 0xD3, 0x40, 0xF2, 0x60, 0x50, 0x07,  // ,..@.`P.
                                /* 4150 */  0x3A, 0x9F, 0x07, 0xF0, 0x23, 0x3C, 0xC0, 0xE3,  // :...#<..
                                /* 4158 */  0x3A, 0x24, 0x26, 0x09, 0x0E, 0x35, 0x78, 0x0F,  // :$&..5x.
                                /* 4160 */  0xA9, 0xF9, 0xE1, 0xE8, 0x22, 0x71, 0xA6, 0x9E,  // ...."q..
                                /* 4168 */  0x46, 0x48, 0x76, 0x9A, 0xF1, 0xD8, 0xB8, 0x14,  // FHv.....
                                /* 4170 */  0x08, 0x4D, 0xE9, 0xCC, 0x0E, 0xE7, 0x0D, 0x39,  // .M.....9
                                /* 4178 */  0xE2, 0x39, 0x3E, 0x54, 0x98, 0xC0, 0xC3, 0x66,  // .9>T...f
                                /* 4180 */  0x68, 0x1C, 0x1A, 0x3B, 0x0C, 0xDF, 0x07, 0x4E,  // h..;...N
                                /* 4188 */  0xCD, 0xC7, 0x65, 0xDF, 0x96, 0x7D, 0x96, 0xF2,  // ..e..}..
                                /* 4190 */  0x61, 0xE0, 0x99, 0xE3, 0x3D, 0xE1, 0x61, 0x2A,  // a...=.a*
                                /* 4198 */  0x6A, 0x8C, 0xE6, 0xA0, 0xC8, 0x71, 0x88, 0x8F,  // j....q..
                                /* 41A0 */  0x1A, 0xFE, 0x99, 0x8E, 0x1D, 0x17, 0x7C, 0xDC,  // ......|.
                                /* 41A8 */  0x30, 0x16, 0x9B, 0x73, 0x8C, 0x50, 0x31, 0x5E,  // 0..s.P1^
                                /* 41B0 */  0x0B, 0x3C, 0xA5, 0x30, 0xA1, 0x0F, 0x31, 0x4E,  // .<.0..1N
                                /* 41B8 */  0x9F, 0x23, 0x17, 0xC6, 0xE3, 0xA8, 0x27, 0xEF,  // .#....'.
                                /* 41C0 */  0xF3, 0x15, 0x1F, 0x09, 0x3F, 0xBA, 0xD9, 0xF3,  // ....?...
                                /* 41C8 */  0x05, 0x82, 0x4C, 0xC7, 0x04, 0xDD, 0xDF, 0x20,  // ..L.... 
                                /* 41D0 */  0xE4, 0x0D, 0x46, 0x83, 0x8A, 0xD0, 0xD8, 0xB0,  // ..F.....
                                /* 41D8 */  0xA4, 0x58, 0x80, 0x2D, 0x24, 0x82, 0x73, 0x44,  // .X.-$.sD
                                /* 41E0 */  0x51, 0x02, 0x45, 0x39, 0x1C, 0xA3, 0x04, 0x8B,  // Q.E9....
                                /* 41E8 */  0x11, 0x2A, 0x5A, 0x94, 0xD6, 0xCE, 0x33, 0x42,  // .*Z...3B
                                /* 41F0 */  0x88, 0x15, 0xE2, 0x34, 0x43, 0x06, 0x7B, 0xA2,  // ...4C.{.
                                /* 41F8 */  0x88, 0x16, 0xE4, 0x04, 0xDA, 0x3F, 0xC3, 0xB0,  // .....?..
                                /* 4200 */  0x15, 0x6A, 0x88, 0x8E, 0x34, 0x1A, 0xD4, 0xA1,  // .j..4...
                                /* 4208 */  0xC2, 0x87, 0x02, 0x1F, 0x08, 0x8E, 0xEE, 0xA8,  // ........
                                /* 4210 */  0x0C, 0x1E, 0x24, 0xF2, 0x09, 0x3C, 0x59, 0x3F,  // ..$..<Y?
                                /* 4218 */  0x0D, 0x78, 0xDC, 0x6C, 0x6A, 0x3E, 0x7D, 0x60,  // .x.lj>}`
                                /* 4220 */  0xFE, 0xFF, 0xC7, 0x03, 0xCC, 0x51, 0x21, 0xE0,  // .....Q!.
                                /* 4228 */  0x59, 0x3E, 0x15, 0xB0, 0x9F, 0x8A, 0xE1, 0xF8,  // Y>......
                                /* 4230 */  0x10, 0x7D, 0x67, 0xF1, 0x04, 0x0E, 0x91, 0x01,  // .}g.....
                                /* 4238 */  0xFA, 0xF8, 0x01, 0x7F, 0x3C, 0x3E, 0x06, 0x78,  // ....<>.x
                                /* 4240 */  0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81, 0x1A,  // >'......
                                /* 4248 */  0x99, 0xA1, 0x7D, 0xEF, 0x38, 0xAD, 0x07, 0x01,  // ..}.8...
                                /* 4250 */  0x1F, 0x12, 0x0E, 0x8B, 0x9D, 0xEA, 0x7D, 0x60,  // ......}`
                                /* 4258 */  0xF1, 0x78, 0xC0, 0x3F, 0xF4, 0x27, 0x0C, 0x5F,  // .x.?.'._
                                /* 4260 */  0x19, 0x3C, 0x5F, 0xBF, 0x63, 0xD8, 0x59, 0x0A,  // .<_.c.Y.
                                /* 4268 */  0x37, 0x10, 0x1F, 0x4B, 0x0C, 0xF1, 0x68, 0xF2,  // 7..K..h.
                                /* 4270 */  0x82, 0x60, 0x8C, 0x53, 0x0A, 0x7D, 0x48, 0x8F,  // .`.S.}H.
                                /* 4278 */  0x08, 0x1E, 0xD4, 0x09, 0xFB, 0x14, 0xAD, 0x33,  // .......3
                                /* 4280 */  0x1C, 0x3D, 0xEA, 0xF8, 0x60, 0xC2, 0xCF, 0x15,  // .=..`...
                                /* 4288 */  0x3E, 0x52, 0xB0, 0x8B, 0xC3, 0x93, 0x8F, 0x21,  // >R.....!
                                /* 4290 */  0x9E, 0x4B, 0xD8, 0xF9, 0xC6, 0xA3, 0x83, 0x7F,  // .K......
                                /* 4298 */  0x28, 0x01, 0xCF, 0x41, 0x02, 0xCE, 0xBC, 0xB0,  // (..A....
                                /* 42A0 */  0xBA, 0xCE, 0x57, 0x20, 0x94, 0xB3, 0x30, 0x29,  // ..W ..0)
                                /* 42A8 */  0x19, 0x30, 0x0A, 0xDE, 0x03, 0xC6, 0xFC, 0xFF,  // .0......
                                /* 42B0 */  0x07, 0xEC, 0x6B, 0x21, 0x03, 0xA9, 0x71, 0x78,  // ..k!..qx
                                /* 42B8 */  0xC4, 0xF8, 0xA9, 0x90, 0x1C, 0x1F, 0x3C, 0x66,  // ......<f
                                /* 42C0 */  0x16, 0x77, 0xCC, 0xA0, 0x3A, 0x20, 0x80, 0xE3,  // .w..: ..
                                /* 42C8 */  0x64, 0x05, 0x9E, 0x31, 0xC3, 0x99, 0x1A, 0x03,  // d..1....
                                /* 42D0 */  0x39, 0x35, 0x18, 0xC3, 0x66, 0x87, 0x24, 0xF0,  // 95..f.$.
                                /* 42D8 */  0x1C, 0x48, 0x6A, 0x83, 0x24, 0xE3, 0x06, 0x07,  // .Hj.$...
                                /* 42E0 */  0xB2, 0xC7, 0x0D, 0x1C, 0x00, 0x3D, 0x6E, 0x60,  // .....=n`
                                /* 42E8 */  0x37, 0x35, 0x8F, 0x1B, 0x7C, 0xFF, 0xFF, 0x71,  // 75..|..q
                                /* 42F0 */  0xC3, 0x94, 0x35, 0x6E, 0xF4, 0x69, 0xC8, 0xE3,  // ..5n.i..
                                /* 42F8 */  0xC6, 0xDE, 0xEA, 0xF1, 0x23, 0x87, 0x75, 0x4C,  // ....#.uL
                                /* 4300 */  0xF3, 0xC8, 0xC1, 0x03, 0xEA, 0x91, 0xC3, 0x3F,  // .......?
                                /* 4308 */  0x22, 0x81, 0x67, 0xE4, 0x70, 0x8E, 0xE8, 0xF8,  // ".g.p...
                                /* 4310 */  0xB1, 0x03, 0x8F, 0xF3, 0xA6, 0xC7, 0x8E, 0x1B,  // ........
                                /* 4318 */  0x80, 0xC7, 0x8E, 0x9D, 0x0A, 0x8C, 0x7B, 0xA8,  // ......{.
                                /* 4320 */  0x4F, 0x57, 0xFC, 0xA6, 0xE5, 0xC0, 0x43, 0x07,  // OW....C.
                                /* 4328 */  0x95, 0x85, 0xA1, 0x83, 0xE2, 0xAC, 0x0F, 0x96,  // ........
                                /* 4330 */  0xFF, 0xFF, 0xD0, 0x61, 0xCD, 0x0D, 0x06, 0xD4,  // ...a....
                                /* 4338 */  0xB9, 0xE1, 0x66, 0xEE, 0x91, 0x83, 0x4F, 0xD0,  // ..f...O.
                                /* 4340 */  0x91, 0x08, 0x7D, 0x6A, 0x66, 0x23, 0xC7, 0x5D,  // ..}jf#.]
                                /* 4348 */  0x98, 0xC2, 0x84, 0x0F, 0xF2, 0x6E, 0x15, 0xFE,  // .....n..
                                /* 4350 */  0xA4, 0xDE, 0x76, 0x4E, 0xC5, 0x93, 0x7B, 0x82,  // ..vN..{.
                                /* 4358 */  0x00, 0xDF, 0xA9, 0xCE, 0xE3, 0x86, 0x7F, 0x0E,  // ........
                                /* 4360 */  0x3C, 0x6E, 0x30, 0x0F, 0xF9, 0xBC, 0x42, 0x46,  // <n0...BF
                                /* 4368 */  0x88, 0xE5, 0x13, 0x84, 0x67, 0xC7, 0x40, 0xCE,  // ....g.@.
                                /* 4370 */  0x0E, 0x7B, 0x34, 0x02, 0xA3, 0xBC, 0x13, 0x04,  // .{4.....
                                /* 4378 */  0x1A, 0xCA, 0x03, 0xC7, 0x5E, 0x7C, 0x7D, 0x0D,  // ....^|}.
                                /* 4380 */  0xF3, 0x74, 0xCE, 0xD6, 0xEA, 0x2F, 0xC4, 0xE4,  // .t.../..
                                /* 4388 */  0x34, 0x02, 0x2B, 0xF8, 0xE0, 0x41, 0xF4, 0xFF,  // 4.+..A..
                                /* 4390 */  0x27, 0xE8, 0x61, 0xF0, 0xA0, 0x38, 0x8A, 0x7A,  // '.a..8.z
                                /* 4398 */  0xF0, 0xE0, 0x9D, 0x1D, 0x8C, 0x23, 0x89, 0x27,  // .....#.'
                                /* 43A0 */  0xC4, 0x2E, 0x24, 0xF0, 0xCE, 0x11, 0xE0, 0x13,  // ..$.....
                                /* 43A8 */  0x75, 0x44, 0x02, 0xC1, 0xF8, 0xE1, 0xDC, 0x61,  // uD.....a
                                /* 43B0 */  0x7D, 0x7D, 0xEC, 0x12, 0x56, 0xA1, 0x07, 0x0F,  // }}..V...
                                /* 43B8 */  0xAA, 0x61, 0xF9, 0x20, 0x01, 0xDC, 0x06, 0x0F,  // .a. ....
                                /* 43C0 */  0x7B, 0x74, 0xFC, 0x68, 0x03, 0x2C, 0x86, 0xFE,  // {t.h.,..
                                /* 43C8 */  0xFF, 0x3F, 0x74, 0x30, 0x1D, 0x49, 0xC0, 0x77,  // .?t0.I.w
                                /* 43D0 */  0xBE, 0xF6, 0x19, 0x09, 0xB8, 0x0D, 0x1D, 0x1C,  // ........
                                /* 43D8 */  0x67, 0x08, 0x70, 0x1E, 0xB3, 0x7D, 0xDC, 0x82,  // g.p..}..
                                /* 43E0 */  0x3D, 0x72, 0x58, 0x27, 0xE5, 0x60, 0x07, 0x14,  // =rX'.`..
                                /* 43E8 */  0x85, 0x1D, 0x16, 0x7D, 0x22, 0x01, 0xD7, 0x41,  // ...}"..A
                                /* 43F0 */  0xD9, 0x27, 0x12, 0x60, 0xFD, 0xFF, 0x1F, 0x3B,  // .'.`...;
                                /* 43F8 */  0x1B, 0x1F, 0xF6, 0x1C, 0x01, 0xD6, 0x13, 0x09,  // ........
                                /* 4400 */  0x78, 0x8F, 0xDE, 0xBE, 0x77, 0xFB, 0x44, 0x02,  // x...w.D.
                                /* 4408 */  0xAE, 0xA1, 0xFB, 0x44, 0x02, 0xDC, 0x47, 0xC7,  // ...D..G.
                                /* 4410 */  0x86, 0x0E, 0x6C, 0xB1, 0x4E, 0xF9, 0x8D, 0xC4,  // ..l.N...
                                /* 4418 */  0x43, 0x07, 0xD7, 0xB0, 0x3D, 0x74, 0xD8, 0xFF,  // C...=t..
                                /* 4420 */  0xFF, 0xB3, 0x0D, 0xF0, 0x1B, 0x9D, 0x87, 0x0E,  // ........
                                /* 4428 */  0x6C, 0x2F, 0x51, 0xCF, 0x05, 0x67, 0x73, 0xE8,  // l/Q..gs.
                                /* 4430 */  0x60, 0xB3, 0x31, 0x74, 0xA0, 0x3F, 0x3A, 0x76,  // `.1t.?:v
                                /* 4438 */  0x34, 0x05, 0x16, 0xE7, 0x49, 0x18, 0xC7, 0x11,  // 4...I...
                                /* 4440 */  0x78, 0x90, 0x87, 0xF3, 0xFF, 0x3F, 0x8E, 0x04,  // x....?..
                                /* 4448 */  0x1E, 0x3B, 0xB8, 0x74, 0x9C, 0x47, 0x00, 0x01,  // .;.t.G..
                                /* 4450 */  0xC3, 0x63, 0x47, 0x37, 0xE0, 0x3A, 0x9A, 0x93,  // .cG7.:..
                                /* 4458 */  0x89, 0x76, 0xE8, 0x60, 0xF3, 0x31, 0x74, 0x40,  // .v.`.1t@
                                /* 4460 */  0xC0, 0xE8, 0x7C, 0x8A, 0x80, 0xFF, 0xFF, 0x1F,  // ..|.....
                                /* 4468 */  0x3A, 0xF0, 0x41, 0x38, 0xA2, 0x43, 0x07, 0xDB,  // :.A8.C..
                                /* 4470 */  0xA0, 0x3C, 0x74, 0x60, 0x3F, 0x3A, 0x0F, 0x1D,  // .<t`?:..
                                /* 4478 */  0xF8, 0x8E, 0xE2, 0xC9, 0xCD, 0x43, 0x07, 0xD7,  // .....C..
                                /* 4480 */  0xF9, 0xD7, 0x43, 0x07, 0x46, 0xFF, 0xFF, 0xA1,  // ..C.F...
                                /* 4488 */  0x83, 0x6B, 0x74, 0x1E, 0x3A, 0xB0, 0x1D, 0xF2,  // .kt.:...
                                /* 4490 */  0x51, 0x1C, 0xCE, 0xA1, 0x83, 0x6D, 0x28, 0x1E,  // Q....m(.
                                /* 4498 */  0x3A, 0x70, 0x1F, 0x1D, 0x3B, 0x23, 0x01, 0xD7,  // :p..;#..
                                /* 44A0 */  0xEB, 0x74, 0xC0, 0x40, 0xE7, 0x19, 0xE6, 0x19,  // .t.@....
                                /* 44A8 */  0x09, 0x7C, 0x4E, 0x04, 0xFC, 0xFF, 0xC7, 0x0E,  // .|N.....
                                /* 44B0 */  0xDC, 0x87, 0x87, 0x39, 0x23, 0x81, 0xF3, 0x8C,  // ...9#...
                                /* 44B8 */  0x0B, 0x56, 0xAD, 0x03, 0xD2, 0xC5, 0xC6, 0x67,  // .V.....g
                                /* 44C0 */  0x5C, 0xB0, 0x81, 0xF9, 0x8C, 0x0B, 0xCC, 0x47,  // \......G
                                /* 44C8 */  0xC7, 0x46, 0x0E, 0xCE, 0x93, 0x8C, 0x81, 0x71,  // .F.....q
                                /* 44D0 */  0x43, 0xF7, 0x88, 0x4F, 0xDB, 0xB7, 0xC2, 0x17,  // C..O....
                                /* 44D8 */  0x4C, 0x23, 0xFC, 0xFF, 0x13, 0x44, 0x89, 0xFE,  // L#...D..
                                /* 44E0 */  0x4A, 0x70, 0x48, 0x67, 0x12, 0x22, 0xDA, 0x0B,  // JpHg."..
                                /* 44E8 */  0x00, 0x43, 0x79, 0xC1, 0x38, 0x8A, 0x47, 0x00,  // .Cy.8.G.
                                /* 44F0 */  0x3E, 0x9E, 0xB0, 0x47, 0x12, 0x22, 0x41, 0x91,  // >..G."A.
                                /* 44F8 */  0x23, 0x45, 0x0F, 0x82, 0x0F, 0x20, 0x5E, 0x74,  // #E... ^t
                                /* 4500 */  0x0F, 0xE2, 0x64, 0xA2, 0x84, 0x3E, 0x26, 0x0F,  // ..d..>&.
                                /* 4508 */  0xF4, 0x1C, 0x23, 0x1C, 0x53, 0xB9, 0x17, 0x05,  // ..#.S...
                                /* 4510 */  0xA2, 0x79, 0x8A, 0x9A, 0x57, 0xD9, 0x40, 0x22,  // .y..W.@"
                                /* 4518 */  0xF0, 0x08, 0xB8, 0x48, 0x2B, 0x20, 0x2C, 0xD6,  // ...H+ ,.
                                /* 4520 */  0x19, 0x41, 0xB2, 0x60, 0x50, 0x1A, 0x40, 0x24,  // .A.`P.@$
                                /* 4528 */  0xE7, 0x30, 0x80, 0x02, 0xF6, 0xB1, 0xE0, 0x44,  // .0.....D
                                /* 4530 */  0xDE, 0xED, 0x7C, 0x16, 0xB0, 0x24, 0x38, 0xD4,  // ..|..$8.
                                /* 4538 */  0x30, 0x3D, 0xB1, 0x67, 0x80, 0xC3, 0x3D, 0x91,  // 0=.g..=.
                                /* 4540 */  0xF3, 0xF7, 0x65, 0x20, 0x24, 0x3B, 0x1E, 0x7B,  // ..e $;.{
                                /* 4548 */  0x28, 0xFC, 0x80, 0xE0, 0x69, 0x9D, 0x94, 0xB5,  // (...i...
                                /* 4550 */  0x23, 0x6A, 0x50, 0x86, 0x49, 0xE0, 0xB3, 0x02,  // #jP.I...
                                /* 4558 */  0x43, 0xE3, 0xD0, 0xD8, 0x61, 0x78, 0xDC, 0xC1,  // C...ax..
                                /* 4560 */  0x0E, 0xE2, 0x30, 0x0E, 0xEF, 0x39, 0x84, 0x4D,  // ..0..9.M
                                /* 4568 */  0xE8, 0x44, 0x0F, 0xF2, 0x8D, 0xA0, 0x78, 0x54,  // .D....xT
                                /* 4570 */  0x61, 0x34, 0x07, 0x45, 0x82, 0x1C, 0x17, 0x40,  // a4.E...@
                                /* 4578 */  0x03, 0xE6, 0x19, 0x3F, 0x18, 0x18, 0x22, 0x16,  // ...?..".
                                /* 4580 */  0x3F, 0x27, 0xC4, 0x08, 0x15, 0xE3, 0xC4, 0xB1,  // ?'......
                                /* 4588 */  0x40, 0xC7, 0x74, 0x34, 0x3E, 0xF5, 0x1B, 0x26,  // @.t4>..&
                                /* 4590 */  0xB2, 0x11, 0x0D, 0x12, 0x31, 0xC2, 0xE9, 0xF9,  // ....1...
                                /* 4598 */  0xEA, 0x6F, 0x4C, 0xDF, 0x20, 0x8C, 0x6E, 0x94,  // .oL. .n.
                                /* 45A0 */  0xB0, 0xF1, 0x1E, 0x20, 0x4C, 0x60, 0x98, 0x83,  // ... L`..
                                /* 45A8 */  0xC2, 0x1C, 0x2D, 0xEC, 0xF9, 0xD6, 0x40, 0x8E,  // ..-...@.
                                /* 45B0 */  0x16, 0xCC, 0x3D, 0xAE, 0x06, 0xE9, 0x21, 0x74,  // ..=...!t
                                /* 45B8 */  0x06, 0x22, 0x98, 0x37, 0x87, 0xFF, 0x7F, 0x5B,  // .".7...[
                                /* 45C0 */  0x68, 0x42, 0xA9, 0x58, 0x80, 0x32, 0x14, 0x8D,  // hB.X.2..
                                /* 45C8 */  0xB2, 0x37, 0x30, 0x01, 0x45, 0x39, 0xCD, 0x30,  // .70.E9.0
                                /* 45D0 */  0xB1, 0xC2, 0x44, 0x89, 0x14, 0x2E, 0x6E, 0x9C,  // ..D...n.
                                /* 45D8 */  0x58, 0xA1, 0xE2, 0x46, 0x3E, 0xDB, 0x28, 0x9E,  // X..F>.(.
                                /* 45E0 */  0x40, 0xFB, 0x83, 0x20, 0x01, 0x1E, 0x30, 0x3A,  // @.. ..0:
                                /* 45E8 */  0x07, 0x38, 0xD2, 0x68, 0x50, 0xA7, 0x06, 0x9F,  // .8.hP...
                                /* 45F0 */  0x0F, 0x7C, 0x36, 0x38, 0xB3, 0xA3, 0x32, 0x6C,  // .|68..2l
                                /* 45F8 */  0x90, 0x63, 0xF1, 0xC9, 0xE1, 0xC1, 0xC0, 0x47,  // .c.....G
                                /* 4600 */  0x00, 0x36, 0x35, 0x9F, 0x46, 0x7C, 0x52, 0xC0,  // .65.F|R.
                                /* 4608 */  0xBB, 0x06, 0xD4, 0x15, 0xE1, 0x01, 0x81, 0x1D,  // ........
                                /* 4610 */  0x46, 0xE0, 0x9F, 0x39, 0xE0, 0x8F, 0xC7, 0x27,  // F..9...'
                                /* 4618 */  0x02, 0xCF, 0xE7, 0x84, 0x13, 0x58, 0xFE, 0x20,  // .....X. 
                                /* 4620 */  0x50, 0x23, 0x33, 0xB4, 0xCF, 0x16, 0xA7, 0xF5,  // P#3.....
                                /* 4628 */  0x4C, 0xE0, 0xC3, 0xC0, 0x61, 0x31, 0xB1, 0x10,  // L...a1..
                                /* 4630 */  0x52, 0x70, 0x56, 0x01, 0xC5, 0x78, 0xE0, 0x8F,  // RpV..x..
                                /* 4638 */  0xFE, 0x79, 0xC3, 0xB7, 0x07, 0xCF, 0xD7, 0x04,  // .y......
                                /* 4640 */  0xC3, 0x9E, 0x85, 0xE8, 0x78, 0xF8, 0x28, 0x7C,  // ....x.(|
                                /* 4648 */  0x3F, 0xE0, 0x04, 0x0E, 0x77, 0xA6, 0x01, 0xD5,  // ?...w...
                                /* 4650 */  0xBF, 0x43, 0x03, 0x03, 0x81, 0xB8, 0x53, 0x05,  // .C....S.
                                /* 4658 */  0x68, 0xE6, 0xF1, 0xFF, 0x7F, 0x81, 0xE0, 0x87,  // h.......
                                /* 4660 */  0x2B, 0xB0, 0x5D, 0x1B, 0x1E, 0x1E, 0x12, 0x38,  // +.]....8
                                /* 4668 */  0xEA, 0xB1, 0x8E, 0x0E, 0x13, 0x77, 0x9B, 0x3C,  // .....w.<
                                /* 4670 */  0x5A, 0x83, 0xBF, 0x09, 0x39, 0xDA, 0x30, 0x41,  // Z...9.0A
                                /* 4678 */  0x75, 0x1C, 0x00, 0xC7, 0x30, 0xC1, 0x33, 0x22,  // u...0.3"
                                /* 4680 */  0x36, 0x87, 0x33, 0xF2, 0x34, 0x7D, 0x6E, 0xF2,  // 6.3.4}n.
                                /* 4688 */  0x30, 0xC1, 0x31, 0x10, 0x1F, 0x9B, 0x3C, 0x4A,  // 0.1...<J
                                /* 4690 */  0xDC, 0xE0, 0x7C, 0x5B, 0x79, 0x1A, 0xF1, 0x54,  // ..|[y..T
                                /* 4698 */  0xDE, 0x8E, 0x3C, 0x4D, 0x46, 0x30, 0xDE, 0x38,  // ..<MF0.8
                                /* 46A0 */  0x41, 0x05, 0xE8, 0x71, 0xC2, 0x17, 0x38, 0x4E,  // A..q..8N
                                /* 46A8 */  0xD0, 0x8C, 0x09, 0x37, 0x51, 0xCC, 0x48, 0xC1,  // ...7Q.H.
                                /* 46B0 */  0x26, 0xE5, 0x05, 0xA1, 0x91, 0xB2, 0xFF, 0xFF,  // &.......
                                /* 46B8 */  0x51, 0x0E, 0x33, 0x18, 0x06, 0xF9, 0xEE, 0x11,  // Q.3.....
                                /* 46C0 */  0x33, 0xF8, 0x69, 0x3D, 0xE9, 0xBC, 0x01, 0xB0,  // 3.i=....
                                /* 46C8 */  0xC1, 0x9C, 0x4F, 0xB4, 0x08, 0xA7, 0xF6, 0x82,  // ..O.....
                                /* 46D0 */  0x72, 0x04, 0xC7, 0xF9, 0x9C, 0xF1, 0xFE, 0xC3,  // r.......
                                /* 46D8 */  0x82, 0x0E, 0x18, 0x54, 0xA0, 0x1E, 0x30, 0xFC,  // ...T..0.
                                /* 46E0 */  0xA9, 0x3D, 0x80, 0x81, 0x67, 0x5C, 0x9E, 0xC3,  // .=..g\..
                                /* 46E8 */  0x93, 0x02, 0x1F, 0x18, 0xE6, 0x12, 0xE7, 0x89,  // ........
                                /* 46F0 */  0xE1, 0x46, 0x0D, 0x36, 0x31, 0xA3, 0x86, 0x76,  // .F.61..v
                                /* 46F8 */  0x2C, 0xC2, 0xE0, 0x9F, 0x4A, 0x94, 0x18, 0xEF,  // ,...J...
                                /* 4700 */  0x4E, 0x9E, 0x56, 0x84, 0xF7, 0x26, 0x4F, 0xD0,  // N.V..&O.
                                /* 4708 */  0x27, 0x19, 0xCC, 0xA1, 0xC3, 0xA3, 0x06, 0x8F,  // '.......
                                /* 4710 */  0x85, 0x51, 0x83, 0xE2, 0x50, 0xE3, 0x73, 0x14,  // .Q..P.s.
                                /* 4718 */  0x98, 0x0E, 0x50, 0x98, 0x91, 0x61, 0x60, 0xCE,  // ..P..a`.
                                /* 4720 */  0x0C, 0x7B, 0x55, 0x61, 0xC3, 0xC6, 0xFC, 0xFF,  // .{Ua....
                                /* 4728 */  0x87, 0x0D, 0x86, 0xF0, 0xE7, 0x1B, 0xF4, 0xE9,  // ........
                                /* 4730 */  0xC8, 0xE7, 0x01, 0x06, 0x1C, 0xE3, 0x59, 0xE0,  // ......Y.
                                /* 4738 */  0x4D, 0xC7, 0x27, 0x82, 0xB7, 0x3B, 0x46, 0xE0,  // M.'..;F.
                                /* 4740 */  0x90, 0x23, 0x06, 0xD5, 0x51, 0xCD, 0x23, 0x86,  // .#..Q.#.
                                /* 4748 */  0x7F, 0x9A, 0xC3, 0x9F, 0x56, 0x60, 0x8F, 0x0A,  // ....V`..
                                /* 4750 */  0x73, 0x6D, 0xF0, 0xAC, 0xD8, 0x39, 0x07, 0xAC,  // sm...9..
                                /* 4758 */  0x02, 0x0F, 0x92, 0x5E, 0x97, 0x8F, 0x2C, 0xA8,  // ...^..,.
                                /* 4760 */  0x91, 0xE0, 0x47, 0x45, 0x40, 0x75, 0x46, 0xF0,  // ..GE@uF.
                                /* 4768 */  0x60, 0xC1, 0xE1, 0xE1, 0xB4, 0x00, 0xD4, 0x06,  // `.......
                                /* 4770 */  0x0C, 0xE3, 0x06, 0x87, 0x99, 0xB0, 0x0F, 0x32,  // .......2
                                /* 4778 */  0xB8, 0x81, 0x61, 0xFE, 0xFF, 0x23, 0xE7, 0x03,  // ..a..#..
                                /* 4780 */  0x3B, 0x92, 0xC7, 0x04, 0xD8, 0xE7, 0x49, 0xF0,  // ;.....I.
                                /* 4788 */  0x09, 0x1B, 0xB6, 0x8E, 0x0F, 0xB8, 0x73, 0xA0,  // ......s.
                                /* 4790 */  0x47, 0x87, 0xBD, 0x56, 0xF8, 0x54, 0xE1, 0x11,  // G..V.T..
                                /* 4798 */  0x3C, 0x9C, 0x78, 0x4E, 0x87, 0x10, 0xA8, 0x77,  // <.xN...w
                                /* 47A0 */  0x18, 0x72, 0xC8, 0xF3, 0xBC, 0x7C, 0x74, 0xF3,  // .r...|t.
                                /* 47A8 */  0x21, 0x17, 0x5C, 0x03, 0xF3, 0x21, 0x17, 0x78,  // !.\..!.x
                                /* 47B0 */  0x1C, 0x04, 0xF0, 0x73, 0xE3, 0x28, 0x07, 0xC7,  // ...s.(..
                                /* 47B8 */  0x51, 0x4E, 0x0E, 0x03, 0xE8, 0xD1, 0xF1, 0x93,  // QN......
                                /* 47C0 */  0x08, 0x3B, 0x4C, 0x80, 0x4F, 0xDA, 0xE0, 0xD1,  // .;L.O...
                                /* 47C8 */  0xE7, 0x11, 0x8F, 0x08, 0x7B, 0x27, 0x38, 0xBE,  // ....{'8.
                                /* 47D0 */  0xB7, 0x25, 0xA3, 0x9C, 0x3C, 0xEC, 0xD1, 0x83,  // .%..<...
                                /* 47D8 */  0xEB, 0xFF, 0x4F, 0xD0, 0xC4, 0xE8, 0x81, 0xDA,  // ..O.....
                                /* 47E0 */  0xE4, 0x30, 0xB3, 0x07, 0xC3, 0xE8, 0x81, 0xC3,  // .0......
                                /* 47E8 */  0x31, 0xC7, 0x23, 0xC2, 0x82, 0x9F, 0xA2, 0x8F,  // 1.#.....
                                /* 47F0 */  0x91, 0x47, 0x83, 0x99, 0x0C, 0x86, 0x60, 0xF4,  // .G....`.
                                /* 47F8 */  0xA1, 0x83, 0x4A, 0xC5, 0xD0, 0x41, 0x31, 0x0A,  // ..J..A1.
                                /* 4800 */  0x0F, 0x1D, 0x9C, 0x33, 0xE3, 0x97, 0x08, 0x98,  // ...3....
                                /* 4808 */  0x13, 0x7B, 0x11, 0x36, 0x78, 0x94, 0xE0, 0x21,  // .{.6x..!
                                /* 4810 */  0x23, 0x1C, 0x75, 0x53, 0xC7, 0x1C, 0xD0, 0xCA,  // #.uS....
                                /* 4818 */  0x1D, 0x3D, 0xF2, 0xFF, 0x7F, 0x2C, 0x81, 0x33,  // .=...,.3
                                /* 4820 */  0x95, 0xE8, 0xAD, 0x0E, 0x4F, 0x43, 0x61, 0xD3,  // ....OCa.
                                /* 4828 */  0x87, 0x75, 0x82, 0x63, 0xE3, 0x07, 0xCF, 0xE8,  // .u.c....
                                /* 4830 */  0x3D, 0x7E, 0xF8, 0x51, 0xC6, 0x0F, 0xDA, 0xB9,  // =~.Q....
                                /* 4838 */  0x31, 0x90, 0x83, 0xE3, 0x27, 0x00, 0x70, 0xC0,  // 1...'.p.
                                /* 4840 */  0x86, 0x3A, 0x81, 0xC7, 0x0A, 0x06, 0xF3, 0x64,  // .:.....d
                                /* 4848 */  0xF1, 0x1C, 0x6C, 0x18, 0x5F, 0x03, 0x7D, 0xDE,  // ..l._.}.
                                /* 4850 */  0xE1, 0x07, 0x81, 0xE7, 0x00, 0x30, 0x0A, 0x3A,  // .....0.:
                                /* 4858 */  0x07, 0xA0, 0x4F, 0x70, 0x30, 0xCE, 0xDE, 0x67,  // ..Op0..g
                                /* 4860 */  0xE6, 0x21, 0x55, 0x88, 0x42, 0xEE, 0x27, 0x70,  // .!U.B.'p
                                /* 4868 */  0xE2, 0x9E, 0x2A, 0x40, 0x75, 0x04, 0xF0, 0x31,  // ..*@u..1
                                /* 4870 */  0x00, 0xFE, 0xE1, 0xFA, 0x31, 0x00, 0xEE, 0xFF,  // ....1...
                                /* 4878 */  0xFF, 0x54, 0x01, 0x77, 0x68, 0xEC, 0x70, 0x02,  // .T.wh.p.
                                /* 4880 */  0x5C, 0x06, 0x0E, 0x8E, 0x69, 0x1D, 0x40, 0x8F,  // \...i.@.
                                /* 4888 */  0x03, 0xD0, 0xC0, 0x81, 0x83, 0x8D, 0x81, 0x03,  // ........
                                /* 4890 */  0xB5, 0x99, 0xB1, 0x79, 0xC3, 0x1D, 0x38, 0x18,  // ...y..8.
                                /* 4898 */  0x4F, 0x5F, 0x3E, 0x51, 0xE2, 0xCE, 0x25, 0x30,  // O_>Q..%0
                                /* 48A0 */  0x6E, 0x40, 0x9E, 0xC8, 0xCB, 0xA6, 0x07, 0x73,  // n@.....s
                                /* 48A8 */  0xAA, 0xBE, 0xA7, 0x79, 0x16, 0x27, 0xE6, 0xBB,  // ...y.'..
                                /* 48B0 */  0xB6, 0x4F, 0xD3, 0x3E, 0x30, 0x81, 0xED, 0xFF,  // .O.>0...
                                /* 48B8 */  0x4F, 0x50, 0xC7, 0xC8, 0x41, 0x71, 0x8A, 0xC7,  // OP..Aq..
                                /* 48C0 */  0x8D, 0x1C, 0xEE, 0xC5, 0x93, 0xCD, 0xE1, 0xD8,  // ........
                                /* 48C8 */  0x61, 0xCC, 0x0E, 0x3F, 0x11, 0x1F, 0x2D, 0x3D,  // a..?..-=
                                /* 48D0 */  0x3D, 0xDC, 0x11, 0x17, 0x8C, 0x32, 0x4F, 0xA7,  // =....2O.
                                /* 48D8 */  0x20, 0x18, 0x3C, 0x9C, 0x23, 0x0E, 0x56, 0xC4,  //  .<.#.V.
                                /* 48E0 */  0x11, 0x07, 0x54, 0x3E, 0xC6, 0x0E, 0x8A, 0x18,  // ..T>....
                                /* 48E8 */  0x87, 0x08, 0x10, 0x1D, 0x20, 0x7C, 0xBD, 0xF1,  // .... |..
                                /* 48F0 */  0xDC, 0xC1, 0x33, 0x3C, 0xCC, 0xD8, 0x5E, 0x75,  // ..3<..^u
                                /* 48F8 */  0xDF, 0x13, 0xA3, 0xBC, 0xA5, 0x1A, 0xF1, 0x04,  // ........
                                /* 4900 */  0x3C, 0x06, 0xEE, 0x73, 0x1C, 0x9A, 0x41, 0xF3,  // <..s..A.
                                /* 4908 */  0xF7, 0x1B, 0x72, 0x06, 0x00, 0xC7, 0xFF, 0xFF,  // ..r.....
                                /* 4910 */  0x0C, 0x80, 0x09, 0x0E, 0x21, 0x25, 0xC7, 0x6D,  // ....!%.m
                                /* 4918 */  0xB4, 0xD2, 0xF1, 0x91, 0x21, 0xF9, 0xE2, 0xEF,  // ....!...
                                /* 4920 */  0x91, 0xB2, 0x83, 0x2A, 0xB8, 0x46, 0xE3, 0x83,  // ...*.F..
                                /* 4928 */  0x2A, 0xF0, 0x18, 0x13, 0x7E, 0xB6, 0x1E, 0x0B,  // *...~...
                                /* 4930 */  0x1B, 0x2B, 0x3B, 0x58, 0x82, 0x4F, 0x3E, 0x30,  // .+;X.O>0
                                /* 4938 */  0x7A, 0xB4, 0x3E, 0xCD, 0x44, 0x08, 0xFE, 0x28,  // z.>.D..(
                                /* 4940 */  0xF0, 0xB8, 0xF3, 0x7A, 0x17, 0xE1, 0x41, 0x42,  // ...z..AB
                                /* 4948 */  0xE8, 0xBA, 0x0A, 0x3C, 0x05, 0xD4, 0x0A, 0x21,  // ...<...!
                                /* 4950 */  0xB4, 0x83, 0x89, 0xF3, 0xE2, 0x19, 0xEE, 0x51,  // .......Q
                                /* 4958 */  0x20, 0xD8, 0x61, 0x04, 0x8A, 0x15, 0x26, 0x4A,  //  .a...&J
                                /* 4960 */  0x9C, 0x58, 0x61, 0x8E, 0x25, 0x68, 0x44, 0x83,  // .Xa.%hD.
                                /* 4968 */  0x44, 0x8C, 0x10, 0xE9, 0xDC, 0xA2, 0x1B, 0xD3,  // D.......
                                /* 4970 */  0x23, 0x0A, 0x1F, 0xDD, 0x78, 0x06, 0x8E, 0x14,  // #...x...
                                /* 4978 */  0xE2, 0x68, 0x61, 0x8C, 0x87, 0x23, 0xBF, 0x58,  // .ha..#.X
                                /* 4980 */  0x19, 0xF6, 0x78, 0x9E, 0x87, 0x3C, 0xA5, 0xC3,  // ..x..<..
                                /* 4988 */  0xF3, 0xB9, 0xC3, 0x08, 0x87, 0xF7, 0x68, 0x73,  // ......hs
                                /* 4990 */  0xB4, 0x8F, 0x0E, 0xB8, 0xF3, 0x05, 0x19, 0x01,  // ........
                                /* 4998 */  0xCD, 0xF6, 0xAE, 0xF3, 0x28, 0x7D, 0xC6, 0x90,  // ....(}..
                                /* 49A0 */  0xBC, 0x57, 0x01, 0x85, 0xF1, 0x41, 0xD8, 0x87,  // .W...A..
                                /* 49A8 */  0x63, 0x1F, 0x08, 0x38, 0xB0, 0x8F, 0x06, 0x27,  // c..8...'
                                /* 49B0 */  0x72, 0x66, 0xCF, 0x03, 0x4C, 0x92, 0x80, 0xFF,  // rf..L...
                                /* 49B8 */  0x3F, 0x1C, 0x66, 0xC4, 0x9E, 0xD8, 0xEB, 0xC3,  // ?.f.....
                                /* 49C0 */  0x0B, 0x97, 0xAF, 0x08, 0xBE, 0x10, 0x84, 0x64,  // .......d
                                /* 49C8 */  0x27, 0x1A, 0x1F, 0x5F, 0x71, 0xD3, 0x3A, 0x29,  // '.._q.:)
                                /* 49D0 */  0xDF, 0x27, 0xD8, 0x51, 0x9C, 0x9F, 0x17, 0x18,  // .'.Q....
                                /* 49D8 */  0x1A, 0x87, 0xC6, 0x0E, 0xC3, 0xE7, 0x4F, 0x0F,  // ......O.
                                /* 49E0 */  0xE2, 0x9D, 0xD6, 0x67, 0x58, 0x36, 0xA1, 0x13,  // ...gX6..
                                /* 49E8 */  0x3D, 0xC8, 0x97, 0x83, 0x47, 0xF4, 0xA8, 0x31,  // =...G..1
                                /* 49F0 */  0x9A, 0x83, 0x22, 0x82, 0x8F, 0x0C, 0xA0, 0x39,  // .."....9
                                /* 49F8 */  0x15, 0x60, 0xE7, 0xEE, 0x8B, 0x80, 0x0F, 0x03,  // .`......
                                /* 4A00 */  0x8F, 0x0A, 0x71, 0xD8, 0x45, 0xE0, 0x3D, 0xE0,  // ..q.E.=.
                                /* 4A08 */  0x65, 0xC0, 0x07, 0x87, 0xF0, 0x07, 0x73, 0x34,  // e.....s4
                                /* 4A10 */  0x6F, 0xDC, 0x26, 0xF0, 0x09, 0x07, 0x77, 0xA4,  // o.&...w.
                                /* 4A18 */  0xF0, 0x15, 0xF5, 0xA5, 0xC1, 0x47, 0x0A, 0xE6,  // .....G..
                                /* 4A20 */  0x7E, 0x46, 0x3A, 0x11, 0x3D, 0x36, 0xC4, 0xE8,  // ~F:.=6..
                                /* 4A28 */  0xED, 0x22, 0x20, 0xF0, 0xD3, 0x69, 0x0B, 0x46,  // ." ..i.F
                                /* 4A30 */  0x70, 0x8F, 0x1D, 0xB1, 0xA2, 0x1C, 0x59, 0xB4,  // p.....Y.
                                /* 4A38 */  0xB7, 0x87, 0x17, 0xA3, 0x28, 0x81, 0x0E, 0x22,  // ....(.."
                                /* 4A40 */  0x4C, 0x3C, 0x43, 0x45, 0x09, 0xF1, 0x50, 0x60,  // L<CE..P`
                                /* 4A48 */  0xD0, 0x20, 0xF1, 0x5A, 0xBB, 0x65, 0x90, 0x29,  // . .Z.e.)
                                /* 4A50 */  0xB6, 0x3F, 0x08, 0x12, 0xF0, 0x14, 0x43, 0x23,  // .?....C#
                                /* 4A58 */  0x8D, 0x06, 0x75, 0xFE, 0xE6, 0xE7, 0x81, 0x33,  // ..u....3
                                /* 4A60 */  0x3C, 0xA9, 0xC7, 0x0B, 0x83, 0x9C, 0x8A, 0xC7,  // <.......
                                /* 4A68 */  0xF8, 0x30, 0xE0, 0x61, 0xB3, 0x5B, 0x82, 0xFF,  // .0.a.[..
                                /* 4A70 */  0x07, 0x3E, 0x1D, 0xE0, 0xAF, 0x8D, 0x01, 0x5F,  // .>....._
                                /* 4A78 */  0x0B, 0x1E, 0x0A, 0xD8, 0x21, 0x04, 0xFE, 0x91,  // ....!...
                                /* 4A80 */  0x03, 0xFE, 0x78, 0x7C, 0x0A, 0xF0, 0xE9, 0x9E,  // ..x|....
                                /* 4A88 */  0xFD, 0xFF, 0x8F, 0x1C, 0x6C, 0x10, 0x7C, 0x64,  // ....l.|d
                                /* 4A90 */  0x86, 0xF6, 0x79, 0xE2, 0xB4, 0x5E, 0x06, 0x7C,  // ..y..^.|
                                /* 4A98 */  0x15, 0x31, 0x81, 0x4F, 0xD5, 0x56, 0x70, 0x46,  // .1.O.VpF
                                /* 4AA0 */  0x01, 0xC5, 0x78, 0xE0, 0x5F, 0x03, 0x9F, 0x31,  // ..x._..1
                                /* 4AA8 */  0x7C, 0x63, 0xF0, 0x7C, 0x7D, 0x86, 0xF0, 0x89,  // |c.|}...
                                /* 4AB0 */  0x04, 0x7C, 0x87, 0x05, 0x98, 0x04, 0x3E, 0x86,  // .|....>.
                                /* 4AB8 */  0x00, 0x0F, 0xCD, 0x4F, 0x73, 0x1D, 0x09, 0x9C,  // ...Os...
                                /* 4AC0 */  0x75, 0xB5, 0xB2, 0x71, 0x62, 0xA7, 0x67, 0x0F,  // u..qb.g.
                                /* 4AC8 */  0xEB, 0x00, 0xD2, 0x84, 0xD8, 0x28, 0x5E, 0x86,  // .....(^.
                                /* 4AD0 */  0x62, 0x3F, 0xDC, 0x79, 0x3C, 0x07, 0x11, 0xE3,  // b?.y<...
                                /* 4AD8 */  0x34, 0x5E, 0x12, 0x7C, 0x36, 0xF2, 0x5D, 0xC2,  // 4^.|6.].
                                /* 4AE0 */  0xA9, 0x0F, 0x0C, 0x62, 0xD0, 0xE8, 0x49, 0x5E,  // ...b..I^
                                /* 4AE8 */  0x12, 0x65, 0x1E, 0x13, 0x1D, 0x82, 0x53, 0x42,  // .e....SB
                                /* 4AF0 */  0x08, 0xCE, 0x20, 0x06, 0x74, 0x04, 0x08, 0x9D,  // .. .t...
                                /* 4AF8 */  0xB0, 0x70, 0x5F, 0x14, 0x1F, 0x1A, 0x4E, 0xEB,  // .p_...N.
                                /* 4B00 */  0xAC, 0x3C, 0x25, 0x5D, 0x1A, 0xE8, 0x1C, 0x7D,  // .<%]...}
                                /* 4B08 */  0x1D, 0xE0, 0xB7, 0x14, 0x1F, 0x10, 0x0C, 0x6C,  // .......l
                                /* 4B10 */  0x35, 0x37, 0x22, 0x14, 0x98, 0x0F, 0x03, 0xA7,  // 57".....
                                /* 4B18 */  0xCC, 0xCE, 0x4B, 0xE0, 0xF9, 0xFF, 0x9F, 0x97,  // ..K.....
                                /* 4B20 */  0x98, 0xBE, 0x23, 0x01, 0x28, 0x80, 0x3C, 0x7F,  // ..#.(.<.
                                /* 4B28 */  0x5F, 0x07, 0x9E, 0x01, 0xD8, 0x14, 0xDE, 0x74,  // _......t
                                /* 4B30 */  0x8C, 0x66, 0x74, 0x7E, 0x07, 0xF6, 0x4C, 0x79,  // .ft~..Ly
                                /* 4B38 */  0xD8, 0x99, 0x52, 0x10, 0xCF, 0xD4, 0x41, 0x66,  // ..R...Af
                                /* 4B40 */  0x8A, 0x9E, 0x89, 0x47, 0x8F, 0xBD, 0x98, 0xB0,  // ...G....
                                /* 4B48 */  0xFB, 0x06, 0x9C, 0x31, 0x47, 0x7C, 0x2C, 0xF0,  // ...1G|,.
                                /* 4B50 */  0x34, 0x0C, 0xE7, 0xC1, 0x72, 0x38, 0x0F, 0x96,  // 4...r8..
                                /* 4B58 */  0x8F, 0xC5, 0x93, 0x05, 0xD7, 0x9D, 0x1F, 0x37,  // .......7
                                /* 4B60 */  0x59, 0x30, 0xC2, 0x63, 0xA2, 0x0D, 0x8A, 0x8E,  // Y0.c....
                                /* 4B68 */  0xC7, 0xC3, 0xE2, 0x67, 0x03, 0x5F, 0x7A, 0x18,  // ...g._z.
                                /* 4B70 */  0xF6, 0x93, 0x83, 0x4F, 0xDC, 0xBE, 0x23, 0xBC,  // ...O..#.
                                /* 4B78 */  0x74, 0xB1, 0xA1, 0xF1, 0x81, 0x72, 0x58, 0xA3,  // t....rX.
                                /* 4B80 */  0xBD, 0xAB, 0xF9, 0xD6, 0xE1, 0x23, 0x8B, 0x27,  // .....#.'
                                /* 4B88 */  0xE6, 0xB3, 0x18, 0x1B, 0xAC, 0x47, 0xF3, 0xD6,  // .....G..
                                /* 4B90 */  0x03, 0x96, 0x3B, 0x05, 0xFB, 0x5A, 0x9C, 0x8C,  // ..;..Z..
                                /* 4B98 */  0xEF, 0x0F, 0x06, 0x7C, 0x78, 0x79, 0x67, 0xF3,  // ...|xyg.
                                /* 4BA0 */  0x20, 0xDF, 0xC8, 0x7D, 0x14, 0xC0, 0xBC, 0x31,  //  ..}...1
                                /* 4BA8 */  0x2C, 0xFF, 0x96, 0x81, 0xFA, 0xFF, 0xDF, 0x32,  // ,......2
                                /* 4BB0 */  0x1C, 0x6D, 0x55, 0xBA, 0x65, 0x70, 0xD8, 0xB7,  // .mU.ep..
                                /* 4BB8 */  0x0C, 0x98, 0x41, 0x6E, 0x19, 0x14, 0xC2, 0x11,  // ..An....
                                /* 4BC0 */  0x28, 0x14, 0x00, 0x42, 0x87, 0x05, 0x2E, 0x19,  // (..B....
                                /* 4BC8 */  0x8E, 0x82, 0x78, 0xC8, 0xBE, 0xF1, 0xF9, 0xB0,  // ..x.....
                                /* 4BD0 */  0x80, 0xBB, 0xBB, 0xF8, 0x96, 0x81, 0x39, 0x2B,  // ......9+
                                /* 4BD8 */  0xC0, 0x3C, 0x66, 0xB0, 0xB3, 0x02, 0xEC, 0x7B,  // .<f....{
                                /* 4BE0 */  0x06, 0xF8, 0xCE, 0x13, 0xE0, 0x1E, 0x14, 0x38,  // .......8
                                /* 4BE8 */  0xCE, 0x13, 0x80, 0xA7, 0x23, 0x89, 0xCF, 0x13,  // ....#...
                                /* 4BF0 */  0xF8, 0xFF, 0xFF, 0x79, 0x02, 0x38, 0x9C, 0x1E,  // ...y.8..
                                /* 4BF8 */  0xD8, 0x79, 0x02, 0x2C, 0x32, 0xCE, 0x13, 0x28,  // .y.,2..(
                                /* 4C00 */  0x0E, 0x8B, 0x3C, 0x4F, 0x40, 0xBC, 0x27, 0xF2,  // ..<O@.'.
                                /* 4C08 */  0xAB, 0xA4, 0x8E, 0x13, 0x28, 0x39, 0x14, 0x12,  // ....(9..
                                /* 4C10 */  0x73, 0x9C, 0x40, 0xC5, 0x07, 0xA3, 0x20, 0x1E,  // s.@... .
                                /* 4C18 */  0xA8, 0x47, 0x6D, 0x23, 0x03, 0xA1, 0x90, 0x1E,  // .Gm#....
                                /* 4C20 */  0x9E, 0x07, 0xC2, 0x87, 0xE1, 0x59, 0x60, 0x08,  // .....Y`.
                                /* 4C28 */  0x86, 0xB8, 0x62, 0xD2, 0xD3, 0x02, 0xB8, 0x86,  // ..b.....
                                /* 4C30 */  0x10, 0xFE, 0xED, 0xEE, 0x7D, 0x93, 0x1D, 0x2C,  // ....}..,
                                /* 4C38 */  0xC0, 0x7D, 0x7B, 0x7C, 0x79, 0x34, 0xD0, 0x43,  // .}{|y4.C
                                /* 4C40 */  0x03, 0x70, 0x09, 0x76, 0x68, 0x00, 0x1D, 0xA4,  // .p.vh...
                                /* 4C48 */  0xFF, 0xFF, 0x87, 0x06, 0x70, 0xDD, 0xCD, 0x70,  // ....p..p
                                /* 4C50 */  0x87, 0x06, 0xF0, 0x1E, 0x08, 0xF8, 0xC7, 0xC0,  // ........
                                /* 4C58 */  0xF1, 0xED, 0x8C, 0x81, 0x89, 0x7F, 0x20, 0x48,  // ...... H
                                /* 4C60 */  0xDA, 0xE2, 0x28, 0x8C, 0x6F, 0x97, 0x80, 0xAB,  // ..(.o...
                                /* 4C68 */  0xFB, 0x3B, 0x78, 0x6E, 0x78, 0x58, 0x88, 0xB7,  // .;xnxX..
                                /* 4C70 */  0x3B, 0x5F, 0x10, 0x7C, 0xBA, 0x84, 0x7B, 0xB9,  // ;_.|..{.
                                /* 4C78 */  0x84, 0x0D, 0x12, 0xF6, 0xA9, 0x32, 0xEC, 0x0B,  // .....2..
                                /* 4C80 */  0x44, 0x84, 0x73, 0x7A, 0xA0, 0x7C, 0xAA, 0x7C,  // D.sz.|.|
                                /* 4C88 */  0xB6, 0x8C, 0x63, 0xAC, 0xF7, 0x4A, 0x5F, 0x2A,  // ..c..J_*
                                /* 4C90 */  0x9F, 0x05, 0xE3, 0x44, 0x79, 0xB8, 0xF4, 0x09,  // ...Dy...
                                /* 4C98 */  0xEE, 0x2D, 0xF3, 0x21, 0xD3, 0x93, 0x0B, 0x7C,  // .-.!...|
                                /* 4CA0 */  0x5E, 0x41, 0x22, 0xC4, 0x0C, 0x13, 0xF4, 0x04,  // ^A".....
                                /* 4CA8 */  0x22, 0xFF, 0xFF, 0x63, 0xBE, 0x5C, 0xB2, 0x78,  // "..c.\.x
                                /* 4CB0 */  0x97, 0x4B, 0x80, 0x26, 0x47, 0x84, 0x97, 0x4B,  // .K.&G..K
                                /* 4CB8 */  0xF0, 0x9D, 0x15, 0xE0, 0xDD, 0x2D, 0x81, 0x49,  // .....-.I
                                /* 4CC0 */  0xB4, 0x17, 0xA3, 0xC6, 0x69, 0xE1, 0xE7, 0x20,  // ....i.. 
                                /* 4CC8 */  0xD4, 0xA1, 0xC0, 0xC1, 0x4E, 0x09, 0x3A, 0xB6,  // ....N.:.
                                /* 4CD0 */  0xB1, 0x5B, 0x85, 0xCF, 0x1B, 0xBE, 0x1F, 0x78,  // .[.....x
                                /* 4CD8 */  0x40, 0x8F, 0x05, 0xCF, 0xF1, 0x26, 0x18, 0x05,  // @....&..
                                /* 4CE0 */  0x50, 0xFF, 0xFF, 0x63, 0x10, 0x0F, 0x41, 0xA1,  // P..c..A.
                                /* 4CE8 */  0x53, 0x9A, 0x8F, 0x41, 0x5C, 0x34, 0x1C, 0x05,  // S..A\4..
                                /* 4CF0 */  0xF1, 0x41, 0xC1, 0x27, 0x30, 0x38, 0xD3, 0x3A,  // .A.'08.:
                                /* 4CF8 */  0x84, 0x33, 0x3A, 0x08, 0xCC, 0x01, 0x11, 0xDC,  // .3:.....
                                /* 4D00 */  0xA7, 0x34, 0xE0, 0x30, 0xD6, 0x83, 0x02, 0x26,  // .4.0...&
                                /* 4D08 */  0xA7, 0x34, 0xE0, 0x1D, 0xEB, 0x10, 0x09, 0xF4,  // .4......
                                /* 4D10 */  0x0E, 0x18, 0x38, 0x58, 0xFF, 0xFF, 0x0F, 0x91,  // ..8X....
                                /* 4D18 */  0xF0, 0xAF, 0x0F, 0x38, 0x9C, 0xE7, 0x00, 0xFE,  // ...8....
                                /* 4D20 */  0x92, 0xA0, 0x87, 0x09, 0xD4, 0x88, 0x2C, 0xEC,  // ......,.
                                /* 4D28 */  0x30, 0x81, 0x18, 0xE5, 0x71, 0x07, 0x8D, 0xF0,  // 0...q...
                                /* 4D30 */  0xBC, 0x64, 0x9C, 0xD8, 0x27, 0xF7, 0x34, 0xE4,  // .d..'.4.
                                /* 4D38 */  0x39, 0x3D, 0x03, 0x79, 0x84, 0x6F, 0x8C, 0x5C,  // 9=.y.o.\
                                /* 4D40 */  0xC2, 0x81, 0x02, 0x15, 0xFE, 0x00, 0x0B, 0x0A,  // ........
                                /* 4D48 */  0x27, 0x87, 0x48, 0xA8, 0x63, 0x79, 0x9E, 0x00,  // '.H.cy..
                                /* 4D50 */  0xFB, 0x91, 0x05, 0xFE, 0x59, 0x81, 0x5F, 0x7E,  // ....Y._~
                                /* 4D58 */  0x9E, 0x80, 0x12, 0xF8, 0xB0, 0x00, 0x3C, 0xE2,  // ......<.
                                /* 4D60 */  0x9D, 0x10, 0x81, 0xDE, 0xC1, 0x0A, 0xFE, 0xFF,  // ........
                                /* 4D68 */  0xFF, 0xB0, 0x80, 0x3F, 0x1B, 0x60, 0x4F, 0x68,  // ...?.`Oh
                                /* 4D70 */  0x3E, 0x09, 0xB0, 0x2B, 0x22, 0x8C, 0x03, 0x82,  // >..+"...
                                /* 4D78 */  0x0E, 0x0C, 0x68, 0x69, 0x07, 0x06, 0xC4, 0x8C,  // ..hi....
                                /* 4D80 */  0x63, 0x1A, 0x24, 0xFC, 0x21, 0x9C, 0x00, 0x1F,  // c.$.!...
                                /* 4D88 */  0xF1, 0x33, 0xD0, 0xB9, 0x1C, 0x45, 0x88, 0x60,  // .3...E.`
                                /* 4D90 */  0xAF, 0x4D, 0x1E, 0x96, 0x0E, 0x0C, 0xA8, 0x03,  // .M......
                                /* 4D98 */  0xA2, 0x4F, 0x0C, 0x3E, 0x30, 0xF0, 0xB8, 0x60,  // .O.>0..`
                                /* 4DA0 */  0x14, 0xC4, 0xA3, 0x75, 0x94, 0x03, 0x03, 0xFA,  // ...u....
                                /* 4DA8 */  0xB4, 0xC4, 0x26, 0x81, 0x3D, 0x31, 0x00, 0x9E,  // ..&.=1..
                                /* 4DB0 */  0x8F, 0x87, 0xE0, 0x3B, 0x31, 0xC0, 0xFD, 0xFF,  // ...;1...
                                /* 4DB8 */  0x9F, 0x18, 0xE0, 0xDC, 0x0F, 0x70, 0x17, 0x06,  // .....p..
                                /* 4DC0 */  0xDC, 0x61, 0x80, 0x23, 0xFB, 0x92, 0xE8, 0x13,  // .a.#....
                                /* 4DC8 */  0x0B, 0xFE, 0x00, 0xE0, 0x13, 0x83, 0x8F, 0xA8,  // ........
                                /* 4DD0 */  0x7C, 0x08, 0xB8, 0xF3, 0x96, 0x87, 0xC0, 0x6E,  // |......n
                                /* 4DD8 */  0xD1, 0xF8, 0x23, 0x0B, 0x18, 0xCF, 0xC8, 0xC0,  // ..#.....
                                /* 4DE0 */  0xED, 0x48, 0x05, 0xBE, 0x13, 0x03, 0xF0, 0x08,  // .H......
                                /* 4DE8 */  0x77, 0x62, 0x00, 0xDD, 0xD9, 0xD0, 0x27, 0x06,  // wb....'.
                                /* 4DF0 */  0x70, 0x1D, 0xFA, 0x7C, 0x62, 0x80, 0xF3, 0xFF,  // p..|b...
                                /* 4DF8 */  0x3F, 0x9F, 0xC2, 0x3B, 0x31, 0xC0, 0xBB, 0xB1,  // ?..;1...
                                /* 4E00 */  0xE0, 0x65, 0x1D, 0x18, 0x50, 0x17, 0x00, 0xCB,  // .e..P...
                                /* 4E08 */  0x3C, 0xB1, 0x20, 0x46, 0x7B, 0xC2, 0x41, 0x5E,  // <. F{.A^
                                /* 4E10 */  0x0E, 0x4F, 0x83, 0x1D, 0x92, 0x7D, 0x85, 0xC2,  // .O...}..
                                /* 4E18 */  0x9C, 0x18, 0x7C, 0x71, 0xC2, 0x01, 0xD5, 0x78,  // ..|q...x
                                /* 4E20 */  0x11, 0x24, 0xC3, 0xF0, 0xC5, 0xD0, 0xE7, 0x16,  // .$......
                                /* 4E28 */  0x60, 0x70, 0x6A, 0xC0, 0x9F, 0x5B, 0x00, 0x6F,  // `pj..[.o
                                /* 4E30 */  0x31, 0x8F, 0x0D, 0xA0, 0xB3, 0x70, 0x6C, 0x00,  // 1....pl.
                                /* 4E38 */  0xDD, 0xFF, 0xFF, 0x24, 0x8B, 0x3B, 0xB4, 0x81,  // ...$.;..
                                /* 4E40 */  0xF1, 0x86, 0x80, 0x05, 0x7A, 0x43, 0xC0, 0xDE,  // ....zC..
                                /* 4E48 */  0x1D, 0xB0, 0x04, 0xE5, 0x9D, 0x1D, 0x50, 0xE7,  // ......P.
                                /* 4E50 */  0x4D, 0x9F, 0x1D, 0x70, 0xF7, 0x06, 0xEC, 0x7D,  // M..p...}
                                /* 4E58 */  0xC2, 0x13, 0x38, 0x02, 0xCF, 0xCD, 0x77, 0x07,  // ..8...w.
                                /* 4E60 */  0x30, 0x9C, 0xE1, 0x80, 0xC1, 0x24, 0x1E, 0x87,  // 0....$..
                                /* 4E68 */  0x7D, 0x90, 0x65, 0x67, 0x07, 0xC0, 0xDB, 0xA1,  // }.eg....
                                /* 4E70 */  0xC3, 0x67, 0x07, 0x70, 0x1D, 0xC5, 0xFD, 0xFF,  // .g.p....
                                /* 4E78 */  0x3F, 0x3B, 0x80, 0xEB, 0x38, 0xEC, 0xB3, 0x03,  // ?;..8...
                                /* 4E80 */  0x98, 0x4F, 0x09, 0xD8, 0xF3, 0x03, 0xF8, 0xE2,  // .O......
                                /* 4E88 */  0x2D, 0x52, 0xE7, 0x07, 0x5C, 0xBC, 0x27, 0x82,  // -R..\.'.
                                /* 4E90 */  0x8E, 0x52, 0xFC, 0xFC, 0x00, 0x7E, 0xE9, 0x63,  // .R...~.c
                                /* 4E98 */  0xD0, 0xC1, 0xC1, 0xE7, 0x06, 0x8B, 0xA6, 0xD0,  // ........
                                /* 4EA0 */  0x89, 0xDE, 0xE7, 0x07, 0x2E, 0xF7, 0x18, 0x41,  // .......A
                                /* 4EA8 */  0x41, 0x7C, 0xE4, 0x85, 0xA3, 0xE5, 0xFC, 0x40,  // A|.....@
                                /* 4EB0 */  0xC6, 0xF0, 0xDA, 0xED, 0x09, 0xF3, 0x33, 0x03,  // ......3.
                                /* 4EB8 */  0x3B, 0x19, 0x47, 0x66, 0x53, 0xF7, 0x45, 0x80,  // ;.GfS.E.
                                /* 4EC0 */  0x5F, 0x06, 0x7C, 0xA3, 0x62, 0xE8, 0x5F, 0xC7,  // _.|.b._.
                                /* 4EC8 */  0xBA, 0x19, 0x20, 0xC0, 0x7C, 0x81, 0xC0, 0x1C,  // .. .|...
                                /* 4ED0 */  0xA8, 0xC0, 0x95, 0x61, 0x50, 0xE8, 0x33, 0x86,  // ...aP.3.
                                /* 4ED8 */  0xC7, 0xFC, 0x7C, 0x68, 0xCC, 0xF3, 0xF4, 0x8C,  // ..|h....
                                /* 4EE0 */  0xE0, 0xFF, 0xFF, 0x67, 0x04, 0xEB, 0xBE, 0x0B,  // ...g....
                                /* 4EE8 */  0x3E, 0x7D, 0x17, 0x0C, 0x90, 0xA3, 0xF3, 0xD8,  // >}......
                                /* 4EF0 */  0xA7, 0x13, 0x54, 0xD0, 0x19, 0x51, 0x10, 0x1F,  // ..T..Q..
                                /* 4EF8 */  0x0B, 0x1C, 0x62, 0xA8, 0x68, 0x68, 0x1F, 0x10,  // ..b.hh..
                                /* 4F00 */  0x7C, 0x28, 0xF1, 0x51, 0x19, 0xDC, 0x87, 0x50,  // |(.Q...P
                                /* 4F08 */  0x7E, 0x58, 0x03, 0xBE, 0x63, 0xF5, 0xD9, 0x04,  // ~X..c...
                                /* 4F10 */  0x5C, 0x1E, 0xCE, 0x26, 0xA0, 0x8B, 0x71, 0x36,  // \..&..q6
                                /* 4F18 */  0x01, 0xCD, 0xFF, 0xFF, 0xB0, 0xC6, 0xCF, 0x26,  // .......&
                                /* 4F20 */  0x60, 0x07, 0x35, 0xD0, 0x7B, 0xE3, 0x31, 0xD9,  // `.5.{.1.
                                /* 4F28 */  0xD7, 0x88, 0x34, 0x84, 0x63, 0x79, 0xA2, 0x30,  // ..4.cy.0
                                /* 4F30 */  0xD2, 0x13, 0x85, 0x25, 0x1D, 0x97, 0x50, 0x07,  // ...%..P.
                                /* 4F38 */  0x00, 0x8B, 0x3C, 0x2E, 0xA1, 0xEE, 0x25, 0xF8,  // ..<...%.
                                /* 4F40 */  0xD3, 0x1B, 0x4E, 0x2D, 0x06, 0x39, 0xA5, 0x58,  // ..N-.9.X
                                /* 4F48 */  0xEB, 0xA9, 0x96, 0x8C, 0xE2, 0xEC, 0xF8, 0xC1,  // ........
                                /* 4F50 */  0x0D, 0x18, 0x4C, 0x02, 0x7F, 0x5A, 0x02, 0xBC,  // ..L..Z..
                                /* 4F58 */  0x85, 0x3C, 0x42, 0x80, 0x0E, 0xDC, 0x47, 0x08,  // .<B...G.
                                /* 4F60 */  0xDC, 0xFF, 0xFF, 0x08, 0x01, 0x1F, 0xFE, 0x69,  // .......i
                                /* 4F68 */  0x09, 0x6C, 0x57, 0x07, 0xFC, 0x21, 0x01, 0xA7,  // .lW..!..
                                /* 4F70 */  0xFE, 0x90, 0x40, 0xB1, 0x1E, 0x12, 0x60, 0x1C,  // ..@...`.
                                /* 4F78 */  0x61, 0xE1, 0x8E, 0xE6, 0x3C, 0x0E, 0xB9, 0xD5,  // a...<...
                                /* 4F80 */  0x13, 0x24, 0x94, 0x23, 0x2C, 0xC0, 0xA0, 0xFF,  // .$.#,...
                                /* 4F88 */  0xBF, 0x89, 0x23, 0x2C, 0xD0, 0x3B, 0x1F, 0xF0,  // ..#,.;..
                                /* 4F90 */  0xEB, 0x23, 0x8C, 0xB3, 0x00, 0x36, 0xFE, 0xBB,  // .#...6..
                                /* 4F98 */  0x40, 0x07, 0x06, 0x9C, 0xB8, 0x73, 0x23, 0xF2,  // @....s#.
                                /* 4FA0 */  0xC0, 0x00, 0x0B, 0xE7, 0x5D, 0xC0, 0x67, 0x88,  // ....].g.
                                /* 4FA8 */  0xA7, 0x01, 0x7E, 0x6A, 0x01, 0xFF, 0x50, 0x30,  // ..~j..P0
                                /* 4FB0 */  0x93, 0x60, 0xA7, 0x16, 0xC0, 0x5B, 0xB0, 0x13,  // .`...[..
                                /* 4FB8 */  0x03, 0xA8, 0xFE, 0xFF, 0xC7, 0x04, 0xAB, 0x38,  // .......8
                                /* 4FC0 */  0x31, 0x80, 0x6E, 0x40, 0x8F, 0x8C, 0xE0, 0x3B,  // 1.n@...;
                                /* 4FC8 */  0x31, 0xC0, 0x1A, 0x3B, 0x0F, 0x7F, 0x5E, 0x40,  // 1..;..^@
                                /* 4FD0 */  0x49, 0x3A, 0x2F, 0xA0, 0x67, 0x7A, 0xBE, 0x27,  // I:/.gz.'
                                /* 4FD8 */  0x6B, 0xD4, 0x87, 0x15, 0x18, 0x52, 0x0E, 0x0B,  // k....R..
                                /* 4FE0 */  0xA8, 0xF3, 0x82, 0x0F, 0x2C, 0x3E, 0x2C, 0xF0,  // ....,>,.
                                /* 4FE8 */  0xD0, 0x60, 0x14, 0xC4, 0x87, 0x05, 0x07, 0x82,  // .`......
                                /* 4FF0 */  0x90, 0x92, 0xC3, 0x02, 0xEA, 0x78, 0xE0, 0x71,  // .....x.q
                                /* 4FF8 */  0xC0, 0x3D, 0x2F, 0x00, 0x4F, 0x63, 0x02, 0xB4,  // .=/.Oc..
                                /* 5000 */  0x9D, 0x17, 0x80, 0x4C, 0xAC, 0xF3, 0x02, 0xE8,  // ...L....
                                /* 5008 */  0xFE, 0xFF, 0xE3, 0xF4, 0x79, 0x01, 0x5C, 0x73,  // ....y.\s
                                /* 5010 */  0x7A, 0x5E, 0x00, 0xDB, 0x49, 0x00, 0x73, 0x5A,  // z^..I.sZ
                                /* 5018 */  0x81, 0x3D, 0x22, 0x0B, 0x3B, 0x2D, 0x41, 0x9A,  // .=".;-A.
                                /* 5020 */  0xDE, 0xC1, 0x3D, 0xC4, 0x79, 0x1E, 0x4F, 0x4F,  // ..=.y.OO
                                /* 5028 */  0x06, 0x7A, 0xA6, 0xE7, 0x87, 0x25, 0x60, 0x70,  // .z...%`p
                                /* 5030 */  0xD0, 0xF7, 0x61, 0x09, 0xF0, 0x7D, 0x70, 0xF5,  // ..a..}p.
                                /* 5038 */  0x61, 0x01, 0xF7, 0xFF, 0x3F, 0x2C, 0x01, 0x9F,  // a...?,..
                                /* 5040 */  0xBB, 0x01, 0x16, 0xE8, 0xDD, 0x80, 0xDF, 0x17,  // ........
                                /* 5048 */  0xF0, 0x31, 0x24, 0x8C, 0x82, 0xC9, 0x7F, 0x19,  // .1$.....
                                /* 5050 */  0x48, 0x38, 0x0C, 0xEA, 0x44, 0xEB, 0x03, 0x01,  // H8..D...
                                /* 5058 */  0x7E, 0x14, 0x67, 0x70, 0x64, 0x07, 0xC5, 0x0E,  // ~.gpd...
                                /* 5060 */  0x2E, 0x86, 0xE3, 0xA7, 0x23, 0x66, 0xFE, 0x3C,  // ....#f.<
                                /* 5068 */  0x49, 0xE6, 0xEA, 0x59, 0x85, 0x64, 0xD2, 0x46,  // I..Y.d.F
                                /* 5070 */  0x87, 0x92, 0x02, 0xA1, 0x13, 0xC0, 0x29, 0x9D,  // ......).
                                /* 5078 */  0xD1, 0xE3, 0x8C, 0xA7, 0x64, 0x98, 0x04, 0x1E,  // ....d...
                                /* 5080 */  0x38, 0x43, 0xE3, 0xD0, 0xD8, 0x61, 0xF8, 0x46,  // 8C...a.F
                                /* 5088 */  0x10, 0xEC, 0x20, 0x9E, 0x30, 0x7D, 0x72, 0x66,  // .. .0}rf
                                /* 5090 */  0x13, 0x3A, 0xC0, 0x72, 0x6F, 0x29, 0x12, 0x8F,  // .:.ro)..
                                /* 5098 */  0x2A, 0x8C, 0xE6, 0xA0, 0x88, 0xE0, 0x71, 0x83,  // *.....q.
                                /* 50A0 */  0xE6, 0xC4, 0x01, 0xEF, 0x28, 0xEA, 0xB9, 0xC7,  // ....(...
                                /* 50A8 */  0x09, 0xF9, 0xE2, 0x77, 0xE2, 0xBE, 0x27, 0x9C,  // ...w..'.
                                /* 50B0 */  0xD2, 0xCB, 0x28, 0x3F, 0x54, 0xF0, 0x81, 0xF0,  // ..(?T...
                                /* 50B8 */  0xE3, 0x81, 0x31, 0x5F, 0x20, 0x7C, 0x2D, 0x30,  // ..1_ |-0
                                /* 50C0 */  0x41, 0xF7, 0xE7, 0x50, 0x72, 0x7F, 0x79, 0x7E,  // A..Pr.y~
                                /* 50C8 */  0x3A, 0xA8, 0x17, 0x98, 0x28, 0xAD, 0x09, 0xB0,  // :...(...
                                /* 50D0 */  0x05, 0xA3, 0x31, 0x3C, 0x43, 0x19, 0x25, 0x54,  // ..1<C.%T
                                /* 50D8 */  0x14, 0xE3, 0x45, 0x89, 0xF9, 0x2E, 0x11, 0xE2,  // ..E.....
                                /* 50E0 */  0xE4, 0xA2, 0x04, 0x3B, 0xAD, 0xF0, 0xA1, 0x8E,  // ...;....
                                /* 50E8 */  0x2F, 0x6C, 0x74, 0x5F, 0x9B, 0x83, 0xF4, 0x26,  // /lt_...&
                                /* 50F0 */  0xE0, 0xFF, 0x8F, 0xD5, 0xFE, 0x20, 0x48, 0xF4,  // ..... H.
                                /* 50F8 */  0x97, 0x87, 0xCE, 0x03, 0x8E, 0x34, 0x1A, 0xD4,  // .....4..
                                /* 5100 */  0xD1, 0x87, 0x9F, 0x07, 0x8E, 0xEA, 0xD9, 0x83,  // ........
                                /* 5108 */  0xDD, 0xB4, 0x0D, 0x5F, 0xE7, 0x61, 0x80, 0x9C,  // ..._.a..
                                /* 5110 */  0xBF, 0xE9, 0xE9, 0x03, 0x9A, 0x6B, 0x40, 0x5D,  // .....k@]
                                /* 5118 */  0x0B, 0x1E, 0x0A, 0xD8, 0x1C, 0x0D, 0xC7, 0x87,  // ........
                                /* 5120 */  0xE8, 0xD3, 0xAB, 0x27, 0x70, 0x88, 0x0C, 0xD0,  // ...'p...
                                /* 5128 */  0x67, 0x1F, 0xF8, 0xE3, 0xF1, 0x29, 0xC0, 0x43,  // g....).C
                                /* 5130 */  0xF7, 0xD1, 0x81, 0x0C, 0x02, 0x75, 0x46, 0xE1,  // .....uF.
                                /* 5138 */  0x27, 0x81, 0x07, 0x72, 0x76, 0x01, 0x30, 0x81,  // '..rv.0.
                                /* 5140 */  0x8F, 0x17, 0x3E, 0xAE, 0x78, 0x3C, 0xE0, 0x1F,  // ..>.x<..
                                /* 5148 */  0xFF, 0x13, 0x42, 0x84, 0x37, 0x06, 0xCF, 0xD7,  // ..B.7...
                                /* 5150 */  0x27, 0x19, 0x76, 0x84, 0x02, 0x57, 0xC4, 0xA3,  // '.v..W..
                                /* 5158 */  0x8D, 0x21, 0x24, 0xEA, 0x60, 0x82, 0x3A, 0x55,  // .!$.`.:U
                                /* 5160 */  0xF8, 0x40, 0xC1, 0x90, 0xC3, 0x1A, 0xE2, 0xB9,  // .@......
                                /* 5168 */  0x84, 0x1D, 0x6E, 0x3C, 0x38, 0xF8, 0x77, 0x19,  // ..n<8.w.
                                /* 5170 */  0x9F, 0x26, 0xC0, 0x7D, 0xAE, 0xC2, 0xFF, 0xFF,  // .&.}....
                                /* 5178 */  0xCF, 0x55, 0xE0, 0x38, 0x2D, 0xE1, 0xCE, 0x36,  // .U.8-..6
                                /* 5180 */  0xF0, 0x50, 0xA2, 0x3F, 0x36, 0xF4, 0x79, 0x27,  // .P.?6.y'
                                /* 5188 */  0x14, 0xC4, 0xDB, 0x19, 0x16, 0x2C, 0x54, 0x38,  // .....,T8
                                /* 5190 */  0x0F, 0x24, 0x81, 0x45, 0x0E, 0x10, 0x3D, 0x06,  // .$.E..=.
                                /* 5198 */  0x0E, 0xF8, 0xA4, 0xC3, 0xC6, 0xF0, 0xB2, 0x63,  // .......c
                                /* 51A0 */  0xFC, 0x43, 0xF2, 0xB9, 0xC4, 0x08, 0x87, 0xF4,  // .C......
                                /* 51A8 */  0x38, 0xF2, 0x78, 0xE2, 0xC3, 0xC5, 0x11, 0x9E,  // 8.x.....
                                /* 51B0 */  0xD6, 0x2B, 0xC1, 0xCB, 0x84, 0x87, 0x8C, 0x3D,  // .+.....=
                                /* 51B8 */  0x11, 0x78, 0x08, 0x7C, 0x00, 0x4F, 0x4F, 0x67,  // .x.|.OOg
                                /* 51C0 */  0xE8, 0xA3, 0xCF, 0x79, 0xE1, 0x4E, 0x30, 0xFC,  // ...y.N0.
                                /* 51C8 */  0x22, 0x82, 0x39, 0x01, 0xE1, 0x84, 0x3E, 0xF8,  // ".9...>.
                                /* 51D0 */  0x7C, 0xA0, 0xA1, 0xD2, 0x60, 0x50, 0x67, 0x1A,  // |...`Pg.
                                /* 51D8 */  0xC0, 0x29, 0x98, 0xAF, 0x00, 0x0F, 0x0A, 0x86,  // .)......
                                /* 51E0 */  0x88, 0xE5, 0xFF, 0x3F, 0x96, 0x2F, 0x0E, 0x31,  // ...?./.1
                                /* 51E8 */  0x42, 0x3D, 0x1B, 0x1B, 0xE8, 0x45, 0xE4, 0xA5,  // B=...E..
                                /* 51F0 */  0x26, 0x98, 0xCF, 0x22, 0x46, 0x62, 0xF7, 0x11,  // &.."Fb..
                                /* 51F8 */  0x9F, 0x69, 0xE0, 0x0F, 0x29, 0x4A, 0x84, 0x87,  // .i..)J..
                                /* 5200 */  0x98, 0x77, 0x8F, 0x18, 0x0F, 0x33, 0x71, 0xDE,  // .w...3q.
                                /* 5208 */  0x65, 0x9E, 0x1F, 0xE2, 0x9C, 0xDC, 0x71, 0x3D,  // e.....q=
                                /* 5210 */  0xD3, 0xF8, 0x26, 0x73, 0x34, 0x6F, 0x35, 0x3E,  // ..&s4o5>
                                /* 5218 */  0x62, 0xF8, 0x12, 0xF1, 0x6A, 0xE3, 0x61, 0x45,  // b...j.aE
                                /* 5220 */  0x88, 0x12, 0x32, 0x52, 0x9C, 0x28, 0xC6, 0x3B,  // ..2R.(.;
                                /* 5228 */  0xA0, 0x70, 0xC7, 0xF8, 0x4C, 0xC3, 0xC2, 0x2D,  // .p..L..-
                                /* 5230 */  0x45, 0xC7, 0x00, 0x9F, 0x69, 0x00, 0x7E, 0xC4,  // E...i.~.
                                /* 5238 */  0x3E, 0xE5, 0xA1, 0x8F, 0x0B, 0x3E, 0x21, 0xE0,  // >....>!.
                                /* 5240 */  0xCF, 0xB8, 0x9E, 0x88, 0x03, 0x1E, 0x69, 0xA0,  // ......i.
                                /* 5248 */  0xFD, 0xFF, 0x8F, 0x34, 0xC0, 0xEF, 0x14, 0x01,  // ...4....
                                /* 5250 */  0xE3, 0xF2, 0x67, 0x5D, 0x87, 0x3F, 0x10, 0x9E,  // ..g].?..
                                /* 5258 */  0x15, 0x3D, 0x56, 0xDC, 0x79, 0xC4, 0xC0, 0x47,  // .=V.y..G
                                /* 5260 */  0xE2, 0x43, 0x81, 0x67, 0xED, 0xA9, 0xFA, 0x7C,  // .C.g...|
                                /* 5268 */  0xC7, 0x80, 0x9E, 0x5D, 0x7C, 0x6F, 0x30, 0xC1,  // ...]|o0.
                                /* 5270 */  0x98, 0xC3, 0x05, 0xD5, 0xC9, 0x00, 0x1C, 0xE7,  // ........
                                /* 5278 */  0x5D, 0xF0, 0x8C, 0x0B, 0x3B, 0x8B, 0x53, 0x64,  // ]...;.Sd
                                /* 5280 */  0xE3, 0xC2, 0x41, 0x9D, 0xB1, 0x47, 0x0C, 0xAE,  // ..A..G..
                                /* 5288 */  0xF3, 0x94, 0x47, 0x8C, 0x3B, 0x6A, 0xF8, 0xB0,  // ..G.;j..
                                /* 5290 */  0x00, 0x03, 0xFE, 0x59, 0xE3, 0x7D, 0xD0, 0xE7,  // ...Y.}..
                                /* 5298 */  0x29, 0xB0, 0xFC, 0xFF, 0xC7, 0xCB, 0x01, 0x3D,  // )......=
                                /* 52A0 */  0x5E, 0xF8, 0xE7, 0x23, 0xFC, 0x69, 0x01, 0x4C,  // ^..#.i.L
                                /* 52A8 */  0xA3, 0xE2, 0xC7, 0x05, 0xB0, 0x5C, 0x90, 0x02,  // .....\..
                                /* 52B0 */  0x3D, 0x3C, 0x79, 0xB4, 0x7E, 0x53, 0x78, 0xB4,  // =<y.~Sx.
                                /* 52B8 */  0xB8, 0x91, 0xF9, 0x90, 0xC5, 0x4F, 0xEC, 0x9E,  // .....O..
                                /* 52C0 */  0x06, 0xBF, 0x40, 0x79, 0xEC, 0x87, 0x99, 0xC0,  // ..@y....
                                /* 52C8 */  0xA7, 0x05, 0x70, 0x81, 0xFA, 0xB4, 0x00, 0x3C,  // ..p....<
                                /* 52D0 */  0x86, 0x85, 0x99, 0x2C, 0x06, 0xE5, 0xB0, 0xD8,  // ...,....
                                /* 52D8 */  0xDD, 0xD0, 0xC0, 0x07, 0x0C, 0xC6, 0xD3, 0x02,  // ........
                                /* 52E0 */  0x9C, 0x13, 0x12, 0xBB, 0x73, 0xF1, 0xD3, 0x1C,  // ....s...
                                /* 52E8 */  0xE6, 0xB4, 0x00, 0x3E, 0x0B, 0x10, 0xFA, 0xFF,  // ...>....
                                /* 52F0 */  0x9F, 0x16, 0x80, 0xC7, 0xA8, 0xB0, 0xA7, 0x39,  // .......9
                                /* 52F8 */  0xCC, 0x69, 0x01, 0x38, 0x9C, 0x55, 0xAC, 0x70,  // .i.8.U.p
                                /* 5300 */  0x32, 0xE4, 0x16, 0xC1, 0x06, 0x73, 0x44, 0x46,  // 2....sDF
                                /* 5308 */  0x38, 0xDD, 0x57, 0x89, 0x87, 0x78, 0x43, 0xBC,  // 8.W..xC.
                                /* 5310 */  0x57, 0x99, 0x60, 0xC8, 0xF1, 0x82, 0xEA, 0x9C,  // W.`.....
                                /* 5318 */  0xE6, 0xF1, 0xC2, 0x3F, 0x6B, 0x83, 0x67, 0x5C,  // ...?k.g\
                                /* 5320 */  0x70, 0xCE, 0x5F, 0x1E, 0x17, 0x3F, 0xAA, 0x80,  // p._..?..
                                /* 5328 */  0x63, 0xC0, 0x38, 0x41, 0x03, 0x46, 0x1F, 0xDA,  // c.8A.F..
                                /* 5330 */  0x7C, 0x5A, 0xC0, 0x0F, 0x1A, 0x1C, 0xE7, 0x6D,  // |Z.....m
                                /* 5338 */  0x0F, 0x1A, 0xFE, 0xFF, 0x7F, 0xD0, 0xDC, 0xC3,  // ........
                                /* 5340 */  0xA0, 0x41, 0x71, 0x9A, 0x7B, 0x66, 0x00, 0xEB,  // .Aq.{f..
                                /* 5348 */  0xC0, 0x81, 0xCF, 0xA1, 0x04, 0x77, 0xA8, 0x04,  // .....w..
                                /* 5350 */  0x0B, 0x4E, 0xFC, 0x87, 0xF8, 0x67, 0x8C, 0x03,  // .N...g..
                                /* 5358 */  0x38, 0x03, 0xA3, 0x3C, 0xC8, 0x1B, 0x35, 0x4E,  // 8..<..5N
                                /* 5360 */  0x88, 0xA7, 0x4A, 0xE0, 0x32, 0x02, 0x1E, 0xEB,  // ..J.2...
                                /* 5368 */  0x04, 0x49, 0x03, 0x1C, 0x11, 0x24, 0xF1, 0x39,  // .I...$.9
                                /* 5370 */  0x40, 0x61, 0x7C, 0x88, 0x04, 0x9C, 0xFC, 0xFF,  // @a|.....
                                /* 5378 */  0x0F, 0x91, 0xF0, 0x6E, 0x0B, 0x3E, 0x2B, 0x81,  // ...n.>+.
                                /* 5380 */  0xE5, 0x28, 0x00, 0xFB, 0x78, 0xCF, 0x90, 0xE2,  // .(..x...
                                /* 5388 */  0xBD, 0xD2, 0x7A, 0x00, 0x47, 0x73, 0x38, 0x0F,  // ..z.Gs8.
                                /* 5390 */  0x0C, 0x3E, 0x68, 0x83, 0xE1, 0xAA, 0x10, 0xF7,  // .>h.....
                                /* 5398 */  0x25, 0xD2, 0x83, 0x7A, 0x74, 0x7C, 0x70, 0x7C,  // %..zt|p|
                                /* 53A0 */  0x82, 0x7C, 0x7B, 0x3C, 0xA1, 0x17, 0x6C, 0xDF,  // .|{<..l.
                                /* 53A8 */  0x23, 0x7D, 0xDA, 0xF6, 0xFD, 0xDA, 0x28, 0xF1,  // #}....(.
                                /* 53B0 */  0x82, 0x1E, 0xDD, 0x23, 0x41, 0x94, 0x20, 0x91,  // ...#A. .
                                /* 53B8 */  0xA2, 0x86, 0x79, 0xD1, 0x36, 0x50, 0x88, 0x08,  // ..y.6P..
                                /* 53C0 */  0x47, 0x6A, 0xA8, 0xA7, 0x48, 0x16, 0xF1, 0x40,  // Gj..H..@
                                /* 53C8 */  0xA0, 0x33, 0x87, 0x4F, 0x91, 0x00, 0x1F, 0xFE,  // .3.O....
                                /* 53D0 */  0xFF, 0xA7, 0x48, 0xFC, 0xCD, 0xD8, 0xE7, 0x10,  // ..H.....
                                /* 53D8 */  0xF0, 0x9F, 0x16, 0x70, 0x07, 0x11, 0xE0, 0x22,  // ...p..."
                                /* 53E0 */  0xF5, 0x65, 0xA3, 0xD1, 0x3A, 0xEA, 0xA3, 0x40,  // .e..:..@
                                /* 53E8 */  0x36, 0x3E, 0xFE, 0xEC, 0xD0, 0x42, 0xE2, 0x53,  // 6>...B.S
                                /* 53F0 */  0x69, 0x38, 0x71, 0x1F, 0x7B, 0x7C, 0xE8, 0x83,  // i8q.{|..
                                /* 53F8 */  0x31, 0x8C, 0x13, 0x38, 0x8B, 0xC3, 0xF6, 0x11,  // 1..8....
                                /* 5400 */  0xD0, 0x17, 0x73, 0x7C, 0x44, 0x78, 0x1D, 0x36,  // ..s|Dx.6
                                /* 5408 */  0x3D, 0x0C, 0x87, 0xA3, 0xD0, 0x61, 0xCC, 0x03,  // =....a..
                                /* 5410 */  0xF3, 0x01, 0x88, 0xC3, 0x19, 0xC4, 0x80, 0x4E,  // .......N
                                /* 5418 */  0x72, 0x18, 0x05, 0xCD, 0x6C, 0x3D, 0xBD, 0xC7,  // r...l=..
                                /* 5420 */  0x07, 0x06, 0xE9, 0x83, 0x01, 0x3F, 0xB0, 0x18,  // .....?..
                                /* 5428 */  0xD3, 0xF8, 0x56, 0x73, 0x2A, 0x42, 0x81, 0x19,  // ..Vs*B..
                                /* 5430 */  0x9B, 0xDD, 0x3A, 0xC1, 0xA7, 0xEF, 0x6E, 0x00,  // ..:...n.
                                /* 5438 */  0x0A, 0x20, 0x1F, 0x04, 0x7C, 0xE9, 0x7E, 0x17,  // . ..|.~.
                                /* 5440 */  0x60, 0x53, 0x78, 0xEF, 0x36, 0x9A, 0xD1, 0xFD,  // `Sx.6...
                                /* 5448 */  0xFF, 0x27, 0x70, 0xC0, 0x95, 0x6A, 0xB4, 0x3C,  // .'p..j.<
                                /* 5450 */  0x12, 0x8C, 0x46, 0x6B, 0x10, 0x0F, 0xCC, 0xA1,  // ..Fk....
                                /* 5458 */  0x46, 0x8B, 0x3E, 0x43, 0xF9, 0x12, 0x00, 0xEF,  // F.>C....
                                /* 5460 */  0x50, 0x88, 0x3B, 0xA8, 0xF0, 0xF3, 0x07, 0x9C,  // P.;.....
                                /* 5468 */  0x83, 0xC2, 0x01, 0xBC, 0x24, 0x78, 0x32, 0x86,  // ....$x2.
                                /* 5470 */  0xF3, 0x90, 0x39, 0x9C, 0x87, 0xCC, 0x47, 0xE4,  // ..9...G.
                                /* 5478 */  0x29, 0x83, 0x2B, 0xDA, 0xD0, 0xD0, 0xA7, 0x1D,  // ).+.....
                                /* 5480 */  0x0F, 0x0D, 0x7F, 0xFA, 0x02, 0xC7, 0xE8, 0xC0,  // ........
                                /* 5488 */  0x7D, 0x72, 0xF0, 0xE8, 0xC0, 0x25, 0xF0, 0x7E,  // }r...%.~
                                /* 5490 */  0x00, 0x72, 0x78, 0xCC, 0x69, 0xD1, 0x83, 0xF2,  // .rx.i...
                                /* 5498 */  0x78, 0x3C, 0x2C, 0x7E, 0x9C, 0xF0, 0x91, 0x89,  // x<,~....
                                /* 54A0 */  0x61, 0xBF, 0x76, 0x78, 0xB4, 0x27, 0xF8, 0x12,  // a.vx.'..
                                /* 54A8 */  0xF2, 0xA0, 0x8C, 0x81, 0xF5, 0x40, 0xFD, 0xFF,  // .....@..
                                /* 54B0 */  0x87, 0xE5, 0x68, 0x61, 0x1F, 0x0F, 0x1E, 0x59,  // ..ha...Y
                                /* 54B8 */  0x7C, 0xDD, 0xF1, 0xD9, 0x96, 0xC1, 0x7A, 0xB0,  // |.....z.
                                /* 54C0 */  0x3E, 0x33, 0x81, 0xE7, 0x44, 0xC2, 0x9E, 0x25,  // >3..D..%
                                /* 54C8 */  0x8F, 0x03, 0xD8, 0x63, 0x3C, 0x9C, 0x13, 0x09,  // ...c<...
                                /* 54D0 */  0xEE, 0x89, 0xC2, 0xC4, 0x9F, 0x52, 0xD0, 0x81,  // .....R..
                                /* 54D8 */  0xDE, 0x00, 0xC2, 0x7C, 0x4A, 0x01, 0xAB, 0xE8,  // ...|J...
                                /* 54E0 */  0x53, 0x0A, 0x85, 0xB0, 0x5C, 0x18, 0x89, 0x85,  // S...\...
                                /* 54E8 */  0xD0, 0x41, 0x83, 0xCB, 0x83, 0xA3, 0x20, 0x3E,  // .A.... >
                                /* 54F0 */  0x34, 0x39, 0xCC, 0x29, 0x05, 0x54, 0xE7, 0x06,  // 49.).T..
                                /* 54F8 */  0x78, 0xA7, 0x14, 0x76, 0x6E, 0x80, 0x7D, 0x4D,  // x..vn.}M
                                /* 5500 */  0x01, 0xDF, 0x71, 0x04, 0x38, 0x0D, 0x0D, 0xCE,  // ..q.8...
                                /* 5508 */  0xFF, 0xFF, 0x38, 0x02, 0xF8, 0x19, 0x1D, 0x38,  // ..8....8
                                /* 5510 */  0x8E, 0x23, 0x80, 0xA7, 0xA1, 0xF1, 0xE3, 0x08,  // .#......
                                /* 5518 */  0xF0, 0x39, 0x7A, 0xB0, 0xE3, 0x08, 0x58, 0xFF,  // .9z...X.
                                /* 5520 */  0xFF, 0x92, 0x5F, 0x1C, 0x06, 0xF1, 0x73, 0x41,  // .._...sA
                                /* 5528 */  0x22, 0x61, 0x50, 0x67, 0x4B, 0xC0, 0xD5, 0xB1,  // "aPgK...
                                /* 5530 */  0x1E, 0xCC, 0x17, 0x0A, 0x36, 0x77, 0x76, 0xA8,  // ....6wv.
                                /* 5538 */  0x84, 0x7F, 0x8C, 0x8C, 0xDA, 0x19, 0x82, 0x0E,  // ........
                                /* 5540 */  0x95, 0x1E, 0x54, 0x88, 0x97, 0xC9, 0xB7, 0xCA,  // ..T.....
                                /* 5548 */  0x23, 0x79, 0x88, 0x08, 0xF4, 0x50, 0xC9, 0x20,  // #y...P. 
                                /* 5550 */  0xA2, 0x3E, 0x54, 0xFA, 0x32, 0x19, 0x24, 0x94,  // .>T.2.$.
                                /* 5558 */  0x51, 0x0F, 0x2C, 0x62, 0xC0, 0x17, 0xC1, 0x47,  // Q.,b...G
                                /* 5560 */  0xCB, 0x20, 0xE1, 0x63, 0xC4, 0x3E, 0x00, 0x1F,  // . .c.>..
                                /* 5568 */  0x2A, 0x59, 0xE4, 0x37, 0x83, 0x4E, 0x02, 0x3E,  // *Y.7.N.>
                                /* 5570 */  0x54, 0x02, 0xFF, 0xFF, 0xFF, 0xA1, 0x12, 0xF0,  // T.......
                                /* 5578 */  0x13, 0xF8, 0x20, 0x83, 0x86, 0xB6, 0xCB, 0xB1,  // .. .....
                                /* 5580 */  0x92, 0x5B, 0x11, 0x27, 0x18, 0xEF, 0xA8, 0x0D,  // .[.'....
                                /* 5588 */  0xAA, 0x83, 0x8E, 0x47, 0x06, 0xFF, 0xE0, 0x82,  // ...G....
                                /* 5590 */  0x3B, 0x44, 0xC0, 0x1D, 0x12, 0xBB, 0x41, 0xE0,  // ;D....A.
                                /* 5598 */  0xEE, 0x0E, 0xEC, 0x4C, 0x03, 0xAE, 0x33, 0x36,  // ...L..36
                                /* 55A0 */  0x70, 0xC0, 0x8B, 0x16, 0xD1, 0xE7, 0x53, 0x9F,  // p.....S.
                                /* 55A8 */  0x45, 0xC1, 0xF7, 0xFF, 0x3F, 0x8B, 0xC2, 0xBB,  // E...?...
                                /* 55B0 */  0x06, 0x78, 0x08, 0xFC, 0x2C, 0xE1, 0x21, 0xF0,  // .x..,.!.
                                /* 55B8 */  0x01, 0xBC, 0x92, 0x9F, 0xA1, 0xCF, 0x3C, 0x27,  // ......<'
                                /* 55C0 */  0x86, 0x3B, 0xB7, 0x70, 0xB0, 0x53, 0xE6, 0x47,  // .;.p.S.G
                                /* 55C8 */  0x1F, 0x9C, 0x42, 0x9B, 0x3E, 0x35, 0x1A, 0xB5,  // ..B.>5..
                                /* 55D0 */  0x6A, 0x50, 0xA6, 0x46, 0x99, 0x06, 0xB5, 0xFA,  // jP.F....
                                /* 55D8 */  0x54, 0x6A, 0xCC, 0x98, 0xFB, 0xA7, 0x83, 0x04,  // Tj......
                                /* 55E0 */  0x41, 0xE8, 0x6C, 0x60, 0xF9, 0x20, 0x54, 0x36,  // A.l`. T6
                                /* 55E8 */  0x85, 0x40, 0x7C, 0xA2, 0x31, 0x88, 0x05, 0x9E,  // .@|.1...
                                /* 55F0 */  0x55, 0x05, 0xE2, 0x78, 0x20, 0x34, 0xD0, 0x1A,  // U..x 4..
                                /* 55F8 */  0x04, 0xE2, 0x30, 0x26, 0x40, 0x98, 0xF8, 0x93,  // ..0&@...
                                /* 5600 */  0xB8, 0x40, 0x2C, 0xF8, 0x89, 0x20, 0x70, 0xF2,  // .@,.. p.
                                /* 5608 */  0x44, 0x10, 0x88, 0xC5, 0xD9, 0x00, 0x61, 0x92,  // D.....a.
                                /* 5610 */  0x74, 0x1C, 0x3D, 0xA8, 0x0F, 0x10, 0x26, 0xE4,  // t.=...&.
                                /* 5618 */  0x1D, 0x20, 0x10, 0x8B, 0x70, 0x02, 0xC2, 0x22,  // . ..p.."
                                /* 5620 */  0x80, 0x50, 0xD9, 0x4F, 0x07, 0x81, 0x58, 0xA6,  // .P.O..X.
                                /* 5628 */  0x15, 0x10, 0x26, 0x51, 0x0B, 0x08, 0xF5, 0x02,  // ..&Q....
                                /* 5630 */  0x42, 0x5F, 0x00, 0x02, 0x21, 0x66, 0x86, 0x45,  // B_..!f.E
                                /* 5638 */  0x9F, 0xA7, 0x3A, 0x2D, 0x11, 0x37, 0x43, 0xA1,  // ..:-.7C.
                                /* 5640 */  0xEB, 0xD6, 0x51, 0x95, 0xD8, 0x01, 0x61, 0x12,  // ..Q...a.
                                /* 5648 */  0xF4, 0x80, 0xB0, 0xD8, 0x2F, 0x09, 0x81, 0x58,  // ..../..X
                                /* 5650 */  0xB4, 0x21, 0x40, 0xEA, 0xE8, 0x88, 0xC1, 0xA4,  // .!@.....
                                /* 5658 */  0x81, 0x68, 0x10, 0xC4, 0x12, 0x10, 0x13, 0x0C,  // .h......
                                /* 5660 */  0x22, 0x20, 0x07, 0xF0, 0x04, 0xC4, 0xE2, 0x80,  // " ......
                                /* 5668 */  0x08, 0xC8, 0x01, 0x4D, 0x01, 0xB1, 0xB8, 0x20,  // ...M... 
                                /* 5670 */  0x02, 0x72, 0x78, 0x57, 0x40, 0x4C, 0xCA, 0x3B,  // .rxW@L.;
                                /* 5678 */  0x42, 0x40, 0x16, 0xF4, 0xFA, 0x17, 0x90, 0xE5,  // B@......
                                /* 5680 */  0x81, 0x08, 0xC8, 0xD2, 0x9E, 0x21, 0x02, 0xB2,  // .....!..
                                /* 5688 */  0x50, 0x10, 0x0D, 0x92, 0x7C, 0x66, 0x02, 0x11,  // P...|f..
                                /* 5690 */  0xD1, 0x20, 0x1A, 0x12, 0x79, 0x06, 0x09, 0xC8,  // . ..y...
                                /* 5698 */  0x11, 0x40, 0x04, 0xE4, 0x18, 0x8F, 0x9B, 0x40,  // .@.....@
                                /* 56A0 */  0xE4, 0xFF, 0x1F, 0x0A, 0x44, 0x40, 0x0E, 0xF6,  // ....D@..
                                /* 56A8 */  0xA6, 0x10, 0x90, 0x63, 0x82, 0x08, 0xC8, 0xD1,  // ...c....
                                /* 56B0 */  0xD5, 0x01, 0x31, 0x21, 0xEE, 0x06, 0x42, 0xED,  // ..1!..B.
                                /* 56B8 */  0x0D, 0x84, 0x82, 0x08, 0xC8, 0xC2, 0xFD, 0x01,  // ........
                                /* 56C0 */  0xB1, 0x18, 0x20, 0x02, 0x72, 0xB8, 0x2F, 0x43,  // .. .r./C
                                /* 56C8 */  0x20, 0x12, 0x15, 0x44, 0x83, 0x25, 0x0F, 0x08,  //  ..D.%..
                                /* 56D0 */  0x0D, 0x96, 0x80, 0x08, 0xC8, 0xD1, 0x34, 0x02,  // ......4.
                                /* 56D8 */  0xB1, 0xA0, 0x20, 0x3A, 0x14, 0x90, 0x27, 0x94,  // .. :..'.
                                /* 56E0 */  0x80, 0x2C, 0x0B, 0x44, 0xC7, 0x00, 0xF2, 0x06,  // .,.D....
                                /* 56E8 */  0x09, 0x44, 0xE4, 0x82, 0x08, 0xC8, 0x51, 0xFE,  // .D....Q.
                                /* 56F0 */  0x10, 0x81, 0x48, 0x30, 0x10, 0x1D, 0x11, 0xC8,  // ..H0....
                                /* 56F8 */  0xD3, 0x43, 0x40, 0x16, 0x07, 0xA2, 0x23, 0x03,  // .C@...#.
                                /* 5700 */  0x79, 0x50, 0x04, 0x22, 0xD1, 0x40, 0x04, 0x64,  // yP.".@.d
                                /* 5708 */  0x19, 0xBF, 0x8A, 0x40, 0x44, 0x14, 0x88, 0x00,  // ...@D...
                                /* 5710 */  0xC9, 0xA3, 0x22, 0x20, 0x03, 0xD1, 0xA9, 0x85,  // .." ....
                                /* 5718 */  0xA8, 0x05, 0x62, 0x72, 0x40, 0x74, 0x7C, 0x20,  // ..br@t| 
                                /* 5720 */  0xAF, 0x8D, 0x40, 0x44, 0x3E, 0x88, 0x80, 0x1C,  // ..@D>...
                                /* 5728 */  0x51, 0x2F, 0x10, 0x0B, 0x0C, 0xA2, 0xC1, 0x90,  // Q/......
                                /* 5730 */  0x37, 0xC7, 0xC1, 0x30, 0x10, 0x01, 0x59, 0xEC,  // 7..0..Y.
                                /* 5738 */  0x2B, 0x4B, 0x40, 0x96, 0x0E, 0x22, 0x20, 0x47,  // +K@.." G
                                /* 5740 */  0xFA, 0xED, 0x08, 0xC8, 0x01, 0x41, 0x34, 0x78,  // .....A4x
                                /* 5748 */  0xF2, 0xF5, 0xD1, 0xE0, 0xC9, 0x3F, 0xEA, 0x40,  // .....?.@
                                /* 5750 */  0x98, 0xEA, 0x81, 0x50, 0x10, 0x01, 0x39, 0xE6,  // ...P..9.
                                /* 5758 */  0x3B, 0x4A, 0x40, 0x0E, 0x0D, 0x22, 0x20, 0x8B,  // ;J@.." .
                                /* 5760 */  0x7A, 0x8E, 0x04, 0x22, 0x12, 0x41, 0x04, 0xE4,  // z..".A..
                                /* 5768 */  0x20, 0xC6, 0x81, 0x58, 0x2C, 0x10, 0x0D, 0x82,  //  ..X,...
                                /* 5770 */  0x3C, 0x31, 0x35, 0x08, 0xF2, 0x05, 0xD1, 0xD1,  // <15.....
                                /* 5778 */  0x82, 0xBC, 0xBB, 0x04, 0xE4, 0x10, 0x20, 0x02,  // ...... .
                                /* 5780 */  0x72, 0xB6, 0x07, 0xD7, 0x43, 0x00, 0x03, 0x11,  // r...C...
                                /* 5788 */  0x90, 0x43, 0xBF, 0x97, 0x04, 0x64, 0x09, 0xEA,  // .C...d..
                                /* 5790 */  0x8F, 0x15, 0xF4, 0x75, 0x24, 0x20, 0x0B, 0x04,  // ...u$ ..
                                /* 5798 */  0x11, 0x90, 0x25, 0xEB, 0x07, 0x62, 0x01, 0x40,  // ..%..b.@
                                /* 57A0 */  0x34, 0x40, 0x12, 0x00, 0x88, 0xFD, 0xFF, 0x03,  // 4@......
                                /* 57A8 */  0x82, 0x08, 0xC8, 0x71, 0x13, 0x00, 0xB1, 0xF0,  // ...q....
                                /* 57B0 */  0x20, 0x1A, 0x00, 0xA9, 0x30, 0x00, 0x0A, 0xA2,  //  ...0...
                                /* 57B8 */  0x03, 0x04, 0xE9, 0x70, 0x80, 0xA0, 0x20, 0x3A,  // ...p.. :
                                /* 57C0 */  0x94, 0x90, 0x12, 0x40, 0x2C, 0x1E, 0x88, 0x06,  // ...@,...
                                /* 57C8 */  0x44, 0x5A, 0x0C, 0x88, 0xC6, 0x00, 0x62, 0xF2,  // DZ....b.
                                /* 57D0 */  0x72, 0x00, 0x31, 0xB1, 0x20, 0x3A, 0x68, 0x90,  // r.1. :h.
                                /* 57D8 */  0x20, 0x07, 0x0D, 0x0A, 0xA2, 0x41, 0x93, 0x37,  //  ....A.7
                                /* 57E0 */  0xB8, 0x06, 0x4D, 0x40, 0x04, 0x64, 0x29, 0x55,  // ..M@.d)U
                                /* 57E8 */  0x80, 0x98, 0x30, 0x10, 0x1D, 0x30, 0x48, 0x97,  // ..0..0H.
                                /* 57F0 */  0x03, 0x06, 0x05, 0x11, 0x90, 0xE3, 0x94, 0x01,  // ........
                                /* 57F8 */  0x62, 0xE1, 0x40, 0x34, 0x18, 0xD2, 0x66, 0x30,  // b.@4..f0
                                /* 5800 */  0x34, 0xCE, 0x61, 0x82, 0xE6, 0x01, 0x62, 0xCA,  // 4.a...b.
                                /* 5808 */  0x40, 0x04, 0x64, 0xB5, 0x7D, 0x80, 0x98, 0x76,  // @.d.}..v
                                /* 5810 */  0x10, 0x01, 0x39, 0x55, 0x21, 0x20, 0x96, 0x11,  // ..9U! ..
                                /* 5818 */  0x44, 0x40, 0x4E, 0xD9, 0x08, 0x88, 0x65, 0x06,  // D@N...e.
                                /* 5820 */  0x11, 0x90, 0x75, 0x64, 0x02, 0x62, 0xAA, 0x40,  // ..ud.b.@
                                /* 5828 */  0x04, 0x64, 0xC5, 0x0F, 0x52, 0x01, 0x59, 0x3F,  // .d..R.Y?
                                /* 5830 */  0x88, 0x80, 0x49, 0x2A, 0x60, 0x0A, 0x22, 0x20,  // ..I*`." 
                                /* 5838 */  0xAB, 0xA8, 0x05, 0xC4, 0x34, 0x81, 0x68, 0x30,  // ....4.h0
                                /* 5840 */  0xA4, 0xD7, 0x60, 0x28, 0x88, 0x80, 0x9C, 0xA9,  // ..`(....
                                /* 5848 */  0x18, 0x10, 0x4B, 0x08, 0x22, 0x20, 0xE7, 0x6E,  // ..K." .n
                                /* 5850 */  0x06, 0xC4, 0x54, 0x3C, 0x3E, 0x05, 0x64, 0x55,  // ..T<>.dU
                                /* 5858 */  0xD9, 0x80, 0x98, 0x46, 0x10, 0x01, 0x59, 0x68,  // ...F..Yh
                                /* 5860 */  0x38, 0x20, 0xA6, 0x1A, 0x44, 0x40, 0xD6, 0x5F,  // 8 ..D@._
                                /* 5868 */  0x0E, 0x88, 0xA5, 0x01, 0xD1, 0x80, 0x49, 0x3B,  // ......I;
                                /* 5870 */  0x20, 0x96, 0x0D, 0x44, 0x83, 0x22, 0xAF, 0x2D,  //  ..D.".-
                                /* 5878 */  0x0D, 0x8A, 0x80, 0x08, 0xC8, 0xE9, 0xF3, 0x01,  // ........
                                /* 5880 */  0x31, 0x2D, 0xFD, 0x06, 0x42, 0x0B, 0x0E, 0x84,  // 1-..B...
                                /* 5888 */  0x82, 0x08, 0xC8, 0xEA, 0xDF, 0x96, 0x02, 0x71,  // .......q
                                /* 5890 */  0x76, 0x10, 0xAA, 0x23, 0x23, 0x08, 0xFB, 0xFF,  // v..##...
                                /* 5898 */  0xEB, 0x2B, 0x09, 0xC2, 0xD2, 0x81, 0xD0, 0xC4,  // .+......
                                /* 58A0 */  0x29, 0x01, 0x69, 0x4E, 0x10, 0x96, 0x02, 0x84,  // ).iN....
                                /* 58A8 */  0x26, 0xE8, 0x09, 0xC2, 0x12, 0x25, 0x05, 0x61,  // &....%.a
                                /* 58B0 */  0x7A, 0x9A, 0x82, 0x30, 0x4D, 0x51, 0x07, 0x4F,  // z..0MQ.O
                                /* 58B8 */  0xBB, 0x82, 0xB0, 0xBC, 0x20, 0x34, 0xF9, 0xEB,  // .... 4..
                                /* 58C0 */  0x5F, 0x20, 0x56, 0x16, 0x17, 0x84, 0xE5, 0x02,  // _ V.....
                                /* 58C8 */  0xE1, 0x75, 0x41, 0x58, 0x9A, 0xBC, 0x20, 0x2C,  // .uAX.. ,
                                /* 58D0 */  0x75, 0x61, 0x10, 0xA6, 0x39, 0x31, 0x08, 0xD3,  // ua..91..
                                /* 58D8 */  0xDE, 0x18, 0x84, 0x25, 0xCC, 0x3C, 0x30, 0xDA,  // ...%.<0.
                                /* 58E0 */  0x19, 0x84, 0x69, 0x0C, 0x7D, 0xDC, 0xA0, 0xAD,  // ..i.}...
                                /* 58E8 */  0x87, 0x41, 0x63, 0x83, 0x30, 0x6D, 0xB5, 0x41,  // .Ac.0m.A
                                /* 58F0 */  0x58, 0x92, 0xE0, 0xC3, 0xA3, 0xC5, 0x41, 0x98,  // X.....A.
                                /* 58F8 */  0x86, 0xE4, 0x03, 0xA0, 0xD5, 0x07, 0x4A, 0x41,  // ......JA
                                /* 5900 */  0xA8, 0xD2, 0xEE, 0xC3, 0x66, 0xBA, 0x41, 0x04,  // ....f.A.
                                /* 5908 */  0x44, 0xCA, 0x03, 0x51, 0x10, 0x01, 0x91, 0xF6,  // D..Q....
                                /* 5910 */  0x40, 0x14, 0x44, 0xC3, 0x24, 0xF5, 0x8F, 0x0C,  // @.D.$...
                                /* 5918 */  0x14, 0x44, 0x40, 0x56, 0x7E, 0x70, 0x13, 0x90,  // .D@V~p..
                                /* 5920 */  0x73, 0x80, 0x08, 0x88, 0x18, 0xB8, 0xC4, 0x05,  // s.......
                                /* 5928 */  0x22, 0x20, 0x02, 0xB2, 0x02, 0x05, 0x40, 0x4C,  // " ....@L
                                /* 5930 */  0x0F, 0x88, 0x86, 0x45, 0x80, 0x68, 0x2E, 0x20,  // ...E.h. 
                                /* 5938 */  0xAA, 0xC8, 0x01, 0x10, 0xD3, 0x07, 0x22, 0x20,  // ......" 
                                /* 5940 */  0x2B, 0xB1, 0x00, 0xC4, 0x74, 0x81, 0xE8, 0x20,  // +...t.. 
                                /* 5948 */  0x40, 0x80, 0x68, 0x3E, 0x20, 0xAA, 0x4C, 0x03,  // @.h> .L.
                                /* 5950 */  0x10, 0xD3, 0x09, 0xA2, 0x61, 0x13, 0x20, 0x9A,  // ....a. .
                                /* 5958 */  0x17, 0x88, 0x26, 0x15, 0x01, 0xC4, 0x72, 0x83,  // ..&...r.
                                /* 5960 */  0x68, 0x70, 0xC4, 0x04, 0x10, 0xD3, 0x0F, 0xA2,  // hp......
                                /* 5968 */  0x03, 0x02, 0x71, 0x01, 0xC4, 0x32, 0x81, 0x08,  // ..q..2..
                                /* 5970 */  0xC8, 0x6A, 0x64, 0x00, 0x31, 0x6D, 0x20, 0x02,  // .jd.1m .
                                /* 5978 */  0xF2, 0xFF, 0x5F, 0x9B, 0x0E, 0x20, 0xA6, 0x14,  // .._.. ..
                                /* 5980 */  0x44, 0xC7, 0x08, 0x02, 0x44, 0x33, 0x03, 0x51,  // D...D3.Q
                                /* 5988 */  0xBD, 0x3E, 0x80, 0x98, 0x7A, 0x10, 0x1D, 0x13,  // .>..z...
                                /* 5990 */  0x08, 0x10, 0xD5, 0x21, 0x04, 0x88, 0xE9, 0x50,  // ...!...P
                                /* 5998 */  0x02, 0xC4, 0x54, 0x81, 0xE8, 0xD0, 0x40, 0xA4,  // ..T...@.
                                /* 59A0 */  0x00, 0x31, 0x85, 0x20, 0x3A, 0x10, 0x10, 0x2D,  // .1. :..-
                                /* 59A8 */  0x40, 0x4C, 0x2D, 0x88, 0x06, 0x42, 0x80, 0x68,  // @L-..B.h
                                /* 59B0 */  0x66, 0x20, 0xAA, 0xD6, 0x0B, 0x10, 0xD3, 0x0E,  // f ......
                                /* 59B8 */  0xA2, 0x43, 0x00, 0x31, 0x73, 0x08, 0xA0, 0x20,  // .C.1s.. 
                                /* 59C0 */  0x02, 0x72, 0x7E, 0x20, 0xAA, 0x46, 0x0D, 0x10,  // .r~ .F..
                                /* 59C8 */  0xCB, 0x01, 0x22, 0x20, 0xA7, 0x02, 0xA2, 0xB9,  // .." ....
                                /* 59D0 */  0xE4, 0x00, 0xB1, 0x94, 0x20, 0x3A, 0x60, 0x10,  // .... :`.
                                /* 59D8 */  0x3D, 0x40, 0x2C, 0x3F, 0x88, 0x0E, 0x05, 0xC4,  // =@,?....
                                /* 59E0 */  0xD0, 0xA1, 0x80, 0x82, 0x08, 0x88, 0x38, 0x02,  // ......8.
                                /* 59E8 */  0xA2, 0x20, 0x02, 0x22, 0x96, 0x80, 0x28, 0x88,  // . ."..(.
                                /* 59F0 */  0x80, 0x88, 0x27, 0x20, 0x0A, 0xA2, 0xC1, 0x12,  // ..' ....
                                /* 59F8 */  0x51, 0x83, 0xA5, 0xA6, 0x80, 0x58, 0x02, 0x10,  // Q....X..
                                /* 5A00 */  0x01, 0x39, 0x0F, 0x10, 0x55, 0xA2, 0xEA, 0x80,  // .9..U...
                                /* 5A08 */  0x40, 0x41, 0x74, 0x40, 0x20, 0x40, 0x34, 0x1F,  // @At@ @4.
                                /* 5A10 */  0x10, 0x4D, 0x21, 0xEB, 0x40, 0x40, 0x41, 0x74,  // .M!.@@At
                                /* 5A18 */  0x20, 0x20, 0xB6, 0x0E, 0x04, 0x14, 0x44, 0xC7,  //   ....D.
                                /* 5A20 */  0x1A, 0x02, 0x44, 0x33, 0x02, 0x51, 0x75, 0xBA,  // ..D3.Qu.
                                /* 5A28 */  0x80, 0x98, 0x56, 0x10, 0x01, 0x39, 0x8B, 0xB1,  // ..V..9..
                                /* 5A30 */  0xA1, 0x50, 0x65, 0x20, 0x2C, 0x37, 0x08, 0xCD,  // .Pe ,7..
                                /* 5A38 */  0xE9, 0x0C, 0x84, 0xE5, 0x95, 0x36, 0x34, 0x6A,  // .....64j
                                /* 5A40 */  0x0D, 0x84, 0xA5, 0x15, 0x07, 0xC2, 0xB4, 0x9A,  // ........
                                /* 5A48 */  0x3B, 0x40, 0x50, 0x75, 0x20, 0x4C, 0x95, 0xBB,  // ;@Pu L..
                                /* 5A50 */  0x83, 0x03, 0x95, 0x07, 0xC2, 0x54, 0xDA, 0x03,  // .....T..
                                /* 5A58 */  0x61, 0xFF, 0x7F, 0x95, 0xFA, 0x86, 0x42, 0xFD,  // a.....B.
                                /* 5A60 */  0x81, 0xB0, 0x8C, 0x02, 0x41, 0x58, 0x6A, 0x83,  // ....AXj.
                                /* 5A68 */  0x20, 0x2C, 0xBD, 0xC2, 0xE3, 0x05, 0x95, 0x78,  //  ,.....x
                                /* 5A70 */  0x50, 0xA0, 0x16, 0x8F, 0x0F, 0x54, 0x23, 0x08,  // P....T#.
                                /* 5A78 */  0xD3, 0xE5, 0x11, 0x84, 0x69, 0x14, 0x79, 0x78,  // ....i.yx
                                /* 5A80 */  0xA0, 0x26, 0x41, 0x98, 0x76, 0x95, 0x03, 0xA1,  // .&A.v...
                                /* 5A88 */  0x36, 0x87, 0x41, 0x41, 0xA8, 0x3A, 0x9F, 0x03,  // 6.AA.:..
                                /* 5A90 */  0xA5, 0x20, 0x1A, 0x16, 0x31, 0x0A, 0xC4, 0x1E,  // . ..1...
                                /* 5A98 */  0x8E, 0x81, 0x98, 0x14, 0xA7, 0x87, 0x00, 0x0A,  // ........
                                /* 5AA0 */  0x22, 0x20, 0x22, 0x15, 0x88, 0x09, 0x03, 0xD1,  // " ".....
                                /* 5AA8 */  0xB1, 0x8B, 0x00, 0x51, 0x21, 0x56, 0x81, 0x98,  // ...Q!V..
                                /* 5AB0 */  0x10, 0xAF, 0x40, 0x4C, 0x16, 0x88, 0x8E, 0x83,  // ..@L....
                                /* 5AB8 */  0x44, 0x2C, 0x10, 0xD3, 0x60, 0x16, 0x88, 0x89,  // D,..`...
                                /* 5AC0 */  0x07, 0x11, 0x90, 0x93, 0x00, 0x51, 0xE9, 0x6A,  // .....Q.j
                                /* 5AC8 */  0x81, 0x58, 0x10, 0x10, 0x1D, 0xA5, 0x88, 0x5B,  // .X.....[
                                /* 5AD0 */  0x20, 0x26, 0x1A, 0x44, 0x47, 0x48, 0x62, 0x17,  //  &.DGHb.
                                /* 5AD8 */  0x88, 0x49, 0x06, 0x11, 0x90, 0x85, 0xF9, 0x05,  // .I......
                                /* 5AE0 */  0x62, 0x2A, 0x41, 0x04, 0x44, 0x04, 0x03, 0x31,  // b*A.D..1
                                /* 5AE8 */  0x99, 0x20, 0x3A, 0x68, 0x10, 0xC5, 0x40, 0x4C,  // . :h..@L
                                /* 5AF0 */  0x2C, 0x88, 0x0E, 0x30, 0xC4, 0x31, 0x10, 0xD3,  // ,..0.1..
                                /* 5AF8 */  0x0D, 0xA2, 0xC3, 0x00, 0xB1, 0x7C, 0x28, 0xA1,  // .....|(.
                                /* 5B00 */  0x20, 0x3A, 0x48, 0x10, 0xCD, 0x07, 0x09, 0x0A,  //  :H.....
                                /* 5B08 */  0xA2, 0xE3, 0x0E, 0x31, 0x7D, 0xBC, 0xA0, 0x20,  // ...1}.. 
                                /* 5B10 */  0x34, 0xA1, 0x6A, 0x10, 0x96, 0xC9, 0x35, 0x08,  // 4.j...5.
                                /* 5B18 */  0xCB, 0x20, 0x1B, 0x84, 0xA9, 0xB6, 0x3D, 0x08,  // . ....=.
                                /* 5B20 */  0xAA, 0x1B, 0x84, 0x29, 0xF4, 0x7D, 0x00, 0xA0,  // ...).}..
                                /* 5B28 */  0xC2, 0x0F, 0x0E, 0xD4, 0xF8, 0x40, 0xE8, 0xA3,  // .....@..
                                /* 5B30 */  0xE6, 0xD1, 0x81, 0x81, 0xD0, 0xCC, 0xCE, 0x8F,  // ........
                                /* 5B38 */  0x0D, 0x54, 0x3A, 0x08, 0xCB, 0xE7, 0xFD, 0x48,  // .T:....H
                                /* 5B40 */  0x40, 0xC5, 0x83, 0xB0, 0xFF, 0x7F, 0x24, 0xF3,  // @.....$.
                                /* 5B48 */  0x87, 0x0B, 0x0A, 0xA2, 0xE3, 0x20, 0x51, 0x0F,  // ..... Q.
                                /* 5B50 */  0xC4, 0x82, 0x81, 0xE8, 0x60, 0x4A, 0xE4, 0x03,  // ....`J..
                                /* 5B58 */  0xB1, 0x30, 0x20, 0x3A, 0x0A, 0x12, 0xFB, 0x40,  // .0 :...@
                                /* 5B60 */  0x4C, 0x14, 0x88, 0x0E, 0xA3, 0xC4, 0x3F, 0x10,  // L.....?.
                                /* 5B68 */  0x93, 0x0A, 0x22, 0x20, 0x87, 0x04, 0xA2, 0x91,  // .." ....
                                /* 5B70 */  0x81, 0xA8, 0xFC, 0x00, 0x03, 0xA0, 0x20, 0x3A,  // ...... :
                                /* 5B78 */  0x00, 0x90, 0x02, 0x07, 0x00, 0x0A, 0xA2, 0xC3,  // ........
                                /* 5B80 */  0x00, 0x69, 0x70, 0x18, 0xA0, 0x20, 0x02, 0x72,  // .ip.. .r
                                /* 5B88 */  0x88, 0x0A, 0x40, 0x2C, 0x12, 0x88, 0x8E, 0x69,  // ..@,...i
                                /* 5B90 */  0x24, 0x03, 0x10, 0x93, 0x06, 0xA2, 0xE3, 0x1B,  // $.......
                                /* 5B98 */  0x01, 0xA2, 0xA1, 0x81, 0x68, 0x80, 0x0E, 0x40,  // ....h..@
                                /* 5BA0 */  0x2C, 0x0E, 0x88, 0x06, 0x48, 0x4A, 0x0C, 0x90,  // ,...HJ..
                                /* 5BA8 */  0x82, 0x08, 0xC8, 0x41, 0x5B, 0x00, 0xB1, 0xD8,  // ...A[...
                                /* 5BB0 */  0x20, 0x3A, 0x6E, 0x92, 0x18, 0x40, 0x2C, 0x14,  //  :n..@,.
                                /* 5BB8 */  0x88, 0x8E, 0x97, 0xE4, 0x79, 0xF4, 0x78, 0xC9,  // ....y.x.
                                /* 5BC0 */  0x40, 0x74, 0xD4, 0x23, 0x3D, 0x80, 0x58, 0x04,  // @t.#=.X.
                                /* 5BC8 */  0x10, 0x1D, 0x47, 0x09, 0x10, 0x95, 0x12, 0x04,  // ..G.....
                                /* 5BD0 */  0x88, 0x05, 0x02, 0xD1, 0x71, 0x8F, 0x00, 0x51,  // ....q..Q
                                /* 5BD8 */  0x91, 0x45, 0x06, 0x48, 0x41, 0x74, 0x34, 0x24,  // .E.HAt4$
                                /* 5BE0 */  0x4D, 0x80, 0x58, 0x08, 0x10, 0x01, 0x93, 0x2A,  // M.X....*
                                /* 5BE8 */  0xC0, 0x14, 0x44, 0x40, 0x96, 0x9A, 0x05, 0x88,  // ..D@....
                                /* 5BF0 */  0x09, 0x07, 0x11, 0x90, 0x03, 0x03, 0xD1, 0xF8,  // ........
                                /* 5BF8 */  0x40, 0x34, 0x46, 0x97, 0x81, 0x51, 0x10, 0x1D,  // @4F..Q..
                                /* 5C00 */  0x04, 0x48, 0x98, 0x83, 0x00, 0x05, 0xD1, 0x71,  // .H.....q
                                /* 5C08 */  0x94, 0xA4, 0x01, 0x62, 0x31, 0x40, 0x74, 0x6C,  // ...b1@tl
                                /* 5C10 */  0x23, 0x71, 0x80, 0x58, 0x38, 0x10, 0x0D, 0x84,  // #q.X8...
                                /* 5C18 */  0xD4, 0x19, 0x08, 0x05, 0x11, 0x90, 0x23, 0x03,  // ......#.
                                /* 5C20 */  0xD1, 0xC7, 0xCD, 0x81, 0x53, 0x10, 0x0D, 0x9C,  // ....S...
                                /* 5C28 */  0x00, 0xD1, 0xFF, 0xBF, 0xC4, 0x3E, 0x40, 0x4C,  // .....>@L
                                /* 5C30 */  0x30, 0x88, 0x06, 0x42, 0x0A, 0x0D, 0x84, 0x82,  // 0..B....
                                /* 5C38 */  0xE8, 0xF8, 0x48, 0x1A, 0x01, 0xB1, 0x00, 0x20,  // ..H.... 
                                /* 5C40 */  0x3A, 0x90, 0x10, 0x20, 0x2A, 0x24, 0x12, 0x10,  // :.. *$..
                                /* 5C48 */  0x8B, 0x00, 0x22, 0x20, 0x07, 0x02, 0xA2, 0x21,  // .." ...!
                                /* 5C50 */  0x32, 0x01, 0xB1, 0x44, 0x20, 0x3A, 0x90, 0x90,  // 2..D :..
                                /* 5C58 */  0x4E, 0x40, 0x2C, 0x0A, 0x88, 0x0E, 0x0E, 0xA4,  // N@,.....
                                /* 5C60 */  0xD4, 0xC1, 0x81, 0x82, 0xE8, 0xE0, 0x40, 0x52,  // ......@R
                                /* 5C68 */  0x1D, 0x1C, 0x28, 0x88, 0x0E, 0x12, 0xA4, 0xD5,  // ..(.....
                                /* 5C70 */  0x41, 0x82, 0x82, 0xE8, 0x60, 0x40, 0x80, 0x68,  // A...`@.h
                                /* 5C78 */  0x54, 0x20, 0x2A, 0x39, 0xD6, 0xA0, 0x28, 0x88,  // T *9..(.
                                /* 5C80 */  0x0E, 0x02, 0x24, 0xD7, 0x41, 0x80, 0x82, 0x68,  // ..$.A..h
                                /* 5C88 */  0x00, 0x24, 0xD9, 0x90, 0x28, 0x08, 0x95, 0xDC,  // .$..(...
                                /* 5C90 */  0xEC, 0x68, 0x40, 0xA3, 0x81, 0x30, 0x59, 0xD5,  // .h@..0Y.
                                /* 5C98 */  0x40, 0x69, 0x36, 0x10, 0x26, 0xA1, 0x1B, 0x08,  // @i6.&...
                                /* 5CA0 */  0x0D, 0x07, 0x42, 0xCB, 0x81, 0xD0, 0x74, 0x20,  // ..B...t 
                                /* 5CA8 */  0x4C, 0x40, 0xBB, 0x63, 0x0C, 0x05, 0xA1, 0x91,  // L@.c....
                                /* 5CB0 */  0xE3, 0x81, 0xB0, 0xB0, 0xF5, 0x40, 0x58, 0xC4,  // .....@X.
                                /* 5CB8 */  0x7C, 0x20, 0x2C, 0x54, 0x41, 0x10, 0x26, 0x29,  // | ,TA.&)
                                /* 5CC0 */  0xE1, 0xD1, 0x8A, 0x36, 0x3C, 0x22, 0x50, 0x10,  // ...6<"P.
                                /* 5CC8 */  0x1D, 0x12, 0x49, 0x44, 0x20, 0x96, 0x06, 0x44,  // ..ID ..D
                                /* 5CD0 */  0xC7, 0x15, 0x92, 0x11, 0x88, 0x25, 0x00, 0xD1,  // .....%..
                                /* 5CD8 */  0xB1, 0x90, 0x00, 0x51, 0x25, 0x1D, 0x8F, 0x61,  // ...Q%..a
                                /* 5CE0 */  0xB4, 0xE4, 0x31, 0x8C, 0x82, 0x08, 0xC8, 0x79,  // ..1....y
                                /* 5CE8 */  0x80, 0xE8, 0xD1, 0xF0, 0x31, 0x88, 0xA6, 0x04,  // ....1...
                                /* 5CF0 */  0x62, 0x9A, 0x41, 0x34, 0x00, 0x02, 0x44, 0x95,  // b.A4..D.
                                /* 5CF8 */  0xB4, 0x04, 0xA2, 0x31, 0x81, 0x68, 0xCD, 0xE3,  // ...1.h..
                                /* 5D00 */  0x14, 0xED, 0x79, 0x9C, 0xA2, 0x20, 0x3A, 0x4E,  // ..y.. :N
                                /* 5D08 */  0x11, 0x20, 0xFA, 0xFF, 0xCF, 0x08, 0x44, 0xB5,  // . ....D.
                                /* 5D10 */  0x06, 0x05, 0x62, 0xCA, 0x41, 0x74, 0x84, 0x21,  // ..b.At.!
                                /* 5D18 */  0x45, 0x8F, 0x36, 0x14, 0x44, 0x40, 0xA4, 0x29,  // E.6.D@.)
                                /* 5D20 */  0x10, 0x05, 0xD1, 0x61, 0x89, 0x54, 0x05, 0x62,  // ...a.T.b
                                /* 5D28 */  0x8A, 0x41, 0x74, 0x74, 0x22, 0x40, 0x54, 0x4B,  // .Att"@TK
                                /* 5D30 */  0xD6, 0x63, 0x0D, 0x0D, 0x7B, 0x4C, 0xA2, 0x20,  // .c..{L. 
                                /* 5D38 */  0x3A, 0xD0, 0x10, 0x20, 0x9A, 0x1D, 0x88, 0x6A,  // :.. ...j
                                /* 5D40 */  0x2E, 0x3B, 0x60, 0x0A, 0xA2, 0xC1, 0x92, 0xB4,  // .;`.....
                                /* 5D48 */  0x83, 0xA5, 0x20, 0x3A, 0x2A, 0x12, 0x20, 0x9A,  // .. :*. .
                                /* 5D50 */  0x14, 0x88, 0xE6, 0x8D, 0x0B, 0xC4, 0xD2, 0x83,  // ........
                                /* 5D58 */  0xE8, 0xF0, 0x43, 0xF2, 0x1E, 0xD5, 0x28, 0x88,  // ..C...(.
                                /* 5D60 */  0x0E, 0x55, 0x24, 0x31, 0x08, 0x4B, 0x06, 0x42,  // .U$1.K.B
                                /* 5D68 */  0xB3, 0x35, 0x3E, 0x7A, 0xD1, 0xC8, 0x87, 0x2C,  // .5>z...,
                                /* 5D70 */  0x5A, 0x19, 0x84, 0x69, 0xE9, 0x7C, 0xE0, 0xA1,  // Z..i.|..
                                /* 5D78 */  0xA1, 0x0F, 0x57, 0xB4, 0xF4, 0x81, 0x8B, 0xA6,  // ..W.....
                                /* 5D80 */  0x3E, 0xF8, 0xD0, 0xD6, 0x03, 0xA1, 0xB1, 0x87,  // >.......
                                /* 5D88 */  0x4F, 0x73, 0x1F, 0x86, 0x68, 0xEF, 0x23, 0x11,  // Os..h.#.
                                /* 5D90 */  0x0D, 0x7E, 0x4C, 0xA4, 0xC5, 0x81, 0x69, 0xF2,  // .~L...i.
                                /* 5D98 */  0xA3, 0x10, 0x6D, 0x3E, 0x44, 0x5A, 0x7D, 0x50,  // ..m>DZ}P
                                /* 5DA0 */  0x34, 0xFB, 0x40, 0x68, 0xF7, 0x23, 0x1B, 0x0D,  // 4.@h.#..
                                /* 5DA8 */  0x7F, 0xB8, 0xA3, 0xE5, 0x41, 0x58, 0xBA, 0xF8,  // ....AX..
                                /* 5DB0 */  0xA0, 0xB4, 0x3E, 0x38, 0xCD, 0x3F, 0x04, 0x0A,  // ..>8.?..
                                /* 5DB8 */  0x42, 0x53, 0xF6, 0x1F, 0x2E, 0xBD, 0x0E, 0x3C,  // BS.....<
                                /* 5DC0 */  0x24, 0x30, 0x03, 0x20, 0x2C, 0xF5, 0x43, 0xF2,  // $0. ,.C.
                                /* 5DC8 */  0x41, 0x80, 0x49, 0x00, 0x61, 0x6A, 0x2D, 0x80,  // A.I.aj-.
                                /* 5DD0 */  0xB0, 0x1C, 0x1A, 0x40, 0x58, 0x42, 0x0F, 0x20,  // ...@XB. 
                                /* 5DD8 */  0x4C, 0x8F, 0x09, 0x10, 0xA6, 0x4F, 0x05, 0x08,  // L....O..
                                /* 5DE0 */  0xD3, 0xEB, 0x02, 0x84, 0x25, 0x91, 0x01, 0xC2,  // ....%...
                                /* 5DE8 */  0xF2, 0xDA, 0x00, 0x61, 0xFF, 0xFF, 0xC3, 0x62,  // ...a...b
                                /* 5DF0 */  0x10, 0x96, 0xD4, 0x08, 0x08, 0xD3, 0xA9, 0x04,  // ........
                                /* 5DF8 */  0x84, 0x05, 0x74, 0x02, 0xF2, 0x20, 0xE0, 0xB4,  // ..t.. ..
                                /* 5E00 */  0x20, 0x3A, 0xB8, 0x13, 0x29, 0x40, 0x2C, 0x26,  //  :..)@,&
                                /* 5E08 */  0x88, 0x8E, 0x33, 0x44, 0x0B, 0x10, 0x0B, 0x07,  // ..3D....
                                /* 5E10 */  0xA2, 0x63, 0x08, 0xF1, 0x02, 0xC4, 0x44, 0x82,  // .c....D.
                                /* 5E18 */  0xE8, 0xC0, 0x4C, 0xCC, 0x00, 0x31, 0xB1, 0x20,  // ..L..1. 
                                /* 5E20 */  0x3A, 0xBA, 0x10, 0x39, 0x20, 0x4C, 0x80, 0x1D,  // :..9 L..
                                /* 5E28 */  0x10, 0x26, 0xFC, 0xE1, 0xF9, 0x28, 0xC3, 0x40,  // .&...(.@
                                /* 5E30 */  0x04, 0x46, 0xFC, 0x00, 0x31, 0x39, 0x20, 0x3A,  // .F..19 :
                                /* 5E38 */  0x8C, 0x10, 0x41, 0x40, 0x4C, 0x84, 0x21, 0x20,  // ..A@L.! 
                                /* 5E40 */  0x16, 0x5C, 0x11, 0x10, 0x93, 0xE1, 0x08, 0x88,  // .\......
                                /* 5E48 */  0x85, 0x97, 0x04, 0xC4, 0xA4, 0x58, 0x02, 0x62,  // .....X.b
                                /* 5E50 */  0x32, 0x3C, 0x01, 0x31, 0x51, 0x20, 0x3A, 0xFE,  // 2<.1Q :.
                                /* 5E58 */  0x10, 0x53, 0x40, 0x4C, 0x2A, 0x88, 0x0E, 0xBC,  // .S@L*...
                                /* 5E60 */  0xC4, 0x15, 0x10, 0x8B, 0x02, 0xA2, 0xC1, 0x10,  // ........
                                /* 5E68 */  0x59, 0x40, 0x4C, 0x0D, 0x88, 0x0E, 0xD1, 0x04,  // Y@L.....
                                /* 5E70 */  0x88, 0x4A, 0xB0, 0x35, 0x48, 0xEA, 0x6B, 0x90,  // .J.5H.k.
                                /* 5E78 */  0x14, 0x44, 0x07, 0x7B, 0x62, 0x0C, 0x88, 0xC9,  // .D.{b...
                                /* 5E80 */  0x05, 0x11, 0x10, 0x71, 0x06, 0x44, 0x41, 0x34,  // ...q.DA4
                                /* 5E88 */  0x58, 0x62, 0x6D, 0xB0, 0x14, 0x44, 0x47, 0x2D,  // Xbm..DG-
                                /* 5E90 */  0xE2, 0x0D, 0x88, 0xC9, 0x04, 0xD1, 0x80, 0x89,  // ........
                                /* 5E98 */  0xBA, 0xE1, 0x50, 0x77, 0x20, 0x2C, 0x3A, 0x08,  // ..Pw ,:.
                                /* 5EA0 */  0x15, 0xE2, 0x0F, 0x84, 0xC5, 0x00, 0xA1, 0xF2,  // ........
                                /* 5EA8 */  0x05, 0x82, 0xB0, 0x00, 0x06, 0x41, 0x98, 0x74,  // .....A.t
                                /* 5EB0 */  0x85, 0x20, 0xD4, 0x21, 0x08, 0x13, 0x2D, 0x11,  // . .!..-.
                                /* 5EB8 */  0x84, 0x5A, 0x04, 0x61, 0x21, 0x34, 0x82, 0x30,  // .Z.a!4.0
                                /* 5EC0 */  0xC9, 0x26, 0x41, 0x58, 0x60, 0x10, 0x2A, 0xDE,  // .&AX`.*.
                                /* 5EC8 */  0xE5, 0x80, 0x58, 0x12, 0x10, 0x0D, 0x82, 0xC8,  // ..X.....
                                /* 5ED0 */  0x04, 0x62, 0x71, 0x40, 0x04, 0x64, 0x69, 0x36,  // .bq@.di6
                                /* 5ED8 */  0x81, 0xD8, 0xFF, 0x5F, 0x28, 0x88, 0x0E, 0xD4,  // ..._(...
                                /* 5EE0 */  0xC4, 0x27, 0x10, 0x93, 0x0D, 0xA2, 0x83, 0x00,  // .'......
                                /* 5EE8 */  0x01, 0xA2, 0x52, 0x84, 0x02, 0xB1, 0x58, 0x20,  // ..R...X 
                                /* 5EF0 */  0x02, 0x72, 0x48, 0x20, 0x1A, 0xDD, 0xE9, 0x11,  // .rH ....
                                /* 5EF8 */  0x81, 0x4A, 0x05, 0x61, 0x52, 0xAD, 0x82, 0xB0,  // .J.aR...
                                /* 5F00 */  0xFF, 0x3F                                       // .?
                            })
                        }
                    }

                    Device (HKDV)
                    {
                        Name (_HID, "LHK2019")  // _HID: Hardware ID
                        Name (_UID, Zero)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (WMIU)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "LSK20")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x3C)
                        {
                            /* 0000 */  0x74, 0x09, 0x6C, 0xCE, 0x07, 0x04, 0x50, 0x4F,  // t.l...PO
                            /* 0008 */  0x88, 0xBA, 0x4F, 0xC3, 0xB6, 0x55, 0x9A, 0xD8,  // ..O..U..
                            /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x0C, 0xDE, 0xC0, 0x8F,  // SK......
                            /* 0018 */  0xE4, 0xB4, 0xFD, 0x43, 0xB0, 0xF3, 0x88, 0x71,  // ...C...q
                            /* 0020 */  0x71, 0x1C, 0x12, 0x94, 0xD0, 0x00, 0x01, 0x08,  // q.......
                            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                            /* 0038 */  0x44, 0x41, 0x01, 0x00                           // DA..
                        })
                        Method (WMSK, 3, NotSerialized)
                        {
                            If ((Arg1 == One))
                            {
                                If ((ToInteger (Arg2) == One))
                                {
                                    Return (0x03)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x02))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x03))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x04))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x05))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x06))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x07))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x08))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x09))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0A))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0B))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0C))
                                {
                                    If ((CNFG == One))
                                    {
                                        Return (0x15)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0D))
                                {
                                    Return (Zero)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0E))
                                {
                                    Return (0x15)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x0F))
                                {
                                    Return (0x15)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD0))
                            {
                                If ((LSKD == One))
                                {
                                    Return (One)
                                }
                                ElseIf ((LSKD == 0x02))
                                {
                                    Return (0x05)
                                }
                                ElseIf ((LSKD == 0x03))
                                {
                                    Return (0x06)
                                }
                                ElseIf ((LSKD == 0x04))
                                {
                                    If ((^^PCI0.LPC0.EC0.HKDB == Zero))
                                    {
                                        Return (0x02)
                                    }
                                    Else
                                    {
                                        Return (0x03)
                                    }
                                }
                                ElseIf ((LSKD == 0x05))
                                {
                                    Return (0x04)
                                }
                                ElseIf ((LSKD == 0x06))
                                {
                                    Return (0x07)
                                }
                                ElseIf ((LSKD == 0x07))
                                {
                                    Return (0x08)
                                }
                                ElseIf ((LSKD == 0x08))
                                {
                                    Return (0x09)
                                }
                                ElseIf ((LSKD == 0x09))
                                {
                                    Return (0x0A)
                                }
                                ElseIf ((LSKD == 0x0A))
                                {
                                    Return (0x0B)
                                }
                                ElseIf ((LSKD == 0x0B))
                                {
                                    Return (0x0C)
                                }
                                ElseIf ((LSKD == 0x0C))
                                {
                                    Return (0x0D)
                                }
                                ElseIf ((LSKD == 0x0D))
                                {
                                    Return (0x0E)
                                }
                                ElseIf ((LSKD == 0x0E))
                                {
                                    Return (0x0F)
                                }
                                ElseIf ((LSKD == 0x0F))
                                {
                                    If ((PANT & 0x20))
                                    {
                                        Return (0x10)
                                    }
                                }
                                ElseIf ((LSKD == 0x13))
                                {
                                    If (((MCSK == 0x02) && (CNFG == One)))
                                    {
                                        Return (0x14)
                                    }
                                }
                                ElseIf ((LSKD == 0x14))
                                {
                                    If (((MCSK == 0x02) && (CNFG == One)))
                                    {
                                        Return (0x15)
                                    }
                                }
                                ElseIf ((LSKD == 0x15))
                                {
                                    Return (0x16)
                                }
                                ElseIf ((LSKD == 0x16))
                                {
                                    Return (0x17)
                                }
                                ElseIf ((LSKD == 0x17))
                                {
                                    Return (0x18)
                                }
                                ElseIf ((LSKD == 0x18))
                                {
                                    Return (0x19)
                                }
                                ElseIf ((LSKD == 0x19))
                                {
                                    Return (0x1A)
                                }
                                ElseIf ((LSKD == 0x25))
                                {
                                    Return (0x26)
                                }
                                ElseIf ((LSKD == 0x1A))
                                {
                                    Return (0x1B)
                                }
                                ElseIf ((LSKD == 0x1B))
                                {
                                    Return (0x1C)
                                }
                                ElseIf ((LSKD == 0x1C))
                                {
                                    Return (0x1D)
                                }
                                ElseIf ((LSKD == 0x1D))
                                {
                                    Return (0x1E)
                                }
                                ElseIf ((LSKD == 0x1E))
                                {
                                    Return (0x1F)
                                }
                                ElseIf ((LSKD == 0x1F))
                                {
                                    Return (0x20)
                                }
                                ElseIf ((LSKD == 0x20))
                                {
                                    Return (0x21)
                                }
                                ElseIf ((LSKD == 0x21))
                                {
                                    Return (0x22)
                                }
                                ElseIf ((LSKD == 0x22))
                                {
                                    Return (0x23)
                                }
                                ElseIf ((LSKD == 0x23))
                                {
                                    Return (0x24)
                                }
                                ElseIf ((LSKD == 0x24))
                                {
                                    Return (0x25)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Name (WQDA, Buffer (0x0418)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x08, 0x04, 0x00, 0x00, 0x5E, 0x0C, 0x00, 0x00,  // ....^...
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0xA8, 0x40, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // .@.....B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x28, 0x81, 0x42, 0x04,  // ....(.B.
                            /* 0028 */  0x8A, 0x40, 0xA4, 0x50, 0x30, 0x28, 0x0D, 0x20,  // .@.P0(. 
                            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                            /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                            /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                            /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                            /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                            /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x22,  // .....9("
                            /* 0090 */  0x1A, 0x1A, 0x25, 0x66, 0x4C, 0x04, 0xB6, 0x73,  // ..%fL..s
                            /* 0098 */  0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17, 0x20, 0x1D,  // l..4.. .
                            /* 00A0 */  0x43, 0x23, 0x38, 0xAE, 0x63, 0x30, 0x58, 0x90,  // C#8.c0X.
                            /* 00A8 */  0x43, 0x31, 0x44, 0x41, 0x02, 0xAC, 0xA2, 0x91,  // C1DA....
                            /* 00B0 */  0x61, 0x84, 0x08, 0x72, 0x7C, 0x81, 0xBA, 0xC4,  // a..r|...
                            /* 00B8 */  0x13, 0x88, 0xC7, 0xE4, 0x01, 0x18, 0x21, 0x4C,  // ......!L
                            /* 00C0 */  0x8B, 0xB0, 0x82, 0x36, 0x62, 0x02, 0xC3, 0x1E,  // ...6b...
                            /* 00C8 */  0x0A, 0xE6, 0x07, 0x20, 0x01, 0x9E, 0x05, 0x58,  // ... ...X
                            /* 00D0 */  0x1F, 0x23, 0x21, 0xB0, 0x7B, 0x01, 0xE2, 0x04,  // .#!.{...
                            /* 00D8 */  0x68, 0x1E, 0x8D, 0x46, 0x75, 0x9C, 0xC6, 0x88,  // h..Fu...
                            /* 00E0 */  0xD2, 0x96, 0x00, 0xC5, 0x23, 0x13, 0x4C, 0x88,  // ....#.L.
                            /* 00E8 */  0x28, 0x21, 0x3A, 0xC3, 0x13, 0x5A, 0x28, 0xC3,  // (!:..Z(.
                            /* 00F0 */  0x45, 0x89, 0x13, 0x25, 0x70, 0x84, 0xDE, 0x04,  // E..%p...
                            /* 00F8 */  0x18, 0x83, 0x20, 0x08, 0x81, 0x43, 0x54, 0x36,  // .. ..CT6
                            /* 0100 */  0x48, 0xA1, 0xB6, 0x3F, 0x08, 0x22, 0xC9, 0xC1,  // H..?."..
                            /* 0108 */  0x89, 0x80, 0x45, 0x1A, 0x0D, 0xEA, 0x14, 0x90,  // ..E.....
                            /* 0110 */  0xE0, 0xA9, 0xC0, 0x27, 0x82, 0x93, 0x3A, 0xAF,  // ...'..:.
                            /* 0118 */  0xA3, 0x3A, 0xEB, 0x20, 0xC1, 0x4F, 0xA4, 0xCE,  // .:. .O..
                            /* 0120 */  0xE3, 0x00, 0x19, 0x38, 0x9B, 0x9A, 0xD9, 0x75,  // ...8...u
                            /* 0128 */  0x3E, 0x80, 0xE0, 0x1A, 0x50, 0xFF, 0xFF, 0x79,  // >...P..y
                            /* 0130 */  0x3E, 0x16, 0xB0, 0x61, 0x86, 0xC3, 0x0C, 0xD1,  // >..a....
                            /* 0138 */  0x83, 0xF5, 0x04, 0x0E, 0x91, 0x01, 0x7A, 0x62,  // ......zb
                            /* 0140 */  0x4F, 0x04, 0x58, 0x87, 0x93, 0xD1, 0x71, 0xA0,  // O.X...q.
                            /* 0148 */  0x54, 0x01, 0x66, 0xC7, 0xAD, 0x49, 0x27, 0x38,  // T.f..I'8
                            /* 0150 */  0x1E, 0x9F, 0x03, 0x3C, 0x9F, 0x13, 0x4E, 0x60,  // ...<..N`
                            /* 0158 */  0xF9, 0x83, 0x40, 0x8D, 0xCC, 0xD0, 0x36, 0x38,  // ..@...68
                            /* 0160 */  0x2D, 0x1D, 0x04, 0x7C, 0x00, 0x30, 0x81, 0xC5,  // -..|.0..
                            /* 0168 */  0x1E, 0x26, 0xE8, 0x78, 0xC0, 0x7F, 0x00, 0x78,  // .&.x...x
                            /* 0170 */  0x3E, 0x88, 0xF0, 0xCE, 0xE0, 0xF9, 0x7A, 0x10,  // >.....z.
                            /* 0178 */  0x3A, 0x5B, 0xC8, 0xC9, 0x78, 0x50, 0xC7, 0x0A,  // :[..xP..
                            /* 0180 */  0x5F, 0x10, 0x30, 0xE0, 0x47, 0xFB, 0xC2, 0x10,  // _.0.G...
                            /* 0188 */  0xE6, 0xA5, 0x21, 0xEE, 0xC1, 0x5B, 0xEB, 0x15,  // ..!..[..
                            /* 0190 */  0x82, 0x10, 0x38, 0x34, 0x84, 0xFE, 0x1A, 0x16,  // ..84....
                            /* 0198 */  0x35, 0x78, 0x7A, 0xB2, 0xE0, 0x87, 0x0A, 0x06,  // 5xz.....
                            /* 01A0 */  0xCC, 0xC7, 0x73, 0x5A, 0x3E, 0x7B, 0x78, 0x78,  // ..sZ>{xx
                            /* 01A8 */  0xF0, 0x4F, 0x14, 0xC0, 0xE2, 0x3C, 0x81, 0xBB,  // .O...<..
                            /* 01B0 */  0x1C, 0xB0, 0x13, 0x05, 0x7E, 0xE0, 0xF0, 0x2F,  // ....~../
                            /* 01B8 */  0x15, 0x86, 0xF5, 0x45, 0xE2, 0x1D, 0x22, 0x81,  // ...E..".
                            /* 01C0 */  0xB1, 0x02, 0x63, 0xFE, 0xFF, 0xC0, 0x1E, 0xB9,  // ..c.....
                            /* 01C8 */  0xFD, 0x0A, 0x40, 0x08, 0x7E, 0x4A, 0x4F, 0x06,  // ..@.~JO.
                            /* 01D0 */  0xCF, 0x20, 0x11, 0x8E, 0xCA, 0xE8, 0x4F, 0x10,  // . ....O.
                            /* 01D8 */  0x7D, 0xCE, 0x5B, 0x10, 0xD1, 0x8E, 0xEA, 0x1C,  // }.[.....
                            /* 01E0 */  0x8E, 0x22, 0x54, 0x88, 0xB3, 0x30, 0x50, 0xB8,  // ."T..0P.
                            /* 01E8 */  0x60, 0x01, 0x8D, 0x93, 0xC0, 0x22, 0x87, 0x8A,  // `...."..
                            /* 01F0 */  0x1E, 0x04, 0x07, 0x3C, 0x87, 0x43, 0x0A, 0x7A,  // ...<.C.z
                            /* 01F8 */  0x10, 0x27, 0x13, 0xE5, 0x3C, 0x8E, 0xC9, 0xA7,  // .'..<...
                            /* 0200 */  0x14, 0x23, 0x1C, 0xD3, 0xC3, 0xC9, 0x53, 0x87,  // .#....S.
                            /* 0208 */  0x6F, 0x1B, 0x07, 0x7F, 0x5E, 0xC7, 0x7A, 0x88,  // o...^.z.
                            /* 0210 */  0x6C, 0xE0, 0x87, 0x80, 0x39, 0x5B, 0x78, 0x08,  // l...9[x.
                            /* 0218 */  0x7C, 0x00, 0x07, 0x74, 0x8A, 0x56, 0x3A, 0x31,  // |..t.V:1
                            /* 0220 */  0xE4, 0x79, 0x86, 0x8F, 0x19, 0x3B, 0x00, 0xAE,  // .y...;..
                            /* 0228 */  0xCA, 0x03, 0x08, 0x13, 0xFF, 0x34, 0x90, 0xB4,  // .....4..
                            /* 0230 */  0x37, 0x02, 0x85, 0xF1, 0x09, 0x07, 0x70, 0x05,  // 7.....p.
                            /* 0238 */  0xF4, 0x00, 0x01, 0x9E, 0xB3, 0x01, 0x5C, 0xEC,  // ......\.
                            /* 0240 */  0x93, 0x8F, 0x12, 0xE2, 0xED, 0x21, 0xFA, 0xB9,  // .....!..
                            /* 0248 */  0x9C, 0xCC, 0x2B, 0x84, 0x8F, 0x37, 0x98, 0xFF,  // ..+..7..
                            /* 0250 */  0xFF, 0xF1, 0x06, 0xD6, 0x05, 0xC6, 0xDA, 0xAE,  // ........
                            /* 0258 */  0x37, 0x64, 0x4A, 0xCF, 0x34, 0xEF, 0x36, 0x46,  // 7dJ.4.6F
                            /* 0260 */  0x39, 0x2C, 0xC3, 0x3C, 0xDE, 0xF8, 0x76, 0xD0,  // 9,.<..v.
                            /* 0268 */  0x1A, 0x8C, 0xEE, 0x36, 0xEC, 0x3C, 0x72, 0x12,  // ...6.<r.
                            /* 0270 */  0xA1, 0x18, 0xEE, 0x83, 0x44, 0x9C, 0xD8, 0xE1,  // ....D...
                            /* 0278 */  0x22, 0xC4, 0x7E, 0xE4, 0x30, 0xDE, 0xE3, 0x0D,  // ".~.0...
                            /* 0280 */  0x8B, 0x77, 0x1C, 0xD0, 0x31, 0xC4, 0xC7, 0x1B,  // .w..1...
                            /* 0288 */  0x80, 0x1F, 0xA7, 0x83, 0xC7, 0x12, 0xF0, 0x9F,  // ........
                            /* 0290 */  0x15, 0xF8, 0xA9, 0x04, 0x4C, 0xFF, 0xFF, 0x53,  // ....L..S
                            /* 0298 */  0x09, 0xFC, 0xC4, 0x0F, 0x02, 0x9D, 0x75, 0x9C,  // ......u.
                            /* 02A0 */  0x16, 0x44, 0x36, 0x16, 0x6B, 0x02, 0xC9, 0x82,  // .D6.k...
                            /* 02A8 */  0x50, 0xCE, 0x05, 0xCB, 0x23, 0xAE, 0x30, 0x8F,  // P...#.0.
                            /* 02B0 */  0x27, 0xF2, 0x39, 0x44, 0x7E, 0xA9, 0x88, 0x70,  // '.9D~..p
                            /* 02B8 */  0x06, 0xC7, 0x10, 0xE9, 0xB4, 0x62, 0x1C, 0xD8,  // .....b..
                            /* 02C0 */  0x2B, 0x87, 0xEF, 0x01, 0x4F, 0x16, 0x3C, 0x11,  // +...O.<.
                            /* 02C8 */  0xB0, 0x0E, 0x72, 0x3C, 0x0B, 0x85, 0x94, 0xD1,  // ..r<....
                            /* 02D0 */  0x68, 0x54, 0x1E, 0x84, 0xB5, 0xC0, 0x08, 0xCE,  // hT......
                            /* 02D8 */  0x20, 0x06, 0x74, 0x50, 0x08, 0x1D, 0x90, 0x70,  //  .tP...p
                            /* 02E0 */  0x4A, 0x40, 0x34, 0xAD, 0xF7, 0x21, 0x76, 0xEA,  // J@4..!v.
                            /* 02E8 */  0xF1, 0xFD, 0xC8, 0x04, 0x53, 0xDD, 0x8D, 0xE8,  // ....S...
                            /* 02F0 */  0x3C, 0x7D, 0x23, 0xE0, 0xF7, 0x14, 0x9F, 0x11,  // <}#.....
                            /* 02F8 */  0x0C, 0x6E, 0x85, 0xF7, 0x0F, 0xD0, 0x8C, 0x38,  // .n.....8
                            /* 0300 */  0x88, 0x6F, 0x0C, 0x3E, 0x13, 0x78, 0xA3, 0x27,  // .o.>.x.'
                            /* 0308 */  0x82, 0x51, 0x73, 0x64, 0x42, 0x4D, 0xC3, 0x53,  // .QsdBM.S
                            /* 0310 */  0x7D, 0xB1, 0x31, 0x81, 0x75, 0x5D, 0x86, 0x40,  // }.1.u].@
                            /* 0318 */  0xA6, 0xEF, 0x98, 0x00, 0x0A, 0x20, 0x5F, 0x0A,  // ..... _.
                            /* 0320 */  0x7C, 0xD2, 0x79, 0x30, 0x60, 0x63, 0x78, 0xD8,  // |.y0`cx.
                            /* 0328 */  0x31, 0x9A, 0xD1, 0xB9, 0xE0, 0xC9, 0xA3, 0x24,  // 1......$
                            /* 0330 */  0x4E, 0x9E, 0x82, 0x78, 0xF2, 0x8E, 0x3F, 0x79,  // N..x..?y
                            /* 0338 */  0xF4, 0x9D, 0xC2, 0x87, 0x2B, 0x4E, 0xE0, 0xB8,  // ....+N..
                            /* 0340 */  0x63, 0xA7, 0x57, 0x10, 0xFC, 0x64, 0xFF, 0xFF,  // c.W..d..
                            /* 0348 */  0xA7, 0xF6, 0xA8, 0xE0, 0x59, 0xF8, 0xD2, 0x82,  // ....Y...
                            /* 0350 */  0x1B, 0x3C, 0xDC, 0x5B, 0xC6, 0x91, 0x87, 0x79,  // .<.[...y
                            /* 0358 */  0xA7, 0xF2, 0xE9, 0xCA, 0x60, 0x41, 0xC2, 0xBC,  // ....`A..
                            /* 0360 */  0x2F, 0xE0, 0x80, 0xDE, 0xEE, 0x5E, 0x1C, 0x0E,  // /....^..
                            /* 0368 */  0x37, 0xC4, 0xF9, 0x1E, 0x7A, 0x04, 0x1F, 0x3F,  // 7...z..?
                            /* 0370 */  0x7C, 0x66, 0xC0, 0x0D, 0x89, 0x5D, 0x03, 0xF8,  // |f...]..
                            /* 0378 */  0x68, 0x7C, 0x0D, 0xE0, 0xA3, 0xF4, 0x1D, 0x0B,  // h|......
                            /* 0380 */  0x7C, 0x02, 0xEF, 0x01, 0x20, 0x87, 0xC7, 0x84,  // |... ...
                            /* 0388 */  0x1F, 0x15, 0xBD, 0x67, 0x78, 0x5C, 0x7C, 0xC8,  // ...gx\|.
                            /* 0390 */  0xBE, 0x22, 0x31, 0xEC, 0x67, 0x0D, 0x5F, 0xD2,  // ."1.g._.
                            /* 0398 */  0x4E, 0xF0, 0x95, 0xE2, 0x85, 0x0D, 0x03, 0xEB,  // N.......
                            /* 03A0 */  0x43, 0x00, 0x87, 0x35, 0x5A, 0xD8, 0x43, 0x7E,  // C..5Z.C~
                            /* 03A8 */  0x49, 0xF1, 0x09, 0xC7, 0x33, 0x33, 0x46, 0x58,  // I...33FX
                            /* 03B0 */  0x1F, 0x04, 0x1C, 0xE6, 0x20, 0x00, 0x9A, 0x03,  // .... ...
                            /* 03B8 */  0x1B, 0xFE, 0x06, 0xE0, 0x4B, 0x40, 0x90, 0x37,  // ....K@.7
                            /* 03C0 */  0x91, 0xD3, 0x7D, 0xF2, 0x31, 0x2A, 0xBF, 0x11,  // ..}.1*..
                            /* 03C8 */  0xF0, 0xF3, 0x08, 0x16, 0x28, 0x88, 0x6F, 0x18,  // ....(.o.
                            /* 03D0 */  0x1E, 0xDB, 0x81, 0xC4, 0x86, 0x73, 0x2D, 0xC1,  // .....s-.
                            /* 03D8 */  0xFE, 0xFF, 0x09, 0x2A, 0xB4, 0xE9, 0x53, 0xA3,  // ...*..S.
                            /* 03E0 */  0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69, 0x50,  // Q..ej.iP
                            /* 03E8 */  0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0x99, 0xB8, 0xF0,  // .O......
                            /* 03F0 */  0xF9, 0x15, 0xA1, 0x11, 0x3B, 0x12, 0x08, 0x8D,  // ....;...
                            /* 03F8 */  0x48, 0x21, 0x10, 0x07, 0xFE, 0x71, 0x08, 0xC4,  // H!...q..
                            /* 0400 */  0x72, 0xEF, 0x61, 0xBA, 0x16, 0x11, 0x5A, 0x19,  // r.a...Z.
                            /* 0408 */  0x01, 0x91, 0x36, 0x10, 0x01, 0x59, 0xBB, 0x0A,  // ..6..Y..
                            /* 0410 */  0x20, 0x96, 0x04, 0x44, 0x40, 0xFE, 0xFF, 0x03   //  ..D@...
                        })
                    }
                }

                Mutex (PSMX, 0x00)
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.DSPI\n", Zero, Zero, Zero, Zero, Zero, Zero)
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTA Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRA = Arg0
            If (PICM)
            {
                HDAD = Arg0
                SDCL = Arg0
            }
        }

        Method (INTB, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTB Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTC Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRC = Arg0
            If (PICM)
            {
                USB1 = Arg0
                USB3 = Arg0
            }
        }

        Method (INTD, 1, NotSerialized)
        {
            M460 ("PLA-ASL-\\_SB.INTD Arg0 = 0x%X\n", ToInteger (Arg0), Zero, Zero, Zero, Zero, Zero)
            PIRD = Arg0
            If (PICM)
            {
                SATA = Arg0
            }
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,5,6,10,11}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRA && (PIRA != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKA._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKA._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKA._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKA._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRB && (PIRB != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKB._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKB._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKB._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKB._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRC && (PIRC != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKC._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKC._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKC._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKC._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRD && (PIRD != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKD._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKD._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKD._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKD._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRE && (PIRE != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKE._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKE._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKE._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKE._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRF && (PIRF != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKF._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKF._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKF._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKF._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRG && (PIRG != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKG._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKG._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKG._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKG._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRH && (PIRH != 0x1F)))
                {
                    M460 ("PLA-ASL-\\_SB.LNKH._STA = 0xB\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x0B)
                }
                Else
                {
                    M460 ("PLA-ASL-\\_SB.LNKH._STA = 0x9\n", Zero, Zero, Zero, Zero, Zero, Zero)
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._PRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                M460 ("PLA-ASL-\\_SB.LNKH._DIS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._CRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                M460 ("PLA-ASL-\\_SB.LNKH._SRS\n", Zero, Zero, Zero, Zero, Zero, Zero)
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Sleep (0x02)
        }

        Method (S80H, 1, NotSerialized)
        {
            P80H = Arg0
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Sleep (One)
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (UR4I, 0x0F)
    Name (IC0I, 0x0A)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x04)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
            I31E,   1, 
            I32E,   1, 
            I33E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
            UT4E,   1, 
            I30E,   1, 
                ,   1, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
                ,   1, 
            HFPE,   1, 
            HD0E,   1, 
            HD2E,   1, 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
            I31D,   1, 
            I32D,   1, 
            I33D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   1, 
            UT4D,   1, 
            I30D,   1, 
                ,   1, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            STD3,   1, 
                ,   1, 
            US4D,   1, 
            S03D,   1, 
            UT0O,   1, 
            UT1O,   1, 
            UT2O,   1, 
            UT3O,   1, 
            Offset (0x1C), 
            I30M,   1, 
            I31M,   1, 
            I32M,   1, 
            I33M,   1
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (HID0)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD0E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC13000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID0._CRS.RBUF */
            }
        }

        Device (HID2)
        {
            Name (_HID, "AMDI0063")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HD2E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC12000,         // Address Base
                        0x00000200,         // Address Length
                        )
                    GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x00AB
                        }
                })
                Return (RBUF) /* \_SB_.HID2._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PPKG)
        {
            Name (_HID, "AMDI0052")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (FUR0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT0O == One))
                {
                    Return ("AMDIX020")
                }

                Return ("AMDI0020")
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT1O == One))
                {
                    Return ("AMDIX020")
                }

                Return ("AMDI0020")
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT2O == One))
                {
                    Return ("AMDIX020")
                }

                Return ("AMDI0020")
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((UT3O == One))
                {
                    Return ("AMDIX020")
                }

                Return ("AMDI0020")
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (FUR4)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDD1000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDD0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR4I & 0x0F))
                Return (BUF0) /* \_SB_.FUR4._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT4D && UT4E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT4D && UT4E))
                {
                    DSAD (0x14, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    DSAD (0x05, 0x03)
                }
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    DSAD (0x06, 0x03)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            Return (Buffer (0x04)
                            {
                                 0xE5, 0x00, 0x6A, 0x00                           // ..j.
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Name (I3ID, "AMDI0015")
        Name (I2ID, "AMDI0016")
        Device (I3CA)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I30M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDD2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I3CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I30E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x15, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I30D && I30E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I30D && I30E))
                {
                    DSAD (0x15, 0x03)
                }
            }
        }

        Device (I3CB)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I31M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDD3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I3CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I31E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0D, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I31D && I31E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I31D && I31E))
                {
                    DSAD (0x0D, 0x03)
                }
            }
        }

        Device (I3CC)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I32M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDD4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I3CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I32E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0E, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I32D && I32E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I32D && I32E))
                {
                    DSAD (0x0E, 0x03)
                }
            }
        }

        Device (I3CD)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((I33M == Zero))
                {
                    Return (I3ID) /* \_SB_.I3ID */
                }
                Else
                {
                    Return (I2ID) /* \_SB_.I2ID */
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDD6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I3CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((I33E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0F, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((I33D && I33E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((I33D && I33E))
                {
                    DSAD (0x0F, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y09)
                    IRQNoFlags (_Y0A)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y09._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y09._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y0A._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0B)
                    IRQNoFlags (_Y0C)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0B._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0B._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y0C._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0D)
                    IRQNoFlags (_Y0E)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y0E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0F)
                    IRQNoFlags (_Y10)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0F._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y0F._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y10._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.FUR0)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR0.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR1)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0x00, LittleEndian, ParityTypeNone, FlowControlNone,
                        0x0020, 0x0020, "\\_SB.FUR1",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR1.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR2)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR2.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR3)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0x00, LittleEndian, ParityTypeNone, FlowControlNone,
                        0x0020, 0x0020, "\\_SB.FUR3",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR3.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR4)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR4",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR4.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (WTP1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP1)
        {
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP2._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP2)
        {
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP2._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP3)
        {
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP4)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP4._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP4)
        {
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP4._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP5)
        {
            Name (_HID, "STK0005")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP5._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (WT21)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT21._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT21)
        {
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT21._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT22)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT22._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT22)
        {
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT22._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT23)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT23._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT23)
        {
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT23._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT24)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT24._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT24)
        {
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT24._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT25)
        {
            Name (_HID, "STK00052")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT25._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (WT31)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT31._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT31)
        {
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT31._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT32)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT32._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT32)
        {
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT32._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT33)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT33._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT33)
        {
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT33._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT34)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT34._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT34)
        {
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT34._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT35)
        {
            Name (_HID, "STK00053")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT35._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (WT41)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT41._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT41)
        {
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT41._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT42)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT42._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT42)
        {
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT42._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT43)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT43._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT43)
        {
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT43._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT44)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT44._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT44)
        {
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT44._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT45)
        {
            Name (_HID, "STK00054")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT45._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x009A
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == Zero)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x009A
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x009A
                        }
                })
                Return (RBUF) /* \_SB_.I2CC.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == 0x02)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("NXP8013"))  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0029, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0099
                        }
                    GpioIo (Exclusive, PullNone, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x009A
                        }
                })
                Return (RBUF) /* \_SB_.I2CD.NFC1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (NFCS == 0x03)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == Zero)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x10)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x11)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CC.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x02)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CC.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x12)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (TPNL)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004A, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CD.TPNL._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x03)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (ELAN)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, SharedAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0020
                        }
                })
                Return (RBUF) /* \_SB_.I2CD.ELAN._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPN == 0x13)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0){}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (TPDD)
        {
            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_SUB, "XXXX0000")  // _SUB: Subsystem ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((TPTY == One))
                {
                    _HID = "ELAN06FA"
                    _SUB = "ELAN0001"
                    Return (Zero)
                }

                If ((TPTY == 0x02))
                {
                    _HID = "SYNA2BA6"
                    _SUB = "SYNA0001"
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        If ((TPTY == One))
                        {
                            Return (One)
                        }

                        If ((TPTY == 0x02))
                        {
                            Return (0x20)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPTY == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((TPTY == One))
                {
                    Name (SBFB, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x02))
                {
                    Name (SBFS, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CA",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0009
                        }
                })
                If ((TPTY == One))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFI))
                }

                If ((TPTY == 0x02))
                {
                    Return (ConcatenateResTemplate (SBFS, SBFI))
                }
            }

            Method (TPRD, 0, Serialized)
            {
                Return (^^^PCI0.LPC0.EC0.ECTP) /* \_SB_.PCI0.LPC0.EC0_.ECTP */
            }

            Method (TPWR, 1, Serialized)
            {
                ^^^PCI0.LPC0.EC0.ECTP = Arg0
            }
        }
    }

    Scope (_SB.I2CB)
    {
    }

    Scope (_SB.I2CC)
    {
    }

    Scope (_SB.I2CD)
    {
    }

    Scope (_TZ)
    {
        ThermalZone (TZ01)
        {
            Name (CRTT, 0x6E)
            Name (PSVT, 0x32)
            Name (TSPS, 0x14)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == Zero))
                {
                    Local0 = \_SB.PCI0.LPC0.EC0.CPUT
                    Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
                Else
                {
                    Return (0x0B74)
                }
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x10)
                {
                    \_SB.PLTF.C000, 
                    \_SB.PLTF.C001, 
                    \_SB.PLTF.C002, 
                    \_SB.PLTF.C003, 
                    \_SB.PLTF.C004, 
                    \_SB.PLTF.C005, 
                    \_SB.PLTF.C006, 
                    \_SB.PLTF.C007, 
                    \_SB.PLTF.C008, 
                    \_SB.PLTF.C009, 
                    \_SB.PLTF.C00A, 
                    \_SB.PLTF.C00B, 
                    \_SB.PLTF.C00C, 
                    \_SB.PLTF.C00D, 
                    \_SB.PLTF.C00E, 
                    \_SB.PLTF.C00F
                })
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return ((0x0AAC + (CRTT * 0x0A)))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (One)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x02)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPS) /* \_TZ_.TZ01.TSPS */
            }
        }
    }
}

